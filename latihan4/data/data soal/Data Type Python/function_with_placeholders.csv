Instruction,Input,Output,materi,question_id,Full Code,Template
Write a Python function which takes in an argument and returns a corresponding string.,"Given an argument of 1,2 or 3","def get_string(arg):
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    if arg == 1:
        return ""One""
    elif arg == 2:
        return ""Two""
    elif arg ==3:
        return ""Three""
    else:
        return """"",Data Type,10,"def get_string(arg):
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    if arg == 1:
        return ""One""
    elif arg == 2:
        return ""Two""
    elif arg ==3:
        return ""Three""
    else:
        return """"","    ___
    """"""
    This function takes in an argument and returns the corresponding
    string. 
 
    Parameters:
    arg (int): the argument

    Returns:
    str: the corresponding string
    """"""
    ___
        return ""One""
    ___
        return ""Two""
    ___
        return ""Three""
    else:
        return """""
Build a Python script to remove all punctuation from a given string.,"""This is a cool string!""","import string

input_str = ""This is a cool string!""
punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))
print(punctuation_removed)",Data Type,22,"import string

input_str = ""This is a cool string!""
punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))
print(punctuation_removed)","import string

input_str = ""This is a cool string!""
punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation))
print(punctuation_removed)"
Create a program in Python to split a string into an array based on a given delimiter.,"String: Hello,World
Delimiter: ,","def split_string(s, delimiter): 
 return s.split(delimiter)

string = 'Hello,World'
delimiter = ','

result = split_string(string, delimiter)

# Outputs ['Hello', 'World']",Data Type,24,"def split_string(s, delimiter): 
 return s.split(delimiter)

string = 'Hello,World'
delimiter = ','

result = split_string(string, delimiter)

# Outputs ['Hello', 'World']","    ___
 return s.split(delimiter)

string = 'Hello,World'
delimiter = ','

result = split_string(string, delimiter)

# Outputs ['Hello', 'World']"
"Create a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.","[""Hello"", ""World"", ""Goodbye""]","def string_to_length(list_strings):
    return [len(string) for string in list_strings]",Data Type,37,"def string_to_length(list_strings):
    return [len(string) for string in list_strings]","    ___
    return [len(string) for string in list_strings]"
Use an existing Python function to find the longest string in the following array.,"arr = [""cat"", ""dog"", ""elephant"", ""squirrel"", ""moose""","max(arr, key=len) # returns ""elephant""",Data Type,42,"max(arr, key=len) # returns ""elephant""","max(arr, key=len) # returns ""elephant"""
Refactor a Python program to concatenate two strings without using the string.concat() function,"// Python program
str1 = ""Hello ""
str2 = ""World""

result = str1.concat(str2)
print(""Concatenated string: "", result)","str1 = ""Hello ""
str2 = ""World""
result = str1 + str2
print(""Concatenated string: "", result)",Data Type,45,"str1 = ""Hello ""
str2 = ""World""
result = str1 + str2
print(""Concatenated string: "", result)","str1 = ""Hello ""
str2 = ""World""
result = str1 + str2
print(""Concatenated string: "", result)"
Create a function in Python to find the longest string in a given list of strings,"[""Apple"", ""Banana"", ""Orange"", ""Mango"", ""Pineapple""]","def find_longest_string(arr):
    longest_string = ''
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

arr = [""Apple"", ""Banana"", ""Orange"", ""Mango"", ""Pineapple""]
result = find_longest_string(arr)
print('Longest string is', result)",Data Type,69,"def find_longest_string(arr):
    longest_string = ''
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

arr = [""Apple"", ""Banana"", ""Orange"", ""Mango"", ""Pineapple""]
result = find_longest_string(arr)
print('Longest string is', result)","    ___
    longest_string = ''
    ___
    ___
            longest_string = s
    return longest_string

arr = [""Apple"", ""Banana"", ""Orange"", ""Mango"", ""Pineapple""]
result = find_longest_string(arr)
print('Longest string is', result)"
"Write a python program that will take a given string and return a new string that is the same as the given one, except that all letters are reversed.","""Hello World!""","def reverseString(string): 
    string = """".join(reversed(string)) 
    return string 

if __name__ == ""__main__"": 
    string = ""Hello World!""
    print(reverseString(string))

# Output:
""!dlroW olleH""",Data Type,71,"def reverseString(string): 
    string = """".join(reversed(string)) 
    return string 

if __name__ == ""__main__"": 
    string = ""Hello World!""
    print(reverseString(string))

# Output:
""!dlroW olleH""","    ___
    string = """".join(reversed(string)) 
    return string 

    ___
    string = ""Hello World!""
    print(reverseString(string))

# Output:
""!dlroW olleH"""
Design a Python algorithm to parse a list of strings and prints the longest string's length.,"listOfString= [""I"", ""am"", ""so"", ""happy""]","listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = 0
for string in listStrings:
    if (len(string) > longestStringLen):
        longestStringLen = len(string)

print(longestStringLen)",Data Type,79,"listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = 0
for string in listStrings:
    if (len(string) > longestStringLen):
        longestStringLen = len(string)

print(longestStringLen)","listStrings= [""I"", ""am"", ""so"", ""happy""]
longestStringLen = 0
    ___
    ___
        longestStringLen = len(string)

print(longestStringLen)"
"In Python, use the re module to remove the HTML tags from a given string.",String: <b>This is a bold string</b>,"import re

string = ""<b>This is a bold string</b>""

clean_string = re.sub(r'<[^>]*>', '', string)

print(clean_string)",Data Type,81,"import re

string = ""<b>This is a bold string</b>""

clean_string = re.sub(r'<[^>]*>', '', string)

print(clean_string)","import re

string = ""<b>This is a bold string</b>""

clean_string = re.sub(r'<[^>]*>', '', string)

print(clean_string)"
Create a Python program that takes two strings as input and creates a new string with the characters in the second string that are not present in the first string.,"'jello','hello'","def difference(string1, string2):
  new_string = ''
  
  for char in string2:
    if char not in string1:
      new_string += char
      
  return new_string

string1 = 'jello'
string2 = 'hello'

print(difference(string1, string2)) # Output: 'e'",Data Type,106,"def difference(string1, string2):
  new_string = ''
  
  for char in string2:
    if char not in string1:
      new_string += char
      
  return new_string

string1 = 'jello'
string2 = 'hello'

print(difference(string1, string2)) # Output: 'e'","    ___
  new_string = ''
  
    ___
    ___
      new_string += char
      
  return new_string

string1 = 'jello'
string2 = 'hello'

print(difference(string1, string2)) # Output: 'e'"
Modify the following Python function to get the first index of the keyword within the string.,"def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i","def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -1",Data Type,117,"def first_index(str, keyword):
    for i in range(len(str)):
        if str[i] == keyword:
            return i
    return -1","    ___
    ___
    ___
            return i
    return -1"
Create a Python function that takes a list of strings as input and returns the longest string in the list.,"['Data', 'Science', 'Machine', 'Learning']","def find_longest_string(string_list):
    longest_string = ''
    for string in string_list:
        if len(string) > len(longest_string):
            longest_string = string
    return longest_string",Data Type,118,"def find_longest_string(string_list):
    longest_string = ''
    for string in string_list:
        if len(string) > len(longest_string):
            longest_string = string
    return longest_string","    ___
    longest_string = ''
    ___
    ___
            longest_string = string
    return longest_string"
Write a function in Python that encodes a string using a simple algorithm.,"Text string:  ""Hello""","def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor",Data Type,132,"def encodeString (text):
    encoded_string = ''
    for char in text:
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor","def encodeString (text):
    encoded_string = ''
    ___
        encoded_char = ord(char) + 3
        encoded_string += chr(encoded_char)

    return encoded_string

encodeString(""Hello"")  # khoor"
Take a string and output a list of all the words comprising the string,String: Python is a programming language.,"[‘Python’, ‘is’, ‘a’, ‘programming’, ‘language’]",Data Type,133,"[‘Python’, ‘is’, ‘a’, ‘programming’, ‘language’]","[‘Python’, ‘is’, ‘a’, ‘programming’, ‘language’]"
"In Python, parse a JSON string and return the value associated with a particular key","JSON String: { ""key1"": ""value1"", ""key2"": ""value2"" }
Key: ""key2""","import json

# Create a json object from the string
json_obj = json.loads('{""key1"": ""value1"", ""key2"": ""value2""}')

#get the value for a particular key
value = json_obj[""key2""]",Data Type,138,"import json

# Create a json object from the string
json_obj = json.loads('{""key1"": ""value1"", ""key2"": ""value2""}')

#get the value for a particular key
value = json_obj[""key2""]","import json

# Create a json object from the string
json_obj = json.loads('{""key1"": ""value1"", ""key2"": ""value2""}')

#get the value for a particular key
value = json_obj[""key2""]"
Implement an algorithm to find a substring in a given string using a greedy approach in Python.,"string = ""This is a sample string""
substring = ""sample""","def find_substring(string, substring):
    start = 0
    result = """"
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -1:
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result",Data Type,165,"def find_substring(string, substring):
    start = 0
    result = """"
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -1:
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result","    ___
    start = 0
    result = """"
    ___
        idx = string.find(substring, start)
    ___
            break
        result += string[idx:idx+len(substring)]
        start = idx+len(substring)
    return result"
Write a python script to remove all punctuations and whitespace in a string,"string = ""Hello, how are you! I'm doing great.""","def remove_punc_and_whitespace(string): 
    return ''.join([x for x in string if x not in ["" "", "","", "":"", ""-"", ""!"", ""?"", "".""]])",Data Type,166,"def remove_punc_and_whitespace(string): 
    return ''.join([x for x in string if x not in ["" "", "","", "":"", ""-"", ""!"", ""?"", "".""]])","    ___
    ___"
Create a program in Python that takes a list of strings and returns a new list with each string reversed.,"[""Hello"", ""World""]","def reverse_list(strings):
    return [s[::-1] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))",Data Type,172,"def reverse_list(strings):
    return [s[::-1] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))","    ___
    return [s[::-1] for s in strings]

strings = [""Hello"", ""World""]
print(reverse_list(strings))"
Rewrite the code in Python so that it prints the length of a given string.,"string = ""Hello World""","string = ""Hello World""
print(len(string)) # prints 11",Data Type,187,"string = ""Hello World""
print(len(string)) # prints 11","string = ""Hello World""
print(len(string)) # prints 11"
Build a mini classifier model in Python to predict whether a given string is palindrome or not.,'level',"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")",Data Type,189,"class Palindrome:

def __init__(self, str):
    self.str = str

def is_palindrome(self):
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
if palindrome.is_palindrome():
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")","class Palindrome:

    ___
    self.str = str

    ___
    return self.str == self.str[::-1]

palindrome = Palindrome(""level"")
    ___
    print(""The string is a palindrome"")
else:
    print(""The string is not a palindrome"")"
Create a Python function that returns the index of the nth occurrence of a substring in a given string.,"(""Hello World"", ""l"", 3)","def find_nth_occurrence(string, substring, n):
index = -1

while n > 0:
    n -= 1
    index = string.find(substring, index+1)

if index == -1:
    return None
else:
    return index

if __name__ == ""__main__"":
    result = find_nth_occurrence(""Hello World"", ""l"", 3)
    print(result)",Data Type,195,"def find_nth_occurrence(string, substring, n):
index = -1

while n > 0:
    n -= 1
    index = string.find(substring, index+1)

if index == -1:
    return None
else:
    return index

if __name__ == ""__main__"":
    result = find_nth_occurrence(""Hello World"", ""l"", 3)
    print(result)","    ___
index = -1

    ___
    n -= 1
    index = string.find(substring, index+1)

    ___
    return None
else:
    return index

    ___
    result = find_nth_occurrence(""Hello World"", ""l"", 3)
    print(result)"
Design an algorithm in Python for displaying the reverse of a string input.,"Input String: ""Hello World!""","# Create a function 
def reverse_string(str): 
    # Create an empty string  
    rev_str = """" 

    # Iterate over the string in reverse 
    for i in str: 
        rev_str = i + rev_str
    
    # Return the reversed string 
    return rev_str

# Driver Code
str = ""Hello World!""
print(""The reversed string is:"", reverse_string(str))",Data Type,202,"# Create a function 
def reverse_string(str): 
    # Create an empty string  
    rev_str = """" 

    # Iterate over the string in reverse 
    for i in str: 
        rev_str = i + rev_str
    
    # Return the reversed string 
    return rev_str

# Driver Code
str = ""Hello World!""
print(""The reversed string is:"", reverse_string(str))","# Create a function 
    ___
    # Create an empty string  
    rev_str = """" 

    # Iterate over the string in reverse 
    ___
        rev_str = i + rev_str
    
    # Return the reversed string 
    return rev_str

# Driver Code
str = ""Hello World!""
print(""The reversed string is:"", reverse_string(str))"
"Write a Python function to classify a given string based on the following conditions:
A) If the length of the string is less than 3, “Short”
B) If the string only contains alphabets, “Alphabet”
C) If the string only contains numbers, “Numeral”","string = ""ab1""","def classify_string(string):
    if len(string) < 3:
        return ""Short"" 
    elif string.isalpha():
        return ""Alphabet"" 
    elif string.isnumeric():
        return ""Numeral""",Data Type,208,"def classify_string(string):
    if len(string) < 3:
        return ""Short"" 
    elif string.isalpha():
        return ""Alphabet"" 
    elif string.isnumeric():
        return ""Numeral""","    ___
    ___
        return ""Short"" 
    ___
        return ""Alphabet"" 
    ___
        return ""Numeral"""
"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.","sample_string = ""HelloWorld""","def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)",Data Type,209,"def find_frequencies(sample_string):
   frequency_table = dict()
   for char in sample_string:
      if char in frequency_table:
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)","    ___
   frequency_table = dict()
    ___
    ___
         frequency_table[char] += 1
      else:
         frequency_table[char] = 1
   return frequency_table

result = find_frequencies(""HelloWorld"")
print(result)"
Create a function that takes a list of strings (words or phrases) as an argument and returns the longest string in the list.,"[“javascript”, “python”, “ruby”]","function findLongestString(strList) {
 let longestStr = '';
 
 strList.forEach(str => {
 if (str.length > longestStr.length) {
 longestStr = str;
 }
 })
 
 return longestStr;
}
 
let longestWord = findLongestString(['javascript', 'python', 'ruby']);
 
console.log(longestWord); // Output: 'javascript'",Data Type,220,"function findLongestString(strList) {
 let longestStr = '';
 
 strList.forEach(str => {
 if (str.length > longestStr.length) {
 longestStr = str;
 }
 })
 
 return longestStr;
}
 
let longestWord = findLongestString(['javascript', 'python', 'ruby']);
 
console.log(longestWord); // Output: 'javascript'","function findLongestString(strList) {
 let longestStr = '';
 
 strList.forEach(str => {
 if (str.length > longestStr.length) {
 longestStr = str;
 }
 })
 
 return longestStr;
}
 
let longestWord = findLongestString(['javascript', 'python', 'ruby']);
 
console.log(longestWord); // Output: 'javascript'"
Generate a Python program to clean a string of HTML tags.,"Example Input: ""<p>This is a <b>test</b> string</p>"".","import re

# Clean a string of HTML tags 
def clean_html_tags(str):
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string",Data Type,226,"import re

# Clean a string of HTML tags 
def clean_html_tags(str):
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string","import re

# Clean a string of HTML tags 
    ___
    clean_str = re.sub(""<.*?>"", """", str)
    return clean_str

html_string = ""<p>This is a <b>test</b> string</p>""

clean_str = clean_html_tags(html_string)

print(clean_str) #This is a test string"
Write a code to detect any pattern in a given string in Python.,"my_string = ""aabccba""","def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))",Data Type,236,"def detect_pattern(my_string):
    for i in range(len(my_string)):
        if my_string.count(my_string[i]) > 1:
            return True
    return False

if __name__ == '__main__':
    print(detect_pattern(my_string))","    ___
    ___
    ___
            return True
    return False

    ___
    print(detect_pattern(my_string))"
Write a Python program to convert a string containing a number in base 8 to base 10.,input_num='45',"def conv(input_num):
    decimal_num = int(input_Num, 8)
    return decimal_num",Data Type,240,"def conv(input_num):
    decimal_num = int(input_Num, 8)
    return decimal_num","    ___
    decimal_num = int(input_Num, 8)
    return decimal_num"
Write a Python program to convert a date string to the corresponding Unix timestamp.,"date_string = ""October 15, 2020""","import time 

def convert_to_timestamp(date_string): 
    return time.mktime(time.strptime(date_string, ""%B %d, %Y""))",Data Type,257,"import time 

def convert_to_timestamp(date_string): 
    return time.mktime(time.strptime(date_string, ""%B %d, %Y""))","import time 

    ___
    return time.mktime(time.strptime(date_string, ""%B %d, %Y""))"
Write a function in Python that will take in a string and return the most commonly occurring character.,"Sample string: ""abrakadabra""","def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)",Data Type,264,"def max_char(s):
    chars = {}
    for c in s:
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    for c, v in chars.items():
        if v > max_val:
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)","    ___
    chars = {}
    ___
        chars[c] = chars.get(c, 0) + 1
    max_val = -1
    max_char = None
    ___
    ___
            max_val = v
            max_char = c
    return max_char

print(max_char('abrakadabra'))

# Output: a (occurs 5 times)"
Convert the given string into a standard format in Python.,"String: ""My name is John Doe""","string = ""My name is John Doe""
standard_string = string.title()
print(standard_string)
#My Name Is John Doe",Data Type,268,"string = ""My name is John Doe""
standard_string = string.title()
print(standard_string)
#My Name Is John Doe","string = ""My name is John Doe""
standard_string = string.title()
print(standard_string)
#My Name Is John Doe"
Develop an algorithm in Python to replace all the vowels in a string with an asterisk.,string = “Hello World”,"string = “Hello World”

def replaceVowels(string):
    vowels = (""a"", ""e"", ""i"", ""o"", ""u"")
    result = """"
    for char in string:
        if char in vowels:
            result += ""*""
        else:
            result += char
    return result

new_string = replaceVowels(string)
print(new_string) # This will print out ""H*ll* W*rld""",Data Type,270,"string = “Hello World”

def replaceVowels(string):
    vowels = (""a"", ""e"", ""i"", ""o"", ""u"")
    result = """"
    for char in string:
        if char in vowels:
            result += ""*""
        else:
            result += char
    return result

new_string = replaceVowels(string)
print(new_string) # This will print out ""H*ll* W*rld""","string = “Hello World”

    ___
    vowels = (""a"", ""e"", ""i"", ""o"", ""u"")
    result = """"
    ___
    ___
            result += ""*""
        else:
            result += char
    return result

new_string = replaceVowels(string)
print(new_string) # This will print out ""H*ll* W*rld"""
Build a Python program to tokenize a string into separate words.,"""Hello, World!""","def tokenize(string):
    words = string.split("" "")
    return words

tokenized_str = tokenize(""Hello, World!"")
print(tokenized_str)",Data Type,274,"def tokenize(string):
    words = string.split("" "")
    return words

tokenized_str = tokenize(""Hello, World!"")
print(tokenized_str)","    ___
    words = string.split("" "")
    return words

tokenized_str = tokenize(""Hello, World!"")
print(tokenized_str)"
"Using the sample data, convert the provided string into a dictionary in Python.","Sample Data: ""Name: John Doe; Age: 23; Course: Data Science""","sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)",Data Type,284,"sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
for item in data_items:
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)","sample_data = ""Name: John Doe; Age: 23; Course: Data Science""

# Split the string by the "";"" character
data_items = sample_data.split(';')

# Strip any extra whitespace and split by the "":"" character
data_dict = {}
    ___
    key, value = item.strip().split(': ')
    data_dict[key] = value
    
print(data_dict)"
"Write a python program to count the total number of ""1""s present in a binary string",binary_string = '10101100110',"def count_ones(binary_string):
    count = 0
    for bit in binary_string:
        if bit == '1':
            count += 1
    return count",Data Type,290,"def count_ones(binary_string):
    count = 0
    for bit in binary_string:
        if bit == '1':
            count += 1
    return count","    ___
    count = 0
    ___
    ___
            count += 1
    return count"
Generate a python program to search input string s for a given substring t.,"s= ""This is a string"", t=""ring""","def find(s, t):
    if t in s:
        return s.index(t)
    else:
        return -1",Data Type,292,"def find(s, t):
    if t in s:
        return s.index(t)
    else:
        return -1","    ___
    ___
        return s.index(t)
    else:
        return -1"
Write a python method to identify whether the given string is a palindrome.,"String: ""racecar""","def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True",Data Type,299,"def is_palindrome(s):
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True","    ___
  s = s.lower()
  return s == s[::-1]

print(is_palindrome(""racecar"")) # True"
"Using regex, extend the following python code to remove whitespaces from a string.","def remove_spaces(user_string):
    '''This function will remove all the spaces from a string'''","def remove_spaces(user_string):
    '''This function will remove all the spaces from a string'''
    user_string = re.sub(r'\s','',user_string)
    return user_string",Data Type,301,"def remove_spaces(user_string):
    '''This function will remove all the spaces from a string'''
    user_string = re.sub(r'\s','',user_string)
    return user_string","    ___
    '''This function will remove all the spaces from a string'''
    user_string = re.sub(r'\s','',user_string)
    return user_string"
Write a Python program to convert a given binary form to its original string.,"b_string = ""0100100001100101011011000110110001101111""","def binary_to_string(b_string):
 s = """" 
 for i in range(0, len(b_string), 8):
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello",Data Type,306,"def binary_to_string(b_string):
 s = """" 
 for i in range(0, len(b_string), 8):
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello","    ___
 s = """" 
    ___
 byte = b_string[i: i + 8]
 s += chr(int(byte, 2))
 return s

b_string = ""0100100001100101011011000110110001101111""
print(binary_to_string(b_string))
# Output: Hello"
Create a function in Python that takes a string and an integer as arguments and returns the string with the integer number of characters removed from the front of the string.,"""Hello, World!"", 5","def remove_from_front(string, num_chars):
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", 5)
print(result)",Data Type,308,"def remove_from_front(string, num_chars):
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", 5)
print(result)","    ___
    return string[num_chars:]

result = remove_from_front(""Hello, World!"", 5)
print(result)"
Write a Python program to determine whether or not a given string is a palindrome.,"""racecar""","def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')",Data Type,313,"def isPalindrome(s):

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
 if rev == s:
 return True
 return False

if isPalindrome(""racecar""):
 print('String is a palindrome')
else:
 print('String is not a palindrome')","    ___

 # remove whitespaces
 s = ''.join(s.split())

 # reverse string
 rev = s[::-1]

 # compare
    ___
 return True
 return False

    ___
 print('String is a palindrome')
else:
 print('String is not a palindrome')"
"Given an array of strings, write a program in Python to calculate the number of occurrences for each string.","['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']","words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']

from collections import Counter
word_count = Counter(words)

for word, count in word_count.items():
 print(f'{word} : {count}')",Data Type,328,"words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']

from collections import Counter
word_count = Counter(words)

for word, count in word_count.items():
 print(f'{word} : {count}')","words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']

from collections import Counter
word_count = Counter(words)

    ___
 print(f'{word} : {count}')"
Write a Python program to convert a given string to one of its equivalent shell script command,"string = ""copy file1.txt file2.txt""","def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'",Data Type,331,"def string_to_shell_command(string):
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    for arg in input_args:
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'","    ___
    split_string = string.split()
    command_name = split_string[0]
    input_args = split_string[1:]
    command_args = ''
    ___
        command_args += f'""{arg}""' + ' '
    return f'{command_name} {command_args}'"
Identify a type of all the variables in the Python expression below.,n = 15.7,The variable n is a float.,Data Type,340,The variable n is a float.,The variable n is a float.
"Write a Python program to check whether a given string starts with ""Hello"".",'Hello world!',"if 'Hello' in str1:
    print(""The string starts with 'Hello'"")
else:
    print(""The string does not start with 'Hello'"")",Data Type,344,"if 'Hello' in str1:
    print(""The string starts with 'Hello'"")
else:
    print(""The string does not start with 'Hello'"")","    ___
    print(""The string starts with 'Hello'"")
else:
    print(""The string does not start with 'Hello'"")"
Implement a simple python program to split a string on a punctuation symbol.,"'Hello,World!'","def split_on_punctuation(s):
    #Using re module
    import re
    out = re.split('[,]',s)
    return out

print(split_on_punctuation('Hello,World!'))",Data Type,351,"def split_on_punctuation(s):
    #Using re module
    import re
    out = re.split('[,]',s)
    return out

print(split_on_punctuation('Hello,World!'))","    ___
    #Using re module
    import re
    out = re.split('[,]',s)
    return out

print(split_on_punctuation('Hello,World!'))"
Write a function in python for finding a substring of a given string,"""Hello World"", ""lo Wo""","def find_substring(string, sub_string):
  indices = []
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))",Data Type,365,"def find_substring(string, sub_string):
  indices = []
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))","    ___
  indices = []
    ___
    ___
      indices.append(i)
  return indices

print(find_substring(""Hello World"", ""lo Wo""))"
Write a Python program to split a string on any whitespace.,"String to be split = ""Python is an interpreted language.""","def splitOnWhitespace(inputString):
	words = inputString.split()
	return words

stringToBeSplit = ""Python is an interpreted language.""
words = splitOnWhitespace(stringToBeSplit)
print(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.']",Data Type,387,"def splitOnWhitespace(inputString):
	words = inputString.split()
	return words

stringToBeSplit = ""Python is an interpreted language.""
words = splitOnWhitespace(stringToBeSplit)
print(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.']","    ___
	words = inputString.split()
	return words

stringToBeSplit = ""Python is an interpreted language.""
words = splitOnWhitespace(stringToBeSplit)
print(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.']"
Write a Python program to match a given pattern in a given string.,"String: ""ABCDDEFG"" 
Pattern: ""AB*EFG""","import re

string = ""ABCDDEFG""
pattern = ""AB*EFG""
match = re.search(pattern, string)
 
if match:
    print(""Pattern found!"")
else:
    print(""Pattern not found!"")",Data Type,388,"import re

string = ""ABCDDEFG""
pattern = ""AB*EFG""
match = re.search(pattern, string)
 
if match:
    print(""Pattern found!"")
else:
    print(""Pattern not found!"")","import re

string = ""ABCDDEFG""
pattern = ""AB*EFG""
match = re.search(pattern, string)
 
    ___
    print(""Pattern found!"")
else:
    print(""Pattern not found!"")"
Write a Python program to search a list of strings for a given string.,"list = [""dog"", ""cat"", ""bird""]
target = ""bird""","list = [""dog"", ""cat"", ""bird""]
target = ""bird""

for element in list:
    if element == target:
        print(""Target string found: {}"".format(target))
        break",Data Type,399,"list = [""dog"", ""cat"", ""bird""]
target = ""bird""

for element in list:
    if element == target:
        print(""Target string found: {}"".format(target))
        break","list = [""dog"", ""cat"", ""bird""]
target = ""bird""

    ___
    ___
        print(""Target string found: {}"".format(target))
        break"
Create a Python script that takes a string as an input and outputs a list of words that all contain at least one vowel.,"""Hello my name is John""","['Hello', 'name', 'John']",Data Type,402,"['Hello', 'name', 'John']","['Hello', 'name', 'John']"
Create a function in Python that takes a list of strings and for each string appends the first letter to the end of the string.,"['cat', 'bird', 'rabbit']","def append_first_letter_end(list_of_strings):
 new_list_of_strings = []
 for string in list_of_strings:
 new_string = string + string[0]
 new_list_of_strings.append(new_string)
 return new_list_of_strings",Data Type,405,"def append_first_letter_end(list_of_strings):
 new_list_of_strings = []
 for string in list_of_strings:
 new_string = string + string[0]
 new_list_of_strings.append(new_string)
 return new_list_of_strings","    ___
 new_list_of_strings = []
    ___
 new_string = string + string[0]
 new_list_of_strings.append(new_string)
 return new_list_of_strings"
Write a python function which will check if input string is palindrome or not.,"input_string = ""racecar""","def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")",Data Type,412,"def is_palindrome(input_string):
    if input_string == input_string[::-1]:
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

if check_palindrome == True:
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")","    ___
    ___
        return True
    else:
        return False
    
input_string = ""racecar""

check_palindrome = is_palindrome(input_string)

    ___
    print(""Input string is a palindrome"")
else:
    print(""Input string is NOT a palindrome"")"
Create a program in Python to count the number of time a particular character appears in a given string.,"Input string: ""Hello, World!""
Character: ""l""","def count_char_in_string(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)",Data Type,419,"def count_char_in_string(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)","    ___
    count = 0
    ___
    ___
            count += 1
    return count

string = ""Hello, World!""
char = ""l""
count = count_char_in_string(string, char)
print(""The number of times"", char, ""appears in the string is:"", count)"
Generate a Python program for reversing a string.,"string = ""Hello World""","string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
for i in range(length-1, -1, -1):
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)",Data Type,426,"string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
for i in range(length-1, -1, -1):
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)","string = ""Hello World""

# get length of the string
length = len(string)

# create an empty string
reverse = """"

# loop backword through the string
    ___
 # add current character to empty string
 reverse = reverse + string[i]

# print out the result
print(reverse)"
Generate a Python function that takes a sentence (string) as input and outputs a list of all the distinct words in the sentence.,The quick brown fox jumps over the lazy dog,"def distinct_words(sentence):
 words = sentence.split()
 distinct_words = []
 for word in words:
  if word not in distinct_words:
   distinct_words.append(word)
 return distinct_words",Data Type,446,"def distinct_words(sentence):
 words = sentence.split()
 distinct_words = []
 for word in words:
  if word not in distinct_words:
   distinct_words.append(word)
 return distinct_words","    ___
 words = sentence.split()
 distinct_words = []
    ___
    ___
   distinct_words.append(word)
 return distinct_words"
Write a Python program to replace all the white spaces in a given string with the '*' character.,str = “This is a sample string”,"str = 'This is a sample string'

new_str = str.replace(' ', '*')

print(new_str) // This*is*a*sample*string",Data Type,457,"str = 'This is a sample string'

new_str = str.replace(' ', '*')

print(new_str) // This*is*a*sample*string","str = 'This is a sample string'

new_str = str.replace(' ', '*')

print(new_str) // This*is*a*sample*string"
Write a Python function to count the number of substrings of a given string that contains exactly K distinct characters.,"""abcabcabcabc"", K = 2","def count_substrings_with_k_distinct_characters(in_str, k):
    count = 0
    for i in range(len(in_str)-k+1):
        sub_str = in_str[i:i+k]
        if len(set(sub_str)) == k:
            count +=1 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", 2)
print(count)",Data Type,460,"def count_substrings_with_k_distinct_characters(in_str, k):
    count = 0
    for i in range(len(in_str)-k+1):
        sub_str = in_str[i:i+k]
        if len(set(sub_str)) == k:
            count +=1 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", 2)
print(count)","    ___
    count = 0
    ___
        sub_str = in_str[i:i+k]
    ___
            count +=1 
    return count

count = count_substrings_with_k_distinct_characters(""abcabcabcabc"", 2)
print(count)"
Implement a function in Python that takes a string as a parameter and capitalizes the first letter of each word in the string.,The quick brown fox,"def capitalize(input_string):
    if len(input_string) == 0:
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))",Data Type,461,"def capitalize(input_string):
    if len(input_string) == 0:
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))","    ___
    ___
        return ''
    else:
        words = input_string.split()
        capitalized_words = [word.capitalize() for word in words]
        return ' '.join(capitalized_words)

print(capitalize('The quick brown fox'))"
Design a python code to remove a character from a given string.,"s = ""Hello World""","def remove_char(s, char):
    s = s.replace(char, '')
    return s

remove_char(s, 'l')",Data Type,475,"def remove_char(s, char):
    s = s.replace(char, '')
    return s

remove_char(s, 'l')","    ___
    s = s.replace(char, '')
    return s

remove_char(s, 'l')"
Develop a Python script to get the length of a given string.,How are you?,"def get_string_length(str):
    return len(str)

get_string_length(""How are you?"")",Data Type,478,"def get_string_length(str):
    return len(str)

get_string_length(""How are you?"")","    ___
    return len(str)

get_string_length(""How are you?"")"
Design a function in Python to delete duplicate characters from a given string.,String: python,"def delete_duplicate(str):
    temp_str = """"
    for i in range(0, len(str)):
        if str[i] not in temp_str:
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)",Data Type,481,"def delete_duplicate(str):
    temp_str = """"
    for i in range(0, len(str)):
        if str[i] not in temp_str:
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)","    ___
    temp_str = """"
    ___
    ___
            temp_str += str[i]
    return temp_str

input_string = ""w3python""
result = delete_duplicate(input_string)

print(""After deleting duplicate character, string is:"", result)"
How would you design a Python program to filter out string elements from a given array of string elements?,"lst = [""apple"", ""zoo"", ""banana"", ""apple"", ""foo"", ""zoo""]","def filter_out_strings(lst):
  new_lst = []
  for item in lst:
    if item not in new_lst:
      new_lst.append(item)
  return new_lst

filtered_list = filter_out_strings(lst) 
print(filtered_list) # Output -> ['apple', 'zoo', 'banana', 'foo']",Data Type,484,"def filter_out_strings(lst):
  new_lst = []
  for item in lst:
    if item not in new_lst:
      new_lst.append(item)
  return new_lst

filtered_list = filter_out_strings(lst) 
print(filtered_list) # Output -> ['apple', 'zoo', 'banana', 'foo']","    ___
  new_lst = []
    ___
    ___
      new_lst.append(item)
  return new_lst

filtered_list = filter_out_strings(lst) 
print(filtered_list) # Output -> ['apple', 'zoo', 'banana', 'foo']"
Modify the Python code below to reverse the string input.,string = “hello world”,"string = “hello world” 
# Reverse the string 
rev_string = """" 
for char in string: 
 rev_string = char + rev_string 

# Print the reversed string 
print(rev_string)",Data Type,488,"string = “hello world” 
# Reverse the string 
rev_string = """" 
for char in string: 
 rev_string = char + rev_string 

# Print the reversed string 
print(rev_string)","string = “hello world” 
# Reverse the string 
rev_string = """" 
    ___
 rev_string = char + rev_string 

# Print the reversed string 
print(rev_string)"
Construct a code to filter a string for only numerical characters in Python.,"""4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s""","def filter_string(string):
    filtered_string = ''
    for c in string:
        if c.isdigit():
            filtered_string += c
    return filtered_string

print(filter_string(""4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s""))",Data Type,489,"def filter_string(string):
    filtered_string = ''
    for c in string:
        if c.isdigit():
            filtered_string += c
    return filtered_string

print(filter_string(""4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s""))","    ___
    filtered_string = ''
    ___
    ___
            filtered_string += c
    return filtered_string

print(filter_string(""4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s""))"
Write a regex expression that matches the following string.,"String: ""I love programming in Python.""","regex = ""I love programming in Python\.""",Data Type,495,"regex = ""I love programming in Python\.""","regex = ""I love programming in Python\."""
Write an algorithm in Python to convert a given binary string to decimal number.,"""11010""","def bin2dec(binary):
    decimal, i = 0, 0
    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

binary = 11010
print(bin2dec(binary))",Data Type,499,"def bin2dec(binary):
    decimal, i = 0, 0
    while binary != 0:
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

binary = 11010
print(bin2dec(binary))","    ___
    decimal, i = 0, 0
    ___
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    return decimal

binary = 11010
print(bin2dec(binary))"
Construct a function in Python which takes in a string and returns the number of vowels it has.,"string=""hello world""","def countVowels(string):
    
    vowels = 'aeiouAEIOU'
    count = 0

    for char in string:
        if char in vowels:
            count += 1
    
    return count",Data Type,511,"def countVowels(string):
    
    vowels = 'aeiouAEIOU'
    count = 0

    for char in string:
        if char in vowels:
            count += 1
    
    return count","    ___
    
    vowels = 'aeiouAEIOU'
    count = 0

    ___
    ___
            count += 1
    
    return count"
Convert the following Python dictionary to a JSON string.,"data = {
  ""Name"": ""John"",
  ""Age"": 30,
  ""Cities"": [""New York"", ""London"", ""Paris""]
}","{
    ""Name"": ""John"",
    ""Age"": 30,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}",Data Type,518,"{
    ""Name"": ""John"",
    ""Age"": 30,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}","{
    ""Name"": ""John"",
    ""Age"": 30,
    ""Cities"": [""New York"", ""London"", ""Paris""]
}"
Write a python program to find the type and value of a given variable.,x = 10,"def find_type_and_value(x):
    t = type(x)
    v = x
    return t, v",Data Type,520,"def find_type_and_value(x):
    t = type(x)
    v = x
    return t, v","    ___
    t = type(x)
    v = x
    return t, v"
Can you create a Python function to interpolate a given string?,"""Hello {{name}}""","def interpolate(str):
    return str.format(name=""world"")

input_str = ""Hello {{name}}""
print(interpolate(input_str)) // Output: ""Hello world""",Data Type,525,"def interpolate(str):
    return str.format(name=""world"")

input_str = ""Hello {{name}}""
print(interpolate(input_str)) // Output: ""Hello world""","    ___
    return str.format(name=""world"")

input_str = ""Hello {{name}}""
print(interpolate(input_str)) // Output: ""Hello world"""
Develop a Python program to convert a given list of strings to a single string.,"my_list = ['Today', 'is', 'a', 'good', 'day']","def list_to_string(my_list):
  return ' '.join(my_list)",Data Type,531,"def list_to_string(my_list):
  return ' '.join(my_list)","    ___
  return ' '.join(my_list)"
Create a Python function that prints a given string n times.,"string: ""Hello World!!""
N: 5","def repeatString(string, n): 
  
    for i in range(n): 
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = 5
repeatString(string, n)",Data Type,539,"def repeatString(string, n): 
  
    for i in range(n): 
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = 5
repeatString(string, n)","    ___
  
    ___
        print(string, end = """") 
  
# Driver Code 
string = ""Hello World!!""
n = 5
repeatString(string, n)"
Write a Python program to delete vowels from a given string.,'My name is John',"def removeVowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    new_string = '' 
    for char in string: 
        if char not in vowels: 
            new_string += char 
    return new_string 

string = 'My name is John'
removeVowelString = removeVowels(string) 
print(removeVowelString)",Data Type,541,"def removeVowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    new_string = '' 
    for char in string: 
        if char not in vowels: 
            new_string += char 
    return new_string 

string = 'My name is John'
removeVowelString = removeVowels(string) 
print(removeVowelString)","    ___
    vowels = ('a', 'e', 'i', 'o', 'u')  
    new_string = '' 
    ___
    ___
            new_string += char 
    return new_string 

string = 'My name is John'
removeVowelString = removeVowels(string) 
print(removeVowelString)"
Classify the following Python statement as a type of loop.,"for i in range(10):
    print(i)",for loop.,Data Type,547,for loop.,for loop.
Generate a Python code for crawling a website for a specific type of data.,"website: www.example.com 
data to crawl: phone numbers","import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))",Data Type,552,"import requests
import re

def crawl_website_for_phone_numbers(website):
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
if __name__ == '__main__':
    print(crawl_website_for_phone_numbers('www.example.com'))","import requests
import re

    ___
    response = requests.get(website)
    phone_numbers = re.findall('\d{3}-\d{3}-\d{4}', response.text)
    return phone_numbers
    
    ___
    print(crawl_website_for_phone_numbers('www.example.com'))"
Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists.,"list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]","def list_sum(list1, list2):
 # initialize sum with 0
 total_sum = 0 
 
 # iterate over each element in list1
 for num in list1: 
     # add to sum
     total_sum += num 

 # iterate over each element in list2
 for num in list2: 
     # add to sum
     total_sum += num 

return total_sum",Data Type,559,"def list_sum(list1, list2):
 # initialize sum with 0
 total_sum = 0 
 
 # iterate over each element in list1
 for num in list1: 
     # add to sum
     total_sum += num 

 # iterate over each element in list2
 for num in list2: 
     # add to sum
     total_sum += num 

return total_sum","    ___
 # initialize sum with 0
 total_sum = 0 
 
 # iterate over each element in list1
    ___
     # add to sum
     total_sum += num 

 # iterate over each element in list2
    ___
     # add to sum
     total_sum += num 

return total_sum"
Create a script in Python that takes a list of strings and prints the string with the longest length.,"['hello', 'world', 'abracadabra']","def longest_string(str_list):
    longest = str_list[0]
    for s in str_list:
        if len(s) > len(longest):
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])",Data Type,572,"def longest_string(str_list):
    longest = str_list[0]
    for s in str_list:
        if len(s) > len(longest):
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])","    ___
    longest = str_list[0]
    ___
    ___
            longest = s
    print(longest)
    
longest_string(['hello', 'world', 'abracadabra'])"
Create a Python script that takes a string and prints the first character of every word in the given string.,"""This is a test string""","def first_characters_of_words(string):
    words = string.split("" "") 
    characters = [word[0] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat",Data Type,578,"def first_characters_of_words(string):
    words = string.split("" "") 
    characters = [word[0] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat","    ___
    words = string.split("" "") 
    characters = [word[0] for word in words] 
    return """".join(characters)

print(first_characters_of_words(""This is a test string"")) # Tiat"
Write a function in Python that takes in a string and removes all the unnecessary whitespaces.,"""This     string  contains   too     much whitespace!""","def remove_whitespaces(string):
    return ' '.join(string.split())
 
print(remove_whitespaces(""This     string  contains   too     much whitespace!""))",Data Type,587,"def remove_whitespaces(string):
    return ' '.join(string.split())
 
print(remove_whitespaces(""This     string  contains   too     much whitespace!""))","    ___
    return ' '.join(string.split())
 
print(remove_whitespaces(""This     string  contains   too     much whitespace!""))"
Design an algorithm in Python to find the number of occurrences of a given string in another string.,"haystack = ""Hello World""
needle = ""l""","def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count",Data Type,588,"def count_occurrences(haystack, needle):
    count = 0
    for char in haystack:
        if char == needle:
            count += 1
    return count","    ___
    count = 0
    ___
    ___
            count += 1
    return count"
Write a Python program to calculate the sum of the numerical values of each character of a string,string = 'program',"def sumCharValues(string):
    sum = 0
    for ch in string:
        sum += ord(ch)
    return sum",Data Type,594,"def sumCharValues(string):
    sum = 0
    for ch in string:
        sum += ord(ch)
    return sum","    ___
    sum = 0
    ___
        sum += ord(ch)
    return sum"
Create a Python program to convert a list of characters into a string,"Convert this array ['a', 'b', 'c'] into a string","def list_to_str(arr):
    str = """"
    for i in arr:
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)",Data Type,602,"def list_to_str(arr):
    str = """"
    for i in arr:
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)","    ___
    str = """"
    ___
        str += i
    return str

arr = ['a', 'b', 'c']
  
result = list_to_str(arr) 
print(result)"
Design a Python program to edit a given text string,"""Apple is a great fruit""","def edit_string(text):
    text = text.replace(""Apple"", ""Orange"")
    return text

text = ""Apple is a great fruit""
print(edit_string(text))
# Output: Orange is a great fruit",Data Type,603,"def edit_string(text):
    text = text.replace(""Apple"", ""Orange"")
    return text

text = ""Apple is a great fruit""
print(edit_string(text))
# Output: Orange is a great fruit","    ___
    text = text.replace(""Apple"", ""Orange"")
    return text

text = ""Apple is a great fruit""
print(edit_string(text))
# Output: Orange is a great fruit"
Create a Python script to validate a JSON string.,"""{""name"":""John"",""age"":30}""","import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False",Data Type,632,"import json

def validate_json_string(s):
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False","import json

    ___
    try:
        json_obj = json.loads(s)
        return True
    except json.JSONDecodeError:
        return False"
Write a Python program to parse a JSON string and store the result in a new dictionary.,"json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'","import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': 30, 'city': 'New York'}",Data Type,651,"import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': 30, 'city': 'New York'}","import json

# parse JSON string into a dictionary
json_dict = json.loads(json_string) 
  
# result 
print(json_dict) 

# Output:
{'name': 'John', 'age': 30, 'city': 'New York'}"
Produce a logic in Python to truncate a given string after the given number of characters.,"String = ""Hello World"", length = 4","def string_truncate(string, length):
    if length > len(string):
        return string
    else:
        return string[:length] + '...'",Data Type,655,"def string_truncate(string, length):
    if length > len(string):
        return string
    else:
        return string[:length] + '...'","    ___
    ___
        return string
    else:
        return string[:length] + '...'"
Design a function in Python to remove the vowels from a given string.,"text = ""Hello World""","def remove_vowels(text):
    """"""Remove the vowels from a given string.""""""
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    result = """"
    for char in text:
        if char.lower() not in vowels:
            result += char
    return result

# Output
print(remove_vowels(text))",Data Type,659,"def remove_vowels(text):
    """"""Remove the vowels from a given string.""""""
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    result = """"
    for char in text:
        if char.lower() not in vowels:
            result += char
    return result

# Output
print(remove_vowels(text))","    ___
    """"""Remove the vowels from a given string.""""""
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    result = """"
    ___
    ___
            result += char
    return result

# Output
print(remove_vowels(text))"
Write a function in Python that takes a given string and checks if it is a palindrome or not.,"""racecar""","def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))",Data Type,664,"def isPalindrome(s):
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
        if (s[left] != s[right]): 
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))","    ___
    left = 0 
    right = len(s)-1 
      
    while(left < right ): 
    ___
            return False
        left += 1
        right -= 1
    return True
  
print (isPalindrome(""racecar""))"
Create a function to parse a JSON string and return a Python dictionary.,"'{""name"": ""John"", ""age"": 32}'","import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": 32}')",Data Type,674,"import json

def parseJSON(json_string):
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": 32}')","import json

    ___
    return json.loads(json_string)

dictionary = parseJSON('{""name"": ""John"", ""age"": 32}')"
Write a Python program that takes a string as input and returns a new string with all vowels removed.,hello,"# Function to remove vowels
def removeVowels(str):
  vowels = ('a', 'e', 'i', 'o', 'u')
  for x in str.lower():
    if x in vowels:
      str = str.replace(x,"""")
  print(str)  

# Driver program
str = ""Hello""
removeVowels(str)

# Output:
Hll",Data Type,687,"# Function to remove vowels
def removeVowels(str):
  vowels = ('a', 'e', 'i', 'o', 'u')
  for x in str.lower():
    if x in vowels:
      str = str.replace(x,"""")
  print(str)  

# Driver program
str = ""Hello""
removeVowels(str)

# Output:
Hll","# Function to remove vowels
    ___
  vowels = ('a', 'e', 'i', 'o', 'u')
    ___
    ___
      str = str.replace(x,"""")
  print(str)  

# Driver program
str = ""Hello""
removeVowels(str)

# Output:
Hll"
Edit this Python code to make the while loop break when the user inputs an empty string.,"user_input = input(""Please enter a word:"")
while user_input:
    print(user_input)
    user_input = input(""Please enter a word:"")","user_input = input(""Please enter a word:"")
while user_input != """":
    print(user_input)
    user_input = input(""Please enter a word:"")",Data Type,702,"user_input = input(""Please enter a word:"")
while user_input != """":
    print(user_input)
    user_input = input(""Please enter a word:"")","user_input = input(""Please enter a word:"")
    ___
    print(user_input)
    user_input = input(""Please enter a word:"")"
Write a Python program to group a list of string elements into a dictionary of word counts.,"['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']","words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}",Data Type,711,"words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}","words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']

word_counts = {word: words.count(word) for word in words}

print(word_counts)
# Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}"
Write a Python program to extract all the numbers from a specified string.,This is 3 string with 4 numbers,"def extract_numbers(s):
    numbers = []
    for char in s:
        if char.isdigit():
            numbers.append(int(char))
    return numbers

result = extract_numbers(""This is 3 string with 4 numbers"")
print(result)",Data Type,714,"def extract_numbers(s):
    numbers = []
    for char in s:
        if char.isdigit():
            numbers.append(int(char))
    return numbers

result = extract_numbers(""This is 3 string with 4 numbers"")
print(result)","    ___
    numbers = []
    ___
    ___
            numbers.append(int(char))
    return numbers

result = extract_numbers(""This is 3 string with 4 numbers"")
print(result)"
Create a Python program to convert a given string from lower to upper case.,String: “hello world”,"def convert_to_upper_case(string):
    '''This function will take a string as input and convert it to upper case'''
    return string.upper()

converted_string = convert_to_upper_case(""hello world"")
print(converted_string)",Data Type,722,"def convert_to_upper_case(string):
    '''This function will take a string as input and convert it to upper case'''
    return string.upper()

converted_string = convert_to_upper_case(""hello world"")
print(converted_string)","    ___
    '''This function will take a string as input and convert it to upper case'''
    return string.upper()

converted_string = convert_to_upper_case(""hello world"")
print(converted_string)"
Create a Python script to build a dictionary from string to string of the given samples.,"Samples:
apple->red
banana->yellow
cherry->red","def build_dictionary(samples):
 dictionary = {}
 for sample in samples:
  key, value = sample.split(""->"")
  dictionary[key] = value
 return dictionary
 
samples = [""apple->red"", ""banana->yellow"", ""cherry->red""]
dictionary = build_dictionary(samples)

print(dictionary)",Data Type,724,"def build_dictionary(samples):
 dictionary = {}
 for sample in samples:
  key, value = sample.split(""->"")
  dictionary[key] = value
 return dictionary
 
samples = [""apple->red"", ""banana->yellow"", ""cherry->red""]
dictionary = build_dictionary(samples)

print(dictionary)","    ___
 dictionary = {}
    ___
  key, value = sample.split(""->"")
  dictionary[key] = value
 return dictionary
 
samples = [""apple->red"", ""banana->yellow"", ""cherry->red""]
dictionary = build_dictionary(samples)

print(dictionary)"
Create a python function which takes a list of string and converts each string to its uppercase equivalent.,"['Hello', 'World']","def to_uppercase(items):
    return [item.upper() for item in items]

result = to_uppercase(['Hello', 'World']) 
print(result)",Data Type,725,"def to_uppercase(items):
    return [item.upper() for item in items]

result = to_uppercase(['Hello', 'World']) 
print(result)","    ___
    return [item.upper() for item in items]

result = to_uppercase(['Hello', 'World']) 
print(result)"
Compose a Python program that evaluates a given expression provided as a string and prints its result.,"""1+1""","def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")",Data Type,731,"def evaluate_expression(expression):
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")","    ___
    try:
        result = eval(expression)
        print(result)
    except:
        print(""Error: invalid expression"")

evaluate_expression(""1+1"")"
"Create a python function that takes in a string, and returns the string with the first letter of each word capitalized.","string = ""hello there people""","def capitalize_string(string):
    words = string.split(' ')
    capitalized_words = []
    for word in words:
        capitalized_words.append(word.capitalize())
    
    return ' '.join(capitalized_words)",Data Type,732,"def capitalize_string(string):
    words = string.split(' ')
    capitalized_words = []
    for word in words:
        capitalized_words.append(word.capitalize())
    
    return ' '.join(capitalized_words)","    ___
    words = string.split(' ')
    capitalized_words = []
    ___
        capitalized_words.append(word.capitalize())
    
    return ' '.join(capitalized_words)"
Write a Python program to convert all the lower case letters in a string to upper case.,"""hello World""","print(''.join([i.upper() for i in ""hello World""])) # HELLO WORLD",Data Type,736,"print(''.join([i.upper() for i in ""hello World""])) # HELLO WORLD","print(''.join([i.upper() for i in ""hello World""])) # HELLO WORLD"
Create a Python program to parse a string for any numbers and calculate the sum.,"string = ""My age is 25 and my friend's age is 30.""","import re

# Input string
string = ""My age is 25 and my friend's age is 30.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = 0
for number in numbers:
 sum += int(number)

# Print the sum
print(""The sum of the numbers is:"", sum)",Data Type,737,"import re

# Input string
string = ""My age is 25 and my friend's age is 30.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = 0
for number in numbers:
 sum += int(number)

# Print the sum
print(""The sum of the numbers is:"", sum)","import re

# Input string
string = ""My age is 25 and my friend's age is 30.""

# Find all the numbers in the string
numbers = re.findall(""\d+"", string)

# Calculate the sum
sum = 0
    ___
 sum += int(number)

# Print the sum
print(""The sum of the numbers is:"", sum)"
"In this Python code, identify the type of data structure being used and write down advantages and disadvantages of using this type of data structure.","my_list = [""Apple"", ""Banana"", ""Orange"", ""Mango""]","A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time.",Data Type,740,"A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time.","A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time."
Write a Python code to decode a JSON string.,"{
 ""name"": ""John"",
 ""age"": 30,
 ""is_married"": False
}","import json

json_string = '{""name"": ""John"", ""age"": 30, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)",Data Type,749,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)","import json

json_string = '{""name"": ""John"", ""age"": 30, ""is_married"": false}'

data = json.loads(json_string)
name = data['name']
age = data['age']
is_married = data['is_married']

print('Name: ', name)
print('Age: ', age)
print('Is Married: ', is_married)"
Can you generate a python program to reverse a given string?,Hello,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

string = ""Hello""
reversed_string = reverse_string(string)
print(reversed_string)  # olleH",Data Type,767,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

string = ""Hello""
reversed_string = reverse_string(string)
print(reversed_string)  # olleH","    ___
    reversed_string = """"
    ___
        reversed_string = char + reversed_string
    return reversed_string

string = ""Hello""
reversed_string = reverse_string(string)
print(reversed_string)  # olleH"
Write a Python program that replaces all the occurrences of the letter ‘a’ with ‘$’ in a given string.,text = 'show me the money',"def replace_letter(text):
    result = ''
    for letter in text:
        if letter == 'a':
            result += '$'
        else:
            result += letter
    return result

text = 'show me the money'

print(replace_letter(text))",Data Type,769,"def replace_letter(text):
    result = ''
    for letter in text:
        if letter == 'a':
            result += '$'
        else:
            result += letter
    return result

text = 'show me the money'

print(replace_letter(text))","    ___
    result = ''
    ___
    ___
            result += '$'
        else:
            result += letter
    return result

text = 'show me the money'

print(replace_letter(text))"
Write a Python program to extract the first 100 characters from a given string.,This is a test string,"def extract_first_100_chars(string):
    return string[:100]",Data Type,771,"def extract_first_100_chars(string):
    return string[:100]","    ___
    return string[:100]"
Create a function to reverse a string in Python.,Hello,"def reverse_string(string):
    result = """"
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string(""hello"")",Data Type,780,"def reverse_string(string):
    result = """"
    for i in range(len(string) - 1, -1, -1):
        result += string[i]
    return result

reverse_string(""hello"")","    ___
    result = """"
    ___
        result += string[i]
    return result

reverse_string(""hello"")"
Can you construct a Python program that takes a string of words and counts the occurrences of each word?,"""This is an example of a string of words""","words = ""This is an example of a string of words"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f""{key} : {value}"")",Data Type,782,"words = ""This is an example of a string of words"".split()

word_freq = {}
for word in words:
    if word not in word_freq:
        word_freq[word] = 1
    else:
        word_freq[word] += 1

for key, value in word_freq.items():
    print(f""{key} : {value}"")","words = ""This is an example of a string of words"".split()

word_freq = {}
    ___
    ___
        word_freq[word] = 1
    else:
        word_freq[word] += 1

    ___
    print(f""{key} : {value}"")"
Write a Python program to identify the longest line in a string.,"Sentence 1
Sentence 2
Sentence 3 (longest sentence)
Sentence 4","test_str = 'Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')",Data Type,786,"test_str = 'Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')","test_str = 'Sentence 1\nSentence 2\nSentence 3 (longest sentence)\nSentence 4'

# Get all lines in test_str into a list
str_lines = test_str.split('\n')

# Find the longest line in the list
longest_line = max(str_lines, key=len)

# Print the longest line
print(f'The longest line is: {longest_line}')"
How would you format a JSON string using Python?,"""{\""name\"":\""John Doe\"",\""age\"":30}""","import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":30}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": 30
}",Data Type,787,"import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":30}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": 30
}","import json

# Get json string
json_string = ""{\""name\"":\""John Doe\"",\""age\"":30}""

# Parse the json string
parsed_string = json.loads(json_string)

# Pretty print the parsed string
pretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)

# Show output
print(pretty_string)
# Output:
{
    ""name"": ""John Doe"",
    ""age"": 30
}"
Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.,"my_dict = {
   ""a"": 5,
   ""b"": 10,
   ""c"": 15
}","def compute_dict_sum(input_dict):
    result = 0
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))",Data Type,789,"def compute_dict_sum(input_dict):
    result = 0
    for val in input_dict.values():
        result += val
    return result

print(compute_dict_sum(my_dict))","    ___
    result = 0
    ___
        result += val
    return result

print(compute_dict_sum(my_dict))"
Construct a Python program to split a string at a given character occurrence index.,"Input String: Hello World
Index: 6","def split_string(string, index):
  return string[:index] + "","" + string[index+1:]

s = ""Hello World""
index = 6

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World",Data Type,794,"def split_string(string, index):
  return string[:index] + "","" + string[index+1:]

s = ""Hello World""
index = 6

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World","    ___
  return string[:index] + "","" + string[index+1:]

s = ""Hello World""
index = 6

new_string = split_string(s, index)
print(new_string)

Output:
Hello,World"
Create a Python function that takes an array of strings and finds the longest string.,"[""Hello"", ""world"", ""Hi"", ""there""]","def find_longest_string(arr):
    longest_string = """"
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

string_array = [""Hello"", ""world"", ""Hi"", ""there""]
print(find_longest_string(string_array))",Data Type,799,"def find_longest_string(arr):
    longest_string = """"
    for s in arr:
        if len(s) > len(longest_string):
            longest_string = s
    return longest_string

string_array = [""Hello"", ""world"", ""Hi"", ""there""]
print(find_longest_string(string_array))","    ___
    longest_string = """"
    ___
    ___
            longest_string = s
    return longest_string

string_array = [""Hello"", ""world"", ""Hi"", ""there""]
print(find_longest_string(string_array))"
Write a python script to remove all occurrences of a particular string from a given text.,"Text: “I like cats, cats and cats”, String: “cats”","text = ""I like cats, cats and cats""
string = ""cats""

# Replace all occurrences of the string with an empty string
modified_text = text.replace(string, """")
print(modified_text)
# Output: ""I like , and """,Data Type,802,"text = ""I like cats, cats and cats""
string = ""cats""

# Replace all occurrences of the string with an empty string
modified_text = text.replace(string, """")
print(modified_text)
# Output: ""I like , and ""","text = ""I like cats, cats and cats""
string = ""cats""

# Replace all occurrences of the string with an empty string
modified_text = text.replace(string, """")
print(modified_text)
# Output: ""I like , and """
Generate a script that parses a JSON string and prints out the corresponding Python dictionary.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)",Data Type,806,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
parsed_json = json.loads(json_string)

print(parsed_json)"
Create an application in Python that can encode a string into Base64.,The quick brown fox,"import base64

def encode_base64(string):
 encoded_string = base64.b64encode(string.encode('utf-8'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA==",Data Type,824,"import base64

def encode_base64(string):
 encoded_string = base64.b64encode(string.encode('utf-8'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA==","import base64

    ___
 encoded_string = base64.b64encode(string.encode('utf-8'))
 return encoded_string

string = ""The quick brown fox""
encoded_string = encode_base64(string)
print(encoded_string)
# Output: VGhlIHF1aWNrIGJyb3duIGZveA=="
Create an algorithm in Python that takes a string and returns a new string with all the consonants replaced with underscores.,"""Hello World""","def replace_consonants(string): 
    new_str = """" 
  
    VOWELS = (""a"", ""e"", ""i"", ""o"", ""u"") 
  
    for letter in string: 
        if letter.lower() in VOWELS: 
            new_str += letter 
        else: 
            new_str += ""_""
  
    return new_str
  
print(replace_consonants(""Hello World""))",Data Type,828,"def replace_consonants(string): 
    new_str = """" 
  
    VOWELS = (""a"", ""e"", ""i"", ""o"", ""u"") 
  
    for letter in string: 
        if letter.lower() in VOWELS: 
            new_str += letter 
        else: 
            new_str += ""_""
  
    return new_str
  
print(replace_consonants(""Hello World""))","    ___
    new_str = """" 
  
    VOWELS = (""a"", ""e"", ""i"", ""o"", ""u"") 
  
    ___
    ___
            new_str += letter 
        else: 
            new_str += ""_""
  
    return new_str
  
print(replace_consonants(""Hello World""))"
Write a Python program that takes a string input representing an arithmetic expression and calculates the result.,"""(20 * 8) + (2 * 4)""","def evaluate(expression):
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(20 * 8) + (2 * 4)""))

Output: 164.0",Data Type,834,"def evaluate(expression):
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(20 * 8) + (2 * 4)""))

Output: 164.0","    ___
    try:
        return eval(expression)
    except SyntaxError:
        print('Invalid expression.')

print(evaluate(""(20 * 8) + (2 * 4)""))

Output: 164.0"
Create a Python function to normalize a list of strings by converting each string to lowercase and stripping any leading and trailing whitespaces.,"['  this  ', 'Is A TEST', 'WoRd']","def normalize(words):
    """"""Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.""""""
    return [word.lower().strip() for word in words]",Data Type,837,"def normalize(words):
    """"""Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.""""""
    return [word.lower().strip() for word in words]","    ___
    """"""Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.""""""
    return [word.lower().strip() for word in words]"
Create a Python program to check if a given string can be formed from a given set of words.,"String: ""justdoit""
Set of words: [""just"", ""do"", ""it""]","def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])",Data Type,850,"def word_set(string, words):
    words_set = set(words)
    string_set = set(string)
    
    if string_set.issubset(words_set):
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])","    ___
    words_set = set(words)
    string_set = set(string)
    
    ___
        return True 
    else:
        return False

word_set(""justdoit"", [""just"", ""do"", ""it""])"
Write a query to select the first four characters of a given string.,String: python_program,"SELECT SUBSTRING(string, 1, 4) 
FROM table 
WHERE string = 'python_program'",Data Type,854,"SELECT SUBSTRING(string, 1, 4) 
FROM table 
WHERE string = 'python_program'","SELECT SUBSTRING(string, 1, 4) 
FROM table 
WHERE string = 'python_program'"
Create a program in Python that has the following purpose: To determine if a given string is a palindrome,"""radar""","def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,862,"def check_palindrome(inputStr): 
     
    revStr = reversed(inputStr)
  
    if list(inputStr) == list(revStr): 
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")","    ___
     
    revStr = reversed(inputStr)
  
    ___
        return True
    else: 
        return False
      
userInput = ""radar""

if(check_palindrome(userInput)): 
    print(""Yes"") 
else: 
    print(""No"")"
Generate python code to clean up a string.,This string includes non-letter characters. This includes %$#& etc.,"def clean_string(string):
    excluded_characters = ""*&#$@!""
    cleaned_string = ''
    for character in string:
        if character not in excluded_characters:
            cleaned_string += character
    return cleaned_string",Data Type,865,"def clean_string(string):
    excluded_characters = ""*&#$@!""
    cleaned_string = ''
    for character in string:
        if character not in excluded_characters:
            cleaned_string += character
    return cleaned_string","    ___
    excluded_characters = ""*&#$@!""
    cleaned_string = ''
    ___
    ___
            cleaned_string += character
    return cleaned_string"
Create a Python function to convert a list of strings into a dictionary of the form {string: count}.,"myList = [‘a’, ‘a’, ‘b’, ‘c’]","def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}",Data Type,870,"def list_to_dict(myList):
 dict = {}
 for val in myList:
  if val in dict:
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}","    ___
 dict = {}
    ___
    ___
   dict[val] += 1
  else:
   dict[val] = 1
 return dict

myList = ['a', 'a', 'b', 'c']
print(list_to_dict(myList))

# Output: 
# {'a': 2, 'b': 1, 'c': 1}"
Design a program in Python that takes in a string and finds the characters that appear only once.,"String = ""This is a test""","def findUniqueChars(str):
    result = """"
    for char in str:
        if str.count(char) == 1:
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)",Data Type,873,"def findUniqueChars(str):
    result = """"
    for char in str:
        if str.count(char) == 1:
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)","    ___
    result = """"
    ___
    ___
            result += char

    return result 

result = findUniqueChars(""This is a test"")
print(result)"
Write a Python program to delete all characters in a string that matches a given pattern.,"string = ""The qick brown fox jumps over the lazy dog.""
pattern = ""q[a-z]ck""","import re
def delete_pattern_characters(string, pattern):
 return re.sub(pattern, """", string)",Data Type,876,"import re
def delete_pattern_characters(string, pattern):
 return re.sub(pattern, """", string)","import re
    ___
 return re.sub(pattern, """", string)"
Create a function to normalize a given string using Python.,"""Hello, World!""","def normalize_string(s):
    return s.lower().strip()",Data Type,881,"def normalize_string(s):
    return s.lower().strip()","    ___
    return s.lower().strip()"
Write a Python code that accepts an input string and returns a list of its capitalized words.,"""python is powerful""","string = ""python is powerful""
list_words = string.split()
output = [i.capitalize() for i in list_words]",Data Type,883,"string = ""python is powerful""
list_words = string.split()
output = [i.capitalize() for i in list_words]","string = ""python is powerful""
list_words = string.split()
output = [i.capitalize() for i in list_words]"
Create a Python code snippet to convert a given JSON string into a Python dictionary.,"'{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)",Data Type,897,"import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)","import json

json_string = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
python_dict = json.loads(json_string)

print(python_dict)"
Create a Python program that counts the number of occurrences of a character in a string,"String = 'Hello World', Character = 'o'","def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",Data Type,901,"def count_char(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count","    ___
    count = 0
    ___
    ___
            count += 1
    return count"
Optimize a piece of Python code that enumerates all substrings of a string.,"string = ""Supercalifragilisticexpialidocious""","def enumerate_substrings(string):
    substrings = set()
    for i in range(len(string)):
        for j in range(i, len(string)):
            substrings.add(string[i:j+1])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)",Data Type,902,"def enumerate_substrings(string):
    substrings = set()
    for i in range(len(string)):
        for j in range(i, len(string)):
            substrings.add(string[i:j+1])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)","    ___
    substrings = set()
    ___
    ___
            substrings.add(string[i:j+1])
    return substrings

string = ""Supercalifragilisticexpialidocious""
substrings = enumerate_substrings(string)
print(substrings)"
Write a Python function make_float that converts a given string argument to a float.,"""25.42""","def make_float(string):
  return float(string)",Data Type,908,"def make_float(string):
  return float(string)","    ___
  return float(string)"
Generate the Python code that calculates the numbers of characters in a given string.,"""Hello, World!""","myString = ""Hello, World!""

charCount = 0
for char in myString:
    charCount += 1
    
print(""Number of characters:"", charCount)",Data Type,916,"myString = ""Hello, World!""

charCount = 0
for char in myString:
    charCount += 1
    
print(""Number of characters:"", charCount)","myString = ""Hello, World!""

charCount = 0
    ___
    charCount += 1
    
print(""Number of characters:"", charCount)"
Write a Python function to sort a dictionary of string keys by their length.,"d = {""three"": 3, ""four"": 4, ""five"": 5, ""one"": 1, ""two"": 2}","def sort_by_length(d):
    sorted_d = {}
    keys_list = list(d.keys())
    keys_list.sort(key=len)
 
    for key in keys_list:
        sorted_d[key] = d[key]
 
    return sorted_d",Data Type,920,"def sort_by_length(d):
    sorted_d = {}
    keys_list = list(d.keys())
    keys_list.sort(key=len)
 
    for key in keys_list:
        sorted_d[key] = d[key]
 
    return sorted_d","    ___
    sorted_d = {}
    keys_list = list(d.keys())
    keys_list.sort(key=len)
 
    ___
        sorted_d[key] = d[key]
 
    return sorted_d"
Write a regex to identify all the words starting with 't' and ending with 'e' in a given string.,"str1=""this is a python program""","import re

def identify_words(str1):
    regex = ""\w*t\w*e\b""
    words = re.findall(regex, str1)
    return words

print(identify_words(""this is a python program""))",Data Type,942,"import re

def identify_words(str1):
    regex = ""\w*t\w*e\b""
    words = re.findall(regex, str1)
    return words

print(identify_words(""this is a python program""))","import re

    ___
    regex = ""\w*t\w*e\b""
    words = re.findall(regex, str1)
    return words

print(identify_words(""this is a python program""))"
Generate a Python program to search for a specific string in a list.,"lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""","def search_string(lst, str):
    for item in lst:
        if item == str:
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))",Data Type,944,"def search_string(lst, str):
    for item in lst:
        if item == str:
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))","    ___
    ___
    ___
            return True
    return False

lst = [""hello"", ""world"", ""this"", ""is"", ""a"", ""test""]
str = ""test""
print(search_string(lst, str))"
"Given a string, write a Python program to check if the characters in the string form a palindrome.","string = ""racecar""","def is_palindrome(string):
 return string == string[::-1]
 
result = is_palindrome(string)
print(result) # True",Data Type,949,"def is_palindrome(string):
 return string == string[::-1]
 
result = is_palindrome(string)
print(result) # True","    ___
 return string == string[::-1]
 
result = is_palindrome(string)
print(result) # True"
Design a program in Python that accepts a string as input and checks whether or not it is palindrome.,madam,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")",Data Type,957,"def isPalindrome(str): 
    for i in range(0, int(len(str)/2)):  
        if str[i] != str[len(str)-i-1]: 
            return False
    return True

inputStr = 'madam'

if (isPalindrome(inputStr)): 
    print(""Yes"")
else: 
    print(""No"")","    ___
    ___
    ___
            return False
    return True

inputStr = 'madam'

    ___
    print(""Yes"")
else: 
    print(""No"")"
Create a method in Python which takes a string as input and outputs all distinct words in the string.,"String: ""Hello, there! How are you?""","def getDistinctWords(string):
    wordlist = string.split()
    lst = []
    for word in wordlist: 
        if word not in lst:
            lst.append(word)
    return lst

print(getDistinctWords(""Hello, there! How are you?""))
# Output: ['Hello,', 'there!', 'How', 'are', 'you?']",Data Type,960,"def getDistinctWords(string):
    wordlist = string.split()
    lst = []
    for word in wordlist: 
        if word not in lst:
            lst.append(word)
    return lst

print(getDistinctWords(""Hello, there! How are you?""))
# Output: ['Hello,', 'there!', 'How', 'are', 'you?']","    ___
    wordlist = string.split()
    lst = []
    ___
    ___
            lst.append(word)
    return lst

print(getDistinctWords(""Hello, there! How are you?""))
# Output: ['Hello,', 'there!', 'How', 'are', 'you?']"
Create a Python program to search for a particular string in an array of strings and return the indices of the matches.,"[""hello"", ""world"", ""hello"", ""world""], ""world""","def find_string(arr, query):
 indices = []
 for i in range(len(arr)):
  if arr[i] == query:
    indices.append(i)
 return indices

print(find_string([""hello"", ""world"", ""hello"", ""world""], ""world""))",Data Type,973,"def find_string(arr, query):
 indices = []
 for i in range(len(arr)):
  if arr[i] == query:
    indices.append(i)
 return indices

print(find_string([""hello"", ""world"", ""hello"", ""world""], ""world""))","    ___
 indices = []
    ___
    ___
    indices.append(i)
 return indices

print(find_string([""hello"", ""world"", ""hello"", ""world""], ""world""))"
Implement a Python program to recursively reverse a string.,String: Python,"def reverse(string): 
	if len(string) == 0: 
		return string 
	else: 
		return reverse(string[1:]) + string[0] 

# Driver code 
string = ""Python""

print (reverse(string))",Data Type,975,"def reverse(string): 
	if len(string) == 0: 
		return string 
	else: 
		return reverse(string[1:]) + string[0] 

# Driver code 
string = ""Python""

print (reverse(string))","    ___
    ___
		return string 
	else: 
		return reverse(string[1:]) + string[0] 

# Driver code 
string = ""Python""

print (reverse(string))"
Create a python function that takes a string of characters as input and checks if it is a valid identifier.,"name = ""myVar""","import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False
    for char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)",Data Type,980,"import string

def isValidIdentifier(name):
    validChar = string.ascii_letters + ""_""
    if name[0] not in string.ascii_letters:
        return False
    for char in name[1:]:
        if char not in validChar:
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)","import string

    ___
    validChar = string.ascii_letters + ""_""
    ___
        return False
    ___
    ___
            return False
            
    return True

validResult = isValidIdentifier(name)
print(validResult)"
Design a Python program for converting a given string of characters into its corresponding ASCII code.,"String: ""Hello""","def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]",Data Type,985,"def getAscii(string):
    result = []
    for char in string:
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]","    ___
    result = []
    ___
        result.append(ord(char))
    return result

print(getAscii('Hello'))
# Output: [72, 101, 108, 108, 111]"
Design a function in Python that takes in a string and returns a list of words from the string in reverse order.,The quick brown fox.,"def reverseString(userString):
 wordList = userString.split("" "")
 reversedStringList = list(reversed(wordList))

 return reversedStringList

print(reverseString(""The quick brown fox.""))",Data Type,987,"def reverseString(userString):
 wordList = userString.split("" "")
 reversedStringList = list(reversed(wordList))

 return reversedStringList

print(reverseString(""The quick brown fox.""))","    ___
 wordList = userString.split("" "")
 reversedStringList = list(reversed(wordList))

 return reversedStringList

print(reverseString(""The quick brown fox.""))"
"Design a function in Python that takes a string, replaces all occurrences of the word ""dog"" with ""cat"" and returns the modified string.","""I love my dog""","def replace_word(string):
    modified_string = string.replace(""dog"", ""cat"")
    return modified_string

result = replace_word(""I love my dog"")
print(result)",Data Type,992,"def replace_word(string):
    modified_string = string.replace(""dog"", ""cat"")
    return modified_string

result = replace_word(""I love my dog"")
print(result)","    ___
    modified_string = string.replace(""dog"", ""cat"")
    return modified_string

result = replace_word(""I love my dog"")
print(result)"
Design a Python function that takes a string as a parameter and returns a string with extra spaces in between each character.,"my_string = ""Hello World""","def add_spaces(string):
 new_string = """"
 for char in string:
 new_string += char + "" ""
 return new_string

my_string = add_spaces(""Hello World"")
print(my_string)
# H e l l o   W o r l d",Data Type,997,"def add_spaces(string):
 new_string = """"
 for char in string:
 new_string += char + "" ""
 return new_string

my_string = add_spaces(""Hello World"")
print(my_string)
# H e l l o   W o r l d","    ___
 new_string = """"
    ___
 new_string += char + "" ""
 return new_string

my_string = add_spaces(""Hello World"")
print(my_string)
# H e l l o   W o r l d"
Write a Python function that takes a string and an integer as an argument and returns a string containing the string repeated the specified number of times.,"""Hello!"", 3","def repeat_string(string, num_times):
    return string*num_times

result = repeat_string(""Hello!"", 3)
print(result)",Data Type,1003,"def repeat_string(string, num_times):
    return string*num_times

result = repeat_string(""Hello!"", 3)
print(result)","    ___
    return string*num_times

result = repeat_string(""Hello!"", 3)
print(result)"
Write Python code to remove all the vowels from a given string.,string = 'Hello World!',"def remove_vowels(string):
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

if __name__ == '__main__':
    print(remove_vowels('Hello World!'))",Data Type,1006,"def remove_vowels(string):
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

if __name__ == '__main__':
    print(remove_vowels('Hello World!'))","    ___
    # Replace all the vowels with empty string
    without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') 
    return without_vowels

    ___
    print(remove_vowels('Hello World!'))"
Create a Python script that takes an input string and reverses its letters.,"""Hello Python!""","def reverse_string(string):
 result = []
 
 for i in string:
 result.insert(0,i)
 
 return ''.join(result)
 
if __name__ == ""__main__"":
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH",Data Type,1010,"def reverse_string(string):
 result = []
 
 for i in string:
 result.insert(0,i)
 
 return ''.join(result)
 
if __name__ == ""__main__"":
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH","    ___
 result = []
 
    ___
 result.insert(0,i)
 
 return ''.join(result)
 
    ___
string = ""Hello Python!""
print(reverse_string(string))  # Output: !nohtyP olleH"
Create a function in Python that takes two strings as input and returns their concatenated string.,"""Hello"", ""World""","def concat_strings(str1, str2):
  return str1 + str2

result = concat_strings(""Hello"", ""World"")
print(result)",Data Type,1016,"def concat_strings(str1, str2):
  return str1 + str2

result = concat_strings(""Hello"", ""World"")
print(result)","    ___
  return str1 + str2

result = concat_strings(""Hello"", ""World"")
print(result)"
Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd.,"str = ""Hello world!""","def remove_odd_ascii_chars(str):
    new_str = """"
    for ch in str:
        if ord(ch) % 2 == 0:
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)",Data Type,1019,"def remove_odd_ascii_chars(str):
    new_str = """"
    for ch in str:
        if ord(ch) % 2 == 0:
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)","    ___
    new_str = """"
    ___
    ___
            new_str += ch
    return new_str

str = ""Hello world!""
new_str = remove_odd_ascii_chars(str)
print(new_str)"
Develop a program in Python to check whether a string contains only digits.,"""0123""","def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))",Data Type,1026,"def is_digit_only(string):
    for char in string:
        if not char.isdigit():
            return False
    return True

print(is_digit_only(""0123""))","    ___
    ___
    ___
            return False
    return True

print(is_digit_only(""0123""))"
Construct an algorithm in Python to find the longest substring in a string which does not have any repeating characters.,string = 'abcaac',"def findLongestSubstring(string):
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))",Data Type,1044,"def findLongestSubstring(string):
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
 for char in string:
  if char not in curr:
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))","    ___
 
 # Initialize the result
 max_length = 0
 
 # Initialize substrings
 curr = ''
 
    ___
    ___
   curr += char
   max_length = max(max_length, len(curr))
  else:
   curr = char
 
 return max_length

string = 'abcaac'
print(findLongestSubstring(string))"
Suggest a completion for the following Python code so that it prints the characters in a string in reverse order.,"my_str = ""Hello World""

for i in","my_str = ""Hello World""

for i in range(len(my_str)-1, -1, -1):
    print(my_str[i], end="""")",Data Type,1049,"my_str = ""Hello World""

for i in range(len(my_str)-1, -1, -1):
    print(my_str[i], end="""")","my_str = ""Hello World""

    ___
    print(my_str[i], end="""")"
Write a piece of code in Python to reverse a given string.,abcdef,"string = 'abcdef'

print(string[::-1])",Data Type,1051,"string = 'abcdef'

print(string[::-1])","string = 'abcdef'

print(string[::-1])"
Write a Python program to replace all occurrences of a given string with an alternate string.,"""Hello World!"", ""World"", ""Python""","def replace_string(input_string, target_string, replacement_string):
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))",Data Type,1053,"def replace_string(input_string, target_string, replacement_string):
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))","    ___
    return input_string.replace(target_string, replacement_string)

print(replace_string(""Hello World!"", ""World"", ""Python""))"
Create a python script that will take in a JSON string as input and output a copied version of the same string,"{""name"": ""John Doe"", ""address"": ""123 Main Street""}","import json

jsonString = '{""name"": ""John Doe"", ""address"": ""123 Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)",Data Type,1059,"import json

jsonString = '{""name"": ""John Doe"", ""address"": ""123 Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)","import json

jsonString = '{""name"": ""John Doe"", ""address"": ""123 Main Street""}'
jsonObject = json.loads(jsonString)
copiedString = json.dumps(jsonObject)

print(copiedString)"
Create a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation.,Welcome to the GPT Normalization Task!,"import re

def normalize_text(text):
 text = text.lower()
 text = re.sub(r'\W+', ' ', text)
 return text

input_text= 'Welcome to the GPT Normalization Task!'
output_text = normalize_text(input_text)
print(output_text)

# Output: welcome to the gpt normalization task",Data Type,1062,"import re

def normalize_text(text):
 text = text.lower()
 text = re.sub(r'\W+', ' ', text)
 return text

input_text= 'Welcome to the GPT Normalization Task!'
output_text = normalize_text(input_text)
print(output_text)

# Output: welcome to the gpt normalization task","import re

    ___
 text = text.lower()
 text = re.sub(r'\W+', ' ', text)
 return text

input_text= 'Welcome to the GPT Normalization Task!'
output_text = normalize_text(input_text)
print(output_text)

# Output: welcome to the gpt normalization task"
Create a Python script for generating a random string of a desired length.,length of 10,"import random

def generate_random_string(length):
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
  for _ in range(length):
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(10)
print(result)",Data Type,1063,"import random

def generate_random_string(length):
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
  for _ in range(length):
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(10)
print(result)","import random

    ___
  chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$%&*'
  output_str = ''
    ___
    output_str += random.choice(chars)
  return output_str

result = generate_random_string(10)
print(result)"
Write a Python program that finds all numbers in a given string and prints their sum?,"""15 apples, 4 bananas and 6 oranges""","import re

def find_numbers(s):
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""15 apples, 4 bananas and 6 oranges""

print(find_numbers(s)) # output: 25",Data Type,1091,"import re

def find_numbers(s):
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""15 apples, 4 bananas and 6 oranges""

print(find_numbers(s)) # output: 25","import re

    ___
    numbers = re.findall('\\d+', s)
    ints = list(map(int, numbers))
    return sum(ints)

s = ""15 apples, 4 bananas and 6 oranges""

print(find_numbers(s)) # output: 25"
Create a for loop in Python to reverse a given string.,Text,"text = ""Text""
rev_text = """" 
  
for i in range(len(text) - 1, -1, -1): 
    rev_text = rev_text + text[i] 
  
print(rev_text)",Data Type,1125,"text = ""Text""
rev_text = """" 
  
for i in range(len(text) - 1, -1, -1): 
    rev_text = rev_text + text[i] 
  
print(rev_text)","text = ""Text""
rev_text = """" 
  
    ___
    rev_text = rev_text + text[i] 
  
print(rev_text)"
Implement a Python program to find the length of a given string.,"string = ""Hello World""","def stringLength(string):
    return len(string)

result = stringLength(""Hello World"")
print(result)",Data Type,1144,"def stringLength(string):
    return len(string)

result = stringLength(""Hello World"")
print(result)","    ___
    return len(string)

result = stringLength(""Hello World"")
print(result)"
Write a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values.,"string = ""This is a string""","def char_freq(string):
 freq_dict = {}
 
 for char in string:
 if char in freq_dict:
 freq_dict[char] += 1
 else: 
 freq_dict[char] = 1
 
 return freq_dict",Data Type,1149,"def char_freq(string):
 freq_dict = {}
 
 for char in string:
 if char in freq_dict:
 freq_dict[char] += 1
 else: 
 freq_dict[char] = 1
 
 return freq_dict","    ___
 freq_dict = {}
 
    ___
    ___
 freq_dict[char] += 1
 else: 
 freq_dict[char] = 1
 
 return freq_dict"
Develop an algorithm to check if a string S is a palindrome in Python.,"String S = ""racecar""","def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False
    return True",Data Type,1158,"def is_palindrome(s):
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    for i in range(len(s) // 2):
        if s[i] != s[len(s) - i - 1]:
            return False
    return True","    ___
    # Convert strings to lowercase
    s = s.lower()
 
    # Iterate through middle of string with indices 
    ___
    ___
            return False
    return True"
Develop a Python program that takes a text string as input and displays only those words which contain the letter ‘a’.,"""This is an example of a string to test.""","input_text = 'This is an example of a string to test.'

words = input_text.split()

for word in words:
  if 'a' in word:
    print(word)

# Output: 
an
example
a
string
test.",Data Type,1174,"input_text = 'This is an example of a string to test.'

words = input_text.split()

for word in words:
  if 'a' in word:
    print(word)

# Output: 
an
example
a
string
test.","input_text = 'This is an example of a string to test.'

words = input_text.split()

    ___
    ___
    print(word)

# Output: 
an
example
a
string
test."
Construct a Python program to find all substrings of a given string,String : Python,"def get_all_substrings(input_string): 
	length = len(input_string) 
	return [input_string[i:j+1] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)",Data Type,1175,"def get_all_substrings(input_string): 
	length = len(input_string) 
	return [input_string[i:j+1] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)","    ___
	length = len(input_string) 
	return [input_string[i:j+1] for i in range(length)  
							for j in range(i,length)] 

output = get_all_substrings('Python') 
print(output)"
generate valid python statements to check if the string contains a particular character,Check if a string contains 'a',"""""""
Check if a string contains 'a'
""""""

if 'a' in my_string:
    #string contains 'a'
else:
    #string does not contain 'a'",Data Type,1185,"""""""
Check if a string contains 'a'
""""""

if 'a' in my_string:
    #string contains 'a'
else:
    #string does not contain 'a'","""""""
Check if a string contains 'a'
""""""

    ___
    #string contains 'a'
else:
    #string does not contain 'a'"
Design a python program which takes a word string as an argument and returns the number of vowels in the string.,"""Hello""","def count_vowels(string):
    count = 0
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += 1
    return count",Data Type,1189,"def count_vowels(string):
    count = 0
    for ch in string:
        if ch in 'aeiouAEIOU':
            count += 1
    return count","    ___
    count = 0
    ___
    ___
            count += 1
    return count"
Rewrite the given Python script to remove all punctuation from a given string.,This is a sample string with punctuation marks .,"def remove_punctuation(string): 
 new_string = """" 
 for char in string: 
 if char not in "",.?!;:"": 
 new_string += char 
 return new_string",Data Type,1193,"def remove_punctuation(string): 
 new_string = """" 
 for char in string: 
 if char not in "",.?!;:"": 
 new_string += char 
 return new_string","    ___
 new_string = """" 
    ___
    ___
 new_string += char 
 return new_string"
Write a function in Python that constructs a URL based on user input. The function should take a string and an integer as arguments and should construct a URL with the string as the base followed by sequential numbers starting from the number provided in the integer argument.,"base = ""https://www.example.com/""
start_num = 10","def construct_url(base, start_num):
 num = start_num
 while True:
 url = base + str(num)
 yield url
 num += 1",Data Type,1204,"def construct_url(base, start_num):
 num = start_num
 while True:
 url = base + str(num)
 yield url
 num += 1","    ___
 num = start_num
    ___
 url = base + str(num)
 yield url
 num += 1"
Write a function in Python that merges two string and removes the duplicates.,"string_1 = 'one'
string_2 = 'two'","def merge_strings(string_1, string_2):
    s = set(string_1 + string_2)
    merged_string = ''.join(s)
    return merged_string

merged_string = merge_strings(string_1, string_2)
print(merged_string)

'''
Output:
onetwo
'''",Data Type,1212,"def merge_strings(string_1, string_2):
    s = set(string_1 + string_2)
    merged_string = ''.join(s)
    return merged_string

merged_string = merge_strings(string_1, string_2)
print(merged_string)

'''
Output:
onetwo
'''","    ___
    s = set(string_1 + string_2)
    merged_string = ''.join(s)
    return merged_string

merged_string = merge_strings(string_1, string_2)
print(merged_string)

'''
Output:
onetwo
'''"
Write a Python script that receives a string from the command line and prints out the string in reverse order.,"""This is my string.""","import sys

input_string = sys.argv[1]
print(input_string[::-1])",Data Type,1235,"import sys

input_string = sys.argv[1]
print(input_string[::-1])","import sys

input_string = sys.argv[1]
print(input_string[::-1])"
Write a function in Python to search a string for a specific pattern.,"Search for ""abc"" in ""abcxyzabc","def search_for_pattern(s, pattern):
    if pattern in s:
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)",Data Type,1237,"def search_for_pattern(s, pattern):
    if pattern in s:
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)","    ___
    ___
        return True
    else:
        return False

result = search_for_pattern(""abcxyzabc"", ""abc"")
print(result)"
Create a program in Python that takes a given string and returns a dictionary whose keys are the words in the string and values are the number of occurances of each word.,"String = ""Hello world, This is me""","def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count(""Hello world, This is me""))",Data Type,1249,"def word_count(string):
 count = {}
 string = string.split()

 for word in string:
 if word in count:
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count(""Hello world, This is me""))","    ___
 count = {}
 string = string.split()

    ___
    ___
 count[word] += 1
 else:
 count[word] = 1

 return count

print(word_count(""Hello world, This is me""))"
Generate a program to extract the substring from a given string,"string = 'Python is fun'
start = 7
end = 11","def extract_substring(string, start, end):
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = 7
end = 11

print(extract_substring(string, start, end))",Data Type,1251,"def extract_substring(string, start, end):
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = 7
end = 11

print(extract_substring(string, start, end))","    ___
    substr = string[start : end]
    return substr

string = 'Python is fun'
start = 7
end = 11

print(extract_substring(string, start, end))"
Create a Python method that takes in an array of strings and returns a string that includes all the strings in the array combined into a single string.,"[""This"", ""is"", ""a"", ""sentence""]","def combine_strings(strings): 
    return ' '.join(strings)",Data Type,1255,"def combine_strings(strings): 
    return ' '.join(strings)","    ___
    return ' '.join(strings)"
Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string.,‘Hello World’,"def countUppercase(myStr):
    uppercaseCount = 0
    for l in myStr:
        if l.isupper():
            uppercaseCount+=1
    return uppercaseCount

print(countUppercase('Hello World'))",Data Type,1265,"def countUppercase(myStr):
    uppercaseCount = 0
    for l in myStr:
        if l.isupper():
            uppercaseCount+=1
    return uppercaseCount

print(countUppercase('Hello World'))","    ___
    uppercaseCount = 0
    ___
    ___
            uppercaseCount+=1
    return uppercaseCount

print(countUppercase('Hello World'))"
Reverse an input string using Python.,Hello World!,"def rev_string(s): 
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))",Data Type,1267,"def rev_string(s): 
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))","    ___
   return s[::-1] 
  
s = ""Hello World!""
print(rev_string(s))"
Write a Python program to split a string on the first occurrence of a given substring.,"string = ""www.example.com""
substring = "".""","string_list = string.split(substring,1)
print(string_list)",Data Type,1279,"string_list = string.split(substring,1)
print(string_list)","string_list = string.split(substring,1)
print(string_list)"
Edit the following Python function to return a sorted list of the words in the given string.,"def get_words(text):
    words = text.split()
    return words","def get_words(text):
    words = text.split()
    return sorted(words)",Data Type,1288,"def get_words(text):
    words = text.split()
    return sorted(words)","    ___
    words = text.split()
    return sorted(words)"
Write a Python code snippet to count the number of occurrences of a given letter in a string.,"string = ""Mississippi"",
letter = ""s""","letter = 's'
string = ""Mississippi""
count = 0
for char in string:
   if char == letter:
       count += 1
print(count)",Data Type,1289,"letter = 's'
string = ""Mississippi""
count = 0
for char in string:
   if char == letter:
       count += 1
print(count)","letter = 's'
string = ""Mississippi""
count = 0
    ___
    ___
       count += 1
print(count)"
"Write a function in Python that will take a string as input, reverse the order of the words, and return the new string.","string = ""Hello World""","def reverseString(string):
  words = string.split(' ')
  reversedString = []
  for i in range(len(words)-1, -1, -1):
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello",Data Type,1315,"def reverseString(string):
  words = string.split(' ')
  reversedString = []
  for i in range(len(words)-1, -1, -1):
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello","    ___
  words = string.split(' ')
  reversedString = []
    ___
    reversedString.append(words[i])
  return ' '.join(reversedString)
  
print(reverseString(""Hello World"")) # Output: World Hello"
Create a Python function to delete the last character of a given string.,"""Hello World!""","def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)",Data Type,1321,"def delete_last_char(string):
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

if __name__ == '__main__':
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)","    ___
    """"""Delete the last character of a given string.

    Args:
        string (str): The string to remove the last character from. 

    Returns:
        str: The string with the last character removed.
    """"""
    return string[:-1]

    ___
    string = ""Hello World!""
    result = delete_last_char(string)
    print(result)"
Filter a string in Python by removing all alphabets and keeping only the numbers.,"my_string = ""hey3this5is4my2string1""","def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))",Data Type,1326,"def filter_string(str):
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))","    ___
    str = ''.join(x for x in str if x.isdigit())
    return str  

my_string = ""hey3this5is4my2string1""
print(filter_string(my_string))"
Create a program in Python that takes an input string and removes all duplicate characters.,"let str = ""abracadabra""","def removeDuplicates(str): 
 s = """"
for i in range(len(str)): 
 if str[i] not in s: 
  s += str[i] 
 return s

str = ""abracadabra""
print(""The output string is:"", removeDuplicates(str))",Data Type,1328,"def removeDuplicates(str): 
 s = """"
for i in range(len(str)): 
 if str[i] not in s: 
  s += str[i] 
 return s

str = ""abracadabra""
print(""The output string is:"", removeDuplicates(str))","    ___
 s = """"
    ___
    ___
  s += str[i] 
 return s

str = ""abracadabra""
print(""The output string is:"", removeDuplicates(str))"
Create a Python script that takes two string variables as inputs and prints out the shorter of the two.,"a = ""Hello world""
b = ""Goodbye world""","if len(a) < len(b):
    print(a)
else:
    print(b)",Data Type,1329,"if len(a) < len(b):
    print(a)
else:
    print(b)","    ___
    print(a)
else:
    print(b)"
Create a Python function that takes a string as an input and returns the substring between the first and the last character.,thequickbrownfox,"def get_substring(string):
  return string[1:-1]",Data Type,1333,"def get_substring(string):
  return string[1:-1]","    ___
  return string[1:-1]"
Create a python program to capitalize words in a string.,"String: ""enter the dragon""","def capitalize_words(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

print(capitalize_words('enter the dragon'))",Data Type,1339,"def capitalize_words(string):
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

print(capitalize_words('enter the dragon'))","    ___
    words = string.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return ' '.join(capitalized_words)

print(capitalize_words('enter the dragon'))"
Use a regular expression to find all emails in a given string in Python.,"myString = ""my name is Joe and my email is joe@example.com""","import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]",Data Type,1362,"import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]","import re 

pattern = ""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+""

result = re.findall(pattern, myString)

print(result) # Output will be [""joe@example.com""]"
Write two Python functions. The first function should take in a list of strings and return the most common string. The second function should take in a list of integers and return the most common integer.,"words = ['cat', 'dog', 'fish', 'cat', 'mouse', 'dog']
numbers = [1, 2, 3, 4, 5, 6, 7, 3, 3, 4]","def most_common_string(word_list):
    return max(set(word_list), key=word_list.count)

def most_common_integer(int_list):
    return max(set(int_list), key=int_list.count)",Data Type,1368,"def most_common_string(word_list):
    return max(set(word_list), key=word_list.count)

def most_common_integer(int_list):
    return max(set(int_list), key=int_list.count)","    ___
    return max(set(word_list), key=word_list.count)

    ___
    return max(set(int_list), key=int_list.count)"
Write a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order.,"String1 = ""Hello"" 
String2 = ""World""","def combine_strings(s1, s2):
 if s1 < s2:
 print(s1+s2)
 else:
 print(s2+s1)

combine_strings(""Hello"", ""World"")
# Output: HelloWorld",Data Type,1375,"def combine_strings(s1, s2):
 if s1 < s2:
 print(s1+s2)
 else:
 print(s2+s1)

combine_strings(""Hello"", ""World"")
# Output: HelloWorld","    ___
    ___
 print(s1+s2)
 else:
 print(s2+s1)

combine_strings(""Hello"", ""World"")
# Output: HelloWorld"
Create a Python program to parse and modify the following input string.,"""ABC 123 XYZ 456""","input_string = ""ABC 123 XYZ 456""
output_string = """"

for char in input_string:
    if char.isalpha():
        output_string += char.lower()
    else:
        output_string += char

print(output_string)",Data Type,1389,"input_string = ""ABC 123 XYZ 456""
output_string = """"

for char in input_string:
    if char.isalpha():
        output_string += char.lower()
    else:
        output_string += char

print(output_string)","input_string = ""ABC 123 XYZ 456""
output_string = """"

    ___
    ___
        output_string += char.lower()
    else:
        output_string += char

print(output_string)"
Can you provide a piece of code in Python to split a string on a certain delimiter?,"string = ""Hello,how,are,you""","my_list = string.split("","")",Data Type,1399,"my_list = string.split("","")","my_list = string.split("","")"
Develop an algorithm in Python to find the number of words in a given text string.,"""Hello world, this is a test.""","def get_word_count(text):
    words = text.split()
    return len(words)

word_count = get_word_count(""Hello world, this is a test."")
print(word_count)",Data Type,1403,"def get_word_count(text):
    words = text.split()
    return len(words)

word_count = get_word_count(""Hello world, this is a test."")
print(word_count)","    ___
    words = text.split()
    return len(words)

word_count = get_word_count(""Hello world, this is a test."")
print(word_count)"
Compute the length of a string in Python,"str = ""Hello, World!""","str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: 13",Data Type,1407,"str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: 13","str = ""Hello, World!""
length = len(str)
print('Length of string is:',length) # Length of string is: 13"
Write a Python program to split a string into a list of substrings.,"String: hello world
Delimiter: "" ""","words = str.split("" "")",Data Type,1416,"words = str.split("" "")","words = str.split("" "")"
Design an algorithm to find out the top 5 characters with the highest occurrence from a string in Python.,This is a test sentence to use for the example.,"from collections import Counter

def top_characters(string):
    counter = Counter(string).most_common(5)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]",Data Type,1420,"from collections import Counter

def top_characters(string):
    counter = Counter(string).most_common(5)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]","from collections import Counter

    ___
    counter = Counter(string).most_common(5)
    return counter
    
string = ""This is a test sentence to use for the example.""
print(top_characters(string))
# Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]"
Write a Python program to read a given string and sort it alphabetically.,"""Hello, World!""","def sort_alphabetically(input_string):
    chars = list(input_string)
    chars.sort()
    print("""".join(chars))

sort_alphabetically(""Hello, World!"")",Data Type,1423,"def sort_alphabetically(input_string):
    chars = list(input_string)
    chars.sort()
    print("""".join(chars))

sort_alphabetically(""Hello, World!"")","    ___
    chars = list(input_string)
    chars.sort()
    print("""".join(chars))

sort_alphabetically(""Hello, World!"")"
Transform the JSON string below into a Python dictionary.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
my_dict = json.loads(data)",Data Type,1424,"import json
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
my_dict = json.loads(data)","import json
data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'
my_dict = json.loads(data)"
Design a Python code solution to reverse a string with a given input.,"string = ""Hello world!""","def reverse_string(string):
    return string[::-1]

string = ""Hello world!""
print(reverse_string(string))",Data Type,1438,"def reverse_string(string):
    return string[::-1]

string = ""Hello world!""
print(reverse_string(string))","    ___
    return string[::-1]

string = ""Hello world!""
print(reverse_string(string))"
Convert the following JSON string into a Python dictionary.,"{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}","import json

json_string = '{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}",Data Type,1439,"import json

json_string = '{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}","import json

json_string = '{""a"":1, ""b"": ""Hello"", ""c"": {""d"": [34, 56]}}'
parsed_json = json.loads(json_string)

print(parsed_json)  # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}"
Develop a program in Python that reverses a given string.,"""Hello World!""","def reverse_string(string):
    reversed_string = string[::-1] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)",Data Type,1441,"def reverse_string(string):
    reversed_string = string[::-1] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)","    ___
    reversed_string = string[::-1] 
    return reversed_string

reversed_string = reverse_string(""Hello World!"")
print(reversed_string)"
Convert the given string from Upper Camel Case notation to lower snake case notation in Python.,UpperCamelCase,"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",Data Type,1449,"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]",    ___
Write a Python class that has a method that encrypts a given string using Caesar’s Cypher.,"Key = 3
String = “Hello World”","class Encrypter:
    def ceaserCypherEncryptor(self, key, string):
        encStr = """"
        for ch in string:
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(3, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog",Data Type,1454,"class Encrypter:
    def ceaserCypherEncryptor(self, key, string):
        encStr = """"
        for ch in string:
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(3, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog","class Encrypter:
    ___
        encStr = """"
    ___
            encStr += chr(ord(ch)+key)
        return encStr
        
e = Encrypter()
encStr = e.ceaserCypherEncryptor(3, ""Hello World"") 
print(encStr) 
# Output 
Khoor#Zruog"
Design a function in Python that reverses a string.,"string = ""Hello World""","def reverse_string(str): 
    return str[::-1]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)",Data Type,1466,"def reverse_string(str): 
    return str[::-1]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)","    ___
    return str[::-1]  
  
reverse = reverse_string(string) 
print(""The reversed string is : "",reverse)"
Optimize a Python program to reverse a string with a lower time complexity.,"string = ""Hello World!""","def reverse_string(string): 
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)",Data Type,1476,"def reverse_string(string): 
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)","    ___
    return string[::-1] 
    
# Time Complexity: O(n)
# Space Complexity: O(1)"
Create a Python program to delete all characters at odd index in a given string.,"Hello, World!","def deleteAtOddIndex(s):
    output = """"
    for i in range(len(s)):
        # delete the character at an odd index
        if i % 2 != 0:
            pass
        else:
            output += s[i]
    return output",Data Type,1478,"def deleteAtOddIndex(s):
    output = """"
    for i in range(len(s)):
        # delete the character at an odd index
        if i % 2 != 0:
            pass
        else:
            output += s[i]
    return output","    ___
    output = """"
    ___
        # delete the character at an odd index
    ___
            pass
        else:
            output += s[i]
    return output"
Generate a Python program to find the number of words with distinct letters in a given string,string = 'hello world',"def count_distinct_letters(string):
   distinct_letters = set()
   for word in string.split(' '):
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # 6",Data Type,1482,"def count_distinct_letters(string):
   distinct_letters = set()
   for word in string.split(' '):
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # 6","    ___
   distinct_letters = set()
    ___
        distinct_letters.update(set(word))
   return len(distinct_letters)

# example
string = 'hello world'
print(count_distinct_letters(string)) # 6"
Design a Python program to convert all the characters of a string to upper case.,This is a sample sentence.,"def to_upper(s):
    return s.upper()

result = to_upper(""This is a sample sentence."")
print(result)",Data Type,1484,"def to_upper(s):
    return s.upper()

result = to_upper(""This is a sample sentence."")
print(result)","    ___
    return s.upper()

result = to_upper(""This is a sample sentence."")
print(result)"
"Given a list of strings, write a Python function to remove all the whitespaces from each string.","['Hello  World  ', 'Hi  there', 'Good  Morning']","def remove_whitespace(word_list):
    return [word.strip() for word in word_list]

stripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])
print(stripped_list)",Data Type,1507,"def remove_whitespace(word_list):
    return [word.strip() for word in word_list]

stripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])
print(stripped_list)","    ___
    return [word.strip() for word in word_list]

stripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])
print(stripped_list)"
Write a Python program to separate a specified string into characters and numbers.,"str = ""ab12cd3""","def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)",Data Type,1516,"def separate_charnum(str):
    chars = []
    nums = []
    for char in str:
        if char.isalpha():
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)","    ___
    chars = []
    nums = []
    ___
    ___
            chars.append(char)
        else:
            nums.append(int(char))
    return chars, nums

str = ""ab12cd3""

chars, nums = separate_charnum(str)
print(chars)
print(nums)"
Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.,"s1='abc' 
s2='cab'","def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False
  
    temp = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)",Data Type,1523,"def isRotation(s1, s2): 
    if (len(s1) != len(s2)): 
        return False
  
    temp = s1 + s1 
    if (s2 in temp): 
        return True
    return False

result = isRotation('abc', 'cab')
print(result)","    ___
    ___
        return False
  
    temp = s1 + s1 
    ___
        return True
    return False

result = isRotation('abc', 'cab')
print(result)"
Design a Python script to insert a given string at the beginning and end of a given array.,"[""hello"", ""world""], ""***""","def insertBeginningAndEnd(arr, str):
    result = []
    for element in arr:
        result.append(str + element + str)

    return result

result = insertBeginningAndEnd([""hello"", ""world""], ""***"")
print(result)",Data Type,1527,"def insertBeginningAndEnd(arr, str):
    result = []
    for element in arr:
        result.append(str + element + str)

    return result

result = insertBeginningAndEnd([""hello"", ""world""], ""***"")
print(result)","    ___
    result = []
    ___
        result.append(str + element + str)

    return result

result = insertBeginningAndEnd([""hello"", ""world""], ""***"")
print(result)"
Write a Python program to convert a given string to all uppercase.,"""hello World""","def to_uppercase(string):
    return string.upper()

print(to_uppercase(""hello World""))

# Outputs:
# HELLO WORLD",Data Type,1530,"def to_uppercase(string):
    return string.upper()

print(to_uppercase(""hello World""))

# Outputs:
# HELLO WORLD","    ___
    return string.upper()

print(to_uppercase(""hello World""))

# Outputs:
# HELLO WORLD"
Create a Python program to convert a binary string into its equivalent decimal value.,binary_num = '10101',"def binary_to_decimal(binary_num):
    decimal_num = 0
    n = 0

    for i in range(len(binary_num)-1, -1, -1):
        if binary_num[i] == '1':
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num",Data Type,1537,"def binary_to_decimal(binary_num):
    decimal_num = 0
    n = 0

    for i in range(len(binary_num)-1, -1, -1):
        if binary_num[i] == '1':
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num","    ___
    decimal_num = 0
    n = 0

    ___
    ___
            decimal_num += 2**n
        
        n += 1
    
    return decimal_num"
Implement a search algorithm to quickly identify a specific character in a given string using Python.,"string = ""helloworld""
character = ""o""","def search(s, ch):
    for i, c in enumerate(s):
        if c == ch:
            return i
    return -1

string = ""helloworld""
character = ""o""

index = search(string, character)
if index == -1:
    print(""Character not found"")
else:
    print(""Index of the character is"", index)",Data Type,1539,"def search(s, ch):
    for i, c in enumerate(s):
        if c == ch:
            return i
    return -1

string = ""helloworld""
character = ""o""

index = search(string, character)
if index == -1:
    print(""Character not found"")
else:
    print(""Index of the character is"", index)","    ___
    ___
    ___
            return i
    return -1

string = ""helloworld""
character = ""o""

index = search(string, character)
    ___
    print(""Character not found"")
else:
    print(""Index of the character is"", index)"
Write a Python program to quickly search for a substring in a larger string.,"string = ""hello world"" substring = ""or""","def search_substring(string, substring):
    index = string.find(substring)
    return index 

result = search_substring(""hello world"", ""or"")
print(result)",Data Type,1547,"def search_substring(string, substring):
    index = string.find(substring)
    return index 

result = search_substring(""hello world"", ""or"")
print(result)","    ___
    index = string.find(substring)
    return index 

result = search_substring(""hello world"", ""or"")
print(result)"
Create a Python function that reverses every other word in a given string.,This is a test,"def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % 2 == 0):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))",Data Type,1551,"def reverseWords(sentence):
  words = sentence.split()
  reversed_sentence = []
  for i in range(len(words)):
    if (i % 2 == 0):
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))","    ___
  words = sentence.split()
  reversed_sentence = []
    ___
    ___
      reversed_sentence.append(words[i])
    else:
      reversed_sentence.append(words[i][::-1])
  return "" "".join(reversed_sentence)

print(reverseWords(""This is a test""))"
Create a function in Python that takes an array of strings and returns a new array of strings with all the vowels removed from each string.,"[""hello"", ""world"", ""how""]","def remove_vowels(strings):
 vowels = ['a', 'e', 'i', 'o', 'u']
 result = []
 for string in strings:
 result.append(''.join(c for c in string if c not in vowels))
 return result",Data Type,1555,"def remove_vowels(strings):
 vowels = ['a', 'e', 'i', 'o', 'u']
 result = []
 for string in strings:
 result.append(''.join(c for c in string if c not in vowels))
 return result","    ___
 vowels = ['a', 'e', 'i', 'o', 'u']
 result = []
    ___
 result.append(''.join(c for c in string if c not in vowels))
 return result"
Develop a function in Python that takes a string as input and finds a pattern in it and replaces it with a given set of characters.,"""abcabcabc"", ""abc"", ""xyz""","def replacePattern(string, pattern, replacement):
    return string.replace(pattern, replacement)

result = replacePattern(""abcabcabc"", ""abc"", ""xyz"")
print(result)",Data Type,1562,"def replacePattern(string, pattern, replacement):
    return string.replace(pattern, replacement)

result = replacePattern(""abcabcabc"", ""abc"", ""xyz"")
print(result)","    ___
    return string.replace(pattern, replacement)

result = replacePattern(""abcabcabc"", ""abc"", ""xyz"")
print(result)"
Create a Python function to format a string with the proper case and punctuation,"string=""hello, world""","def format_string(string):
    """"""Function to format a string with the proper case and punctuation""""""
    return string.lower().capitalize() + "".""",Data Type,1597,"def format_string(string):
    """"""Function to format a string with the proper case and punctuation""""""
    return string.lower().capitalize() + "".""","    ___
    """"""Function to format a string with the proper case and punctuation""""""
    return string.lower().capitalize() + ""."""
Create a Python program to read a string and return the character with the highest frequency.,Sample string,"import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))",Data Type,1605,"import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

for char, value in count.items():
    if value > highest_freq:
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))","import collections

str = ""Sample string""
count = collections.Counter(str)
highest_freq = 0
highest_freq_char = ''

    ___
    ___
        highest_freq = value
        highest_freq_char = char

print(""The character {} has the highest frequency of {} in this string"".format(highest_freq_char, highest_freq))"
Write a Python program to search a given string for any repeated characters.,"""AAAAB""","def find_repeat_characters(string):
 repeat_characters = set()
 for char in string:
 if string.count(char) > 1 and char not in repeat_characters:
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}",Data Type,1614,"def find_repeat_characters(string):
 repeat_characters = set()
 for char in string:
 if string.count(char) > 1 and char not in repeat_characters:
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}","    ___
 repeat_characters = set()
    ___
    ___
 repeat_characters.add(char)
 return repeat_characters

string = 'AAAAB'
print(find_repeat_characters(string)) # {'A'}"
Create a function in Python that takes a list of strings as parameter and outputs a new list with each string sorted in alphabetical order,"[‘apple’, ‘mango’, ‘orange’]","def sort_list(a_list):
 '''
 Sort the given list of strings in alphabetical order

 Args:
 a_list (list): List of strings

 Returns:
 list: Returns the sorted list in alphabetical order
 '''

 return sorted(a_list)",Data Type,1618,"def sort_list(a_list):
 '''
 Sort the given list of strings in alphabetical order

 Args:
 a_list (list): List of strings

 Returns:
 list: Returns the sorted list in alphabetical order
 '''

 return sorted(a_list)","    ___
 '''
 Sort the given list of strings in alphabetical order

 Args:
 a_list (list): List of strings

 Returns:
 list: Returns the sorted list in alphabetical order
 '''

 return sorted(a_list)"
Write a python program to convert a string to the list of words.,"""Hello, World!""","def string_to_list(string):
    return string.split()",Data Type,1622,"def string_to_list(string):
    return string.split()","    ___
    return string.split()"
Implement a function in Python that takes a list of string and sorts them alphabetically.,"[""apple"", ""banana"", ""mango"", ""pear""]","def sortStrings(wordsList):
    sorted_list = sorted(wordsList)
    return sorted_list
 
wordsList = [""apple"", ""banana"", ""mango"", ""pear""]
sorted_words = sortStrings(wordsList)
print(sorted_words)",Data Type,1623,"def sortStrings(wordsList):
    sorted_list = sorted(wordsList)
    return sorted_list
 
wordsList = [""apple"", ""banana"", ""mango"", ""pear""]
sorted_words = sortStrings(wordsList)
print(sorted_words)","    ___
    sorted_list = sorted(wordsList)
    return sorted_list
 
wordsList = [""apple"", ""banana"", ""mango"", ""pear""]
sorted_words = sortStrings(wordsList)
print(sorted_words)"
Format the given string with line breaks and indentations to make it a valid Python code.,for i in range(10) print(i),"for i in range(10):
  print(i)",Data Type,1625,"for i in range(10):
  print(i)","    ___
  print(i)"
Generate a Python program to search for a substring within a string.,"text = ""This is a sample string."" 
substring = ""sample""","def search_substring(text, substring):
    if substring in text:
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)",Data Type,1630,"def search_substring(text, substring):
    if substring in text:
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)","    ___
    ___
        return True
    else:
        return False

result = search_substring(text, substring)
print(result)"
Develop a Python function that takes two strings as input and returns the longer string.,"'cat', 'dog'","def longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2",Data Type,1635,"def longer_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2","    ___
    ___
        return string1
    else:
        return string2"
Optimize a program in Python for searching for a string in a list.,"value = 'apple'
list = ['bannanas', 'oranges', 'apple']","def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))",Data Type,1640,"def search(value, list):
    for i in range(len(list)):
        if list[i] == value:
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))","    ___
    ___
    ___
            return i
    return -1

value= 'apple'
list = ['bannanas', 'oranges', 'apple']
print(search(value, list))"
Write a Python program to format a specified string to limit the number of characters to 6.,"""Hello World""","def limit_string(s):
    if len(s) >= 6:
        return s[:6]
    else:
        return s

result = limit_string(""Hello World"")
print(result)",Data Type,1647,"def limit_string(s):
    if len(s) >= 6:
        return s[:6]
    else:
        return s

result = limit_string(""Hello World"")
print(result)","    ___
    ___
        return s[:6]
    else:
        return s

result = limit_string(""Hello World"")
print(result)"
Write a Python program to check if a provided string is valid JSON.,"""<noinput>""","def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid",Data Type,1657,"def is_valid_json(s):
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid","    ___
    valid = True
    try:
        json.loads(s)
    except ValueError:
        valid = False
    return valid"
"Given a string, write a Python program to remove all punctuation from the string.",The quick brown fox jumps over the lazy dog.,"import string

def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation(""The quick brown fox jumps over the lazy dog.""))
# output: The quick brown fox jumps over the lazy dog",Data Type,1660,"import string

def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation(""The quick brown fox jumps over the lazy dog.""))
# output: The quick brown fox jumps over the lazy dog","import string

    ___
    return text.translate(str.maketrans('', '', string.punctuation))

print(remove_punctuation(""The quick brown fox jumps over the lazy dog.""))
# output: The quick brown fox jumps over the lazy dog"
Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.,"'This is a test', ['test', 'this', 'is']","def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True",Data Type,1678,"def contains_words(input_string, words):
 for word in words:
 if word not in input_string:
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True","    ___
    ___
    ___
 return False
 return True

print(contains_words('This is a test', ['test', 'this', 'is'])) # True"
Create a Python script to format the following string with proper new lines and indentation.,"'{ ""name"":""John"", ""age"":30, ""city"":""New York""}'","formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'",Data Type,1688,"formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'","formatted = '{\n  ""name"":""John"",\n  ""age"":30,\n  ""city"":""New York""\n}'"
Create a Python program to convert a given list of strings to float values,"str_list = ['45', '87.5', '90.9', '24']","def convertStringToFloat(str_list):
    floats = []
    for s in str_list:
        floats.append(float(s))
    return floats

convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]",Data Type,1696,"def convertStringToFloat(str_list):
    floats = []
    for s in str_list:
        floats.append(float(s))
    return floats

convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]","    ___
    floats = []
    ___
        floats.append(float(s))
    return floats

convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]"
Write a Python program to format a specified string to limit the number of characters to 6.,"str = ""Python is a great programming language!""","new_str = ""Python"".ljust(6, ""..."")

print(new_str)  #Python...",Data Type,1699,"new_str = ""Python"".ljust(6, ""..."")

print(new_str)  #Python...","new_str = ""Python"".ljust(6, ""..."")

print(new_str)  #Python..."
Generate a correct Python program to compute the reverse of the given string,"string = ""hello""","def reverse_string(string):
    output = """"
    for i in range(len(string)):
        output += string[len(string)-1-i]
    return output",Data Type,1703,"def reverse_string(string):
    output = """"
    for i in range(len(string)):
        output += string[len(string)-1-i]
    return output","    ___
    output = """"
    ___
        output += string[len(string)-1-i]
    return output"
Create a Python program that takes in a string and returns a string with the characters in reversed order.,"String: ""Hello World""","def reverse(str):
    return str[::-1]",Data Type,1713,"def reverse(str):
    return str[::-1]","    ___
    return str[::-1]"
Generate a correct python program to format a given string s so that the output pattern is as follows,"Given String: ""Hello--world--someone""
The output pattern is: ""Hello world someone"".","def format_string(s):
    string_arr = s.split(""--"")
    return ' '.join(string_arr)",Data Type,1714,"def format_string(s):
    string_arr = s.split(""--"")
    return ' '.join(string_arr)","    ___
    string_arr = s.split(""--"")
    return ' '.join(string_arr)"
Optimize a given Python script that reverse a string.,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string","def reverse_string(string):
    return string[::-1]",Data Type,1755,"def reverse_string(string):
    return string[::-1]","    ___
    return string[::-1]"
"Using Python, design an algorithm that takes a string as an input and reverses it.","""Hello World!""","def reverseString(str): 
  s = """" 
  for i in str: 
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH",Data Type,1757,"def reverseString(str): 
  s = """" 
  for i in str: 
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH","    ___
  s = """" 
    ___
    s = i + s
  return s 

print(reverseString('Hello World!'))	# Output: !dlroW olleH"
Write a Python function to convert a list of integers into a comma separated string.,"int_list = [1, 4, 5, 6, 7]","def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7""",Data Type,1758,"def list_to_string(int_list):
    string = """"

    for i in int_list:
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7""","    ___
    string = """"

    ___
        string += str(i) + "",""

    # Remove trailing comma
    string = string[:-1]

    return string

int_list = [1, 4, 5, 6, 7] 
print(list_to_string(int_list)) // ""1,4,5,6,7"""
Create a Python program to check if a given string has duplicates characters.,"String: ""helloworld""","def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True
        set.add(ch)
    return False",Data Type,1761,"def hasDuplicates(s):
    set = set()
    for ch in s:
        if ch in set:
            return True
        set.add(ch)
    return False","    ___
    set = set()
    ___
    ___
            return True
        set.add(ch)
    return False"
Implement a function in Python that takes a string as input and returns a deep copy of the string with its letters reversed.,"""Hello World!""","def reverse_string(string):
 # Create empty string to store reversed characters
 reversed_string = """"

 # Loop through string to get individual characters 
 for char in string:
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string(""Hello World!""))  # Output -> ""!dlroW olleH""",Data Type,1762,"def reverse_string(string):
 # Create empty string to store reversed characters
 reversed_string = """"

 # Loop through string to get individual characters 
 for char in string:
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string(""Hello World!""))  # Output -> ""!dlroW olleH""","    ___
 # Create empty string to store reversed characters
 reversed_string = """"

 # Loop through string to get individual characters 
    ___
 reversed_string = char + reversed_string

 # Return reversed string
 return reversed_string

print(reverse_string(""Hello World!""))  # Output -> ""!dlroW olleH"""
Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string.,'Hello World!',"def reverse_string(input):
    return input[::-1]",Data Type,1765,"def reverse_string(input):
    return input[::-1]","    ___
    return input[::-1]"
Create a function in Python that takes two parameters: string and character. It should return the number of occurrences of the given character in the given string.,"string = 'This is a sample string.'
character = 's'","def count_char(string, character):
 count = 0
 for c in string:
 if c == character:
 count += 1
 return count

print(count_char('This is a sample string.', 's'))  # 3",Data Type,1768,"def count_char(string, character):
 count = 0
 for c in string:
 if c == character:
 count += 1
 return count

print(count_char('This is a sample string.', 's'))  # 3","    ___
 count = 0
    ___
    ___
 count += 1
 return count

print(count_char('This is a sample string.', 's'))  # 3"
"Create a function in Python that given a string, calculates the number of vowels in it.",Hello World!,"def count_vowels(s):
  vowels = 'aeiou'
  count = 0
  for c in s.lower():
    if c in vowels:
      count += 1
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output 3",Data Type,1772,"def count_vowels(s):
  vowels = 'aeiou'
  count = 0
  for c in s.lower():
    if c in vowels:
      count += 1
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output 3","    ___
  vowels = 'aeiou'
  count = 0
    ___
    ___
      count += 1
  return count

s = 'Hello World!'
print(count_vowels(s)) # Output 3"
Create a Python program to edit a string and remove the vowels from it.,Hello world,"def remove_vowels(string):
    vowels = ""aeiouAEIOU""
    result = """"
    for character in string: 
        if character not in vowels: 
            result += character
    return result
  
print (remove_vowels(""Hello world""))",Data Type,1774,"def remove_vowels(string):
    vowels = ""aeiouAEIOU""
    result = """"
    for character in string: 
        if character not in vowels: 
            result += character
    return result
  
print (remove_vowels(""Hello world""))","    ___
    vowels = ""aeiouAEIOU""
    result = """"
    ___
    ___
            result += character
    return result
  
print (remove_vowels(""Hello world""))"
Generate a Python program to search for a given word in a text string.,"text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""","def searchWord(text, word):
  return word in text

text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""

if searchWord(text, word):
  print(""The word is found in the text string."")
else:
  print(""The word is not found in the text string."")",Data Type,1775,"def searchWord(text, word):
  return word in text

text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""

if searchWord(text, word):
  print(""The word is found in the text string."")
else:
  print(""The word is not found in the text string."")","    ___
  return word in text

text = ""the quick brown fox jumps over the lazy dog""
word = ""fox""

    ___
  print(""The word is found in the text string."")
else:
  print(""The word is not found in the text string."")"
Create a Python script to return a list of the top five longest words in a given string.,"""I am a coding enthusiast""","def get_longest_words(sentence): 
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-5:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))",Data Type,1785,"def get_longest_words(sentence): 
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-5:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))","    ___
    words = sentence.split() 
   
    words.sort(key = lambda s: len(s)) 
  
    longest_words = words[-5:] 
    longest_words.reverse() 
  
    return longest_words 

sentence = ""I am a coding enthusiast""
print(get_longest_words(sentence))"
Write a Python program to convert a given string to an encrypted version of the string.,"""Hello, World!""","import hashlib

def encrypt_string(text):
    result = hashlib.sha256(text.encode()).hexdigest()
    return result

encrypted_string = encrypt_string(""Hello, World!"")
print(encrypted_string)",Data Type,1792,"import hashlib

def encrypt_string(text):
    result = hashlib.sha256(text.encode()).hexdigest()
    return result

encrypted_string = encrypt_string(""Hello, World!"")
print(encrypted_string)","import hashlib

    ___
    result = hashlib.sha256(text.encode()).hexdigest()
    return result

encrypted_string = encrypt_string(""Hello, World!"")
print(encrypted_string)"
Develop an algorithm in Python that reverses a given string.,"""hello world""","def reverseString(s): 
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))",Data Type,1808,"def reverseString(s): 
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))","    ___
    return s[::-1] 
  
string = ""hello world""

print(""Original String:"", string) 
print(""Reversed String:"", reverseString(string))"
"Generate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.).",3/22/2021,"import datetime

def get_weekday(date_string):
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('3/22/2021')
print(weekday)",Data Type,1809,"import datetime

def get_weekday(date_string):
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('3/22/2021')
print(weekday)","import datetime

    ___
    date = datetime.datetime.strptime(date_string, '%m/%d/%Y')
    return date.strftime('%A')

weekday = get_weekday('3/22/2021')
print(weekday)"
Create a Python program to round up a float to the nearest integer.,3.14,"def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)",Data Type,1816,"def round_up(f):
    if f - int(f) >= 0.5:
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)","    ___
    ___
        return int(f) + 1
    return int(f)

round_val = round_up(3.14)
print(round_val)"
Write a Python program to join all elements in a list into a string separated by a given separator.,"[""Hello"", ""World!""], separator = "" ""","def join_list_with_separator(list, separator):
    joined_string = separator.join(list)
    return joined_string",Data Type,1820,"def join_list_with_separator(list, separator):
    joined_string = separator.join(list)
    return joined_string","    ___
    joined_string = separator.join(list)
    return joined_string"
Develop a Python code to convert the given binary string to its corresponding integer value.,'100100',"def binary_to_int(binary):
    result = 0
    for i in range(len(binary)): 
        digit = binary[i] 
        if digit == '1':
            result = result + pow(2, len(binary)-i-1)  
    return result

binary_to_int('100100') # returns 36",Data Type,1831,"def binary_to_int(binary):
    result = 0
    for i in range(len(binary)): 
        digit = binary[i] 
        if digit == '1':
            result = result + pow(2, len(binary)-i-1)  
    return result

binary_to_int('100100') # returns 36","    ___
    result = 0
    ___
        digit = binary[i] 
    ___
            result = result + pow(2, len(binary)-i-1)  
    return result

binary_to_int('100100') # returns 36"
"Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)",No input,"import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()",Data Type,1855,"import random
import string

def generate_password():
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()","import random
import string

    ___
 password_characters = string.ascii_letters + string.digits + string.punctuation
 password = ''.join(random.choice(password_characters) for i in range(8))
 print(password)

generate_password()"
Write a Python program to replace a given string with another string.,"sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""","sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""

new_sentence = sentence.replace(old_word, new_word)

print(""The new sentence is: '{}'"".format(new_sentence))",Data Type,1857,"sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""

new_sentence = sentence.replace(old_word, new_word)

print(""The new sentence is: '{}'"".format(new_sentence))","sentence = ""I love walking on the beach""
old_word = ""walking""
new_word = ""swimming""

new_sentence = sentence.replace(old_word, new_word)

print(""The new sentence is: '{}'"".format(new_sentence))"
Create a function in Python that input two strings and outputs the longer string.,"""Hello"", ""World""","def get_longer_string(str1, str2):
 if len(str1) > len(str2):
 return str1
 else:
 return str2",Data Type,1859,"def get_longer_string(str1, str2):
 if len(str1) > len(str2):
 return str1
 else:
 return str2","    ___
    ___
 return str1
 else:
 return str2"
Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters,"def random_string(): 
    string = '' 
    for i in range(7): 
        string += chr(randint(97, 122)) 
        string += str(randint(0, 9)) 
    return string","import random

def random_string(): 
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '0123456789', 7)) 
    return string",Data Type,1873,"import random

def random_string(): 
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '0123456789', 7)) 
    return string","import random

    ___
    string = ''.join(random.sample(
        'abcdefghijklmnopqrstuvwxyz' 
        + '0123456789', 7)) 
    return string"
Write a function in Python that counts the number of words in the given string.,"Example String:
""This is a sample string with some words""","def word_count(str):
 words = str.split()
 return len(words)

print(word_count(""This is a sample string with some words""))",Data Type,1874,"def word_count(str):
 words = str.split()
 return len(words)

print(word_count(""This is a sample string with some words""))","    ___
 words = str.split()
 return len(words)

print(word_count(""This is a sample string with some words""))"
Write a Python function to remove the nth occurrence of a given substring from the given string.,"string = ""This is a chance to practice python string manipulation skills""
substring = ""is""
n = 2","def remove_nth_occurrence(string, substring, n):
 count = 0
 for i, ch in enumerate(string):
  if string[i:i+len(substring)] == substring:
   count += 1
   if count == n:
    string = string[:i] + string[i+len(substring):]
 return string",Data Type,1888,"def remove_nth_occurrence(string, substring, n):
 count = 0
 for i, ch in enumerate(string):
  if string[i:i+len(substring)] == substring:
   count += 1
   if count == n:
    string = string[:i] + string[i+len(substring):]
 return string","    ___
 count = 0
    ___
    ___
   count += 1
    ___
    string = string[:i] + string[i+len(substring):]
 return string"
Come up with a python program that takes a string and return a reversed version of the string.,"""<noinput>""","def reverse_string(string):
    return string[::-1]",Data Type,1910,"def reverse_string(string):
    return string[::-1]","    ___
    return string[::-1]"
Design a Python program to determine if one string is a substring of another.,"""Hello"", ""Hello World""","def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))",Data Type,1916,"def isSubstring(str1, str2):
    if len(str1) > len(str2):
        return False

    for i in range(len(str2)):
        if (str2[i: i+len(str1)] == str1):
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))","    ___
    ___
        return False

    ___
    ___
            return True

    return False

str1 = ""Hello""
str2 = ""Hello World""

print(isSubstring(str1, str2))"
Create a Python program for encrypting a given string using the XOR technique.,"String: ""Hello world!""","def xor_crypt_string(data, key='my_secret_key'):
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))

print(encrypted_data)",Data Type,1919,"def xor_crypt_string(data, key='my_secret_key'):
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))

print(encrypted_data)","    ___
    l = len(key)
    return bytearray((
        (data[i] ^ ord(key[i % l])) for i in range(0,len(data))
    ))

encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8'))

print(encrypted_data)"
Create a Python program to find and remove the longest string from a given list of strings.,"list_strings = [""string1"", ""string2"", ""string3"", ""longeststring""]","def remove_longest_string(list_strings):
    longest_string = """"
    for string in list_strings:
        if len(string) > len(longest_string):
            longest_string = string
    list_strings.remove(longest_string)
    return list_strings

print(remove_longest_string(list_strings))",Data Type,1921,"def remove_longest_string(list_strings):
    longest_string = """"
    for string in list_strings:
        if len(string) > len(longest_string):
            longest_string = string
    list_strings.remove(longest_string)
    return list_strings

print(remove_longest_string(list_strings))","    ___
    longest_string = """"
    ___
    ___
            longest_string = string
    list_strings.remove(longest_string)
    return list_strings

print(remove_longest_string(list_strings))"
Write a Python program to search a given string for the first occurrence of a given substring.,"string = ""The quick brown fox"", substring = ""fox""","string = ""The quick brown fox""
substring = ""fox""

def find_substring(string, substring):
    index = string.find(substring)
    if index == -1:
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)",Data Type,1933,"string = ""The quick brown fox""
substring = ""fox""

def find_substring(string, substring):
    index = string.find(substring)
    if index == -1:
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)","string = ""The quick brown fox""
substring = ""fox""

    ___
    index = string.find(substring)
    ___
        print(""Substring not found!"")
    else:
        print(""Substring found at index:"", index)

find_substring(string, substring)"
Create a Python script to count the frequencies of each letter in a given string.,"text = ""Hello, World!""","def count_letter_frequency(text): 
    frequency = {} 
    for letter in text: 
        if letter in frequency: 
            frequency[letter] += 1
        else: 
            frequency[letter] = 1
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))",Data Type,1937,"def count_letter_frequency(text): 
    frequency = {} 
    for letter in text: 
        if letter in frequency: 
            frequency[letter] += 1
        else: 
            frequency[letter] = 1
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))","    ___
    frequency = {} 
    ___
    ___
            frequency[letter] += 1
        else: 
            frequency[letter] = 1
    return frequency 
  
text = ""Hello, World!""
print(count_letter_frequency(text))"
Create a function using Python that parses a given string and returns a dictionary containing each word in the string as key and its frequency as value.,"string = ""This is a random sentence.""","def parseString(string):
    freqDict = dict()
    stringWords = string.split("" "") 
    for word in stringWords:
        if word in freqDict:
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict",Data Type,1938,"def parseString(string):
    freqDict = dict()
    stringWords = string.split("" "") 
    for word in stringWords:
        if word in freqDict:
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict","    ___
    freqDict = dict()
    stringWords = string.split("" "") 
    ___
    ___
            freqDict[word] += 1
        else:
            freqDict[word] = 1
    return freqDict"
"Construct a Python program to convert a list of strings to a single string, and separate the string elements with a ',' character.","list = [""test"", ""string""]","def list_to_string(list): 
    return "","".join(list) 
  
list = [""test"",""string""]
print(list_to_string(list))",Data Type,1941,"def list_to_string(list): 
    return "","".join(list) 
  
list = [""test"",""string""]
print(list_to_string(list))","    ___
    return "","".join(list) 
  
list = [""test"",""string""]
print(list_to_string(list))"
Write a Python program to find the string which is most frequent among the given list of strings.,"my_list = [""apple"", ""banana"", ""apple"", ""orange""]","def most_frequent(my_list):
    max_count = 0
    frequent_string = """"

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string",Data Type,1952,"def most_frequent(my_list):
    max_count = 0
    frequent_string = """"

    for i in my_list:
        if my_list.count(i) > max_count:
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string","    ___
    max_count = 0
    frequent_string = """"

    ___
    ___
            max_count = my_list.count(i)
            frequent_string = i

    return frequent_string"
modify the following Python program such that it returns an error if the input is an empty string.,"def print_string(text):
    print(text)","def print_string(text):
    if len(text) > 0:
        print(text)
    else:
        raise Exception('The input string is empty')",Data Type,1953,"def print_string(text):
    if len(text) > 0:
        print(text)
    else:
        raise Exception('The input string is empty')","    ___
    ___
        print(text)
    else:
        raise Exception('The input string is empty')"
Write a Python program to replace all the occurences of a substring in a string with a new substring.,"String: This is a string
Old substring: is
New substring: was","new_string = string.replace('is', 'was')",Data Type,1960,"new_string = string.replace('is', 'was')","new_string = string.replace('is', 'was')"
Write a Python program to convert a string in camel case format to snake case format,myNameIsRyan,my_name_is_ryan,Data Type,1961,my_name_is_ryan,my_name_is_ryan
Generate a program in Python to extract all numbers from a given string,"string = ""The 3 monkeys had 2 apples""","import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = ""The 3 monkeys had 2 apples""
print(extract_numbers(string))",Data Type,1965,"import re

def extract_numbers(string): 
    numbers = re.findall('\d+', string)
    return numbers

string = ""The 3 monkeys had 2 apples""
print(extract_numbers(string))","import re

    ___
    numbers = re.findall('\d+', string)
    return numbers

string = ""The 3 monkeys had 2 apples""
print(extract_numbers(string))"
Design an algorithm in Python that takes a string as input and returns a compressed version of the string.,aaabbccccca,"def stringCompress(s):
    result = """"
    counter = 1
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            counter+=1
        else:
            result += s[i] + str(counter)
            counter = 1
        
    result += s[i] + str(counter)
    return result

print(stringCompress('aaabbccccca'))",Data Type,1969,"def stringCompress(s):
    result = """"
    counter = 1
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            counter+=1
        else:
            result += s[i] + str(counter)
            counter = 1
        
    result += s[i] + str(counter)
    return result

print(stringCompress('aaabbccccca'))","    ___
    result = """"
    counter = 1
    ___
    ___
            counter+=1
        else:
            result += s[i] + str(counter)
            counter = 1
        
    result += s[i] + str(counter)
    return result

print(stringCompress('aaabbccccca'))"
Write a Python function to count the number of occurances of a given letter in a given string.,"s = ""Hello World""","def count_letter(s, letter): 
    count = 0
    for char in s:
        if char == letter:
            count += 1
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))",Data Type,1990,"def count_letter(s, letter): 
    count = 0
    for char in s:
        if char == letter:
            count += 1
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))","    ___
    count = 0
    ___
    ___
            count += 1
    return count

s = ""Hello World""
letter = ""l""
print(count_letter(s, letter))"
Create a program in Python which takes a given string and removes all the vowels from it.,"string = ""This is a test string""","def removeVowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_string = ''.join([x for x in string if x.lower() not in vowels])
    return new_string

print(removeVowels(string))",Data Type,1994,"def removeVowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_string = ''.join([x for x in string if x.lower() not in vowels])
    return new_string

print(removeVowels(string))","    ___
    vowels = ['a', 'e', 'i', 'o', 'u']
    new_string = ''.join([x for x in string if x.lower() not in vowels])
    return new_string

print(removeVowels(string))"
"Build a type checking function to determine what kind of data is being processed, given a generic string in Python.",str = '123',"def check_type(str):
    try:
        int(str)
        return 'Integer'
    except ValueError:
        pass
   
    try:
        float(str)
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('123')) # prints 'Integer'",Data Type,2016,"def check_type(str):
    try:
        int(str)
        return 'Integer'
    except ValueError:
        pass
   
    try:
        float(str)
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('123')) # prints 'Integer'","    ___
    try:
        int(str)
        return 'Integer'
    except ValueError:
        pass
   
    try:
        float(str)
        return 'Float'
    except ValueError:
        pass
   
    return 'String'

print(check_type('123')) # prints 'Integer'"
Write a Python function to generate a substitution cipher of a given string,"string = ""abcdefghijklmnopqrstuvwxyz""","def substitution_cipher(string):
    cipher = """"
    for i in string:
        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) 
    return cipher",Data Type,2027,"def substitution_cipher(string):
    cipher = """"
    for i in string:
        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) 
    return cipher","    ___
    cipher = """"
    ___
        cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) 
    return cipher"
Write a python program that prints out the number of times each letter appears in a given string.,"string = ""Hello, World!""","string = ""Hello, World!""
for char in string:
 count = string.count(char)
 print(char + "" appears "" + str(count) + "" times"")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times",Data Type,2041,"string = ""Hello, World!""
for char in string:
 count = string.count(char)
 print(char + "" appears "" + str(count) + "" times"")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times","string = ""Hello, World!""
    ___
 count = string.count(char)
 print(char + "" appears "" + str(count) + "" times"")

# Output
H appears 1 times
e appears 1 times
l appears 3 times
o appears 2 times
, appears 1 times
  appears 1 times
W appears 1 times
r appears 1 times
d appears 1 times
! appears 1 times"
Create a function in Python that will convert a string to all uppercase letters.,"input_string = ""This Is A String""","def uppercase_string(input_string):
    return input_string.upper()",Data Type,2046,"def uppercase_string(input_string):
    return input_string.upper()","    ___
    return input_string.upper()"
"Create a Python function that takes a string argument, removes all the special characters and returns the modified string.",This# 1$ i^s an% e*xa_mple -str_ing,"def remove_special_characters(s):
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# 1$ i^s an% e*xa_mple -str_ing"")",Data Type,2050,"def remove_special_characters(s):
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# 1$ i^s an% e*xa_mple -str_ing"")","    ___
    new_s = s.replace('#', '').replace('$', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') 
    return new_s

remove_special_characters(""This# 1$ i^s an% e*xa_mple -str_ing"")"
Write a Python program to evaluate a given string and return a Boolean value.,String = “The sky is blue”,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True
 else:
  return False",Data Type,2052,"def evaluate_string(string):
 if string == 'The sky is blue':
  return True
 else:
  return False","    ___
    ___
  return True
 else:
  return False"
"Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string.","string = ""hello hello world""
pattern = ""hello""","def countSubstring(string, sub_string):
  count = 0 
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=1
  return count
  
print(countSubstring(string, pattern))",Data Type,2083,"def countSubstring(string, sub_string):
  count = 0 
  for i in range(0, len(string)-len(sub_string)+1):
    if (string[i:i+len(sub_string)] == sub_string):
      count+=1
  return count
  
print(countSubstring(string, pattern))","    ___
  count = 0 
    ___
    ___
      count+=1
  return count
  
print(countSubstring(string, pattern))"
Write a Python function which extracts zip codes from a provided string.,"My address is 123 Main St, ZIP 12345","import re

def extract_zip_codes(string):
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is 123 Main St, ZIP 12345""))",Data Type,2095,"import re

def extract_zip_codes(string):
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is 123 Main St, ZIP 12345""))","import re

    ___
    zip_codes = re.findall(""(?<=ZIP )\d+"", string)
    return zip_codes

print(extract_zip_codes(""My address is 123 Main St, ZIP 12345""))"
Create a program in Python which takes a string and finds the number of each English vowels.,sentence = 'Hello World',"def count_vowels(sentence):
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}
    for char in sentence.lower():
        if char in vowels:
            vowels[char] += 1
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}",Data Type,2100,"def count_vowels(sentence):
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}
    for char in sentence.lower():
        if char in vowels:
            vowels[char] += 1
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}","    ___
    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}
    ___
    ___
            vowels[char] += 1
    return vowels

sentence = 'Hello World'  
print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}"
"Given a string, write a python program to count the number of words in the string.",This is a test string,"def count_words(string):
    words = string.split("" "")
    num_words = len(words)
    return num_words

result = count_words(""This is a test string"")
print(""Number of words:"", result)",Data Type,2102,"def count_words(string):
    words = string.split("" "")
    num_words = len(words)
    return num_words

result = count_words(""This is a test string"")
print(""Number of words:"", result)","    ___
    words = string.split("" "")
    num_words = len(words)
    return num_words

result = count_words(""This is a test string"")
print(""Number of words:"", result)"
Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string?,"""hello world""","def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = 1
        else:
            count[c] += 1
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}",Data Type,2108,"def letter_count(s):
    count = {}
    for c in s:
        if c not in count:
            count[c] = 1
        else:
            count[c] += 1
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}","    ___
    count = {}
    ___
    ___
            count[c] = 1
        else:
            count[c] += 1
    return count

s = ""hello world""
count = letter_count(s)
print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"
"Create a string formatting function in Python that takes a first name, last name, and age as parameters.","firstName - ""John""
lastName - ""Doe""
age - 35","def format_name(firstName, lastName, age):
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old.",Data Type,2122,"def format_name(firstName, lastName, age):
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old.","    ___
 return f'{lastName}, {firstName} is {age} years old.'

# Usage example
print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old."
Optimize the following Python code for counting the number of words in an input string.,"s = ""This is a sample string""","# Count number of words in a string

def count_words(s):
    # remove unnecessary characters
    s = s.replace(',', '').replace('.', '')
    # split string into list of words
    words = s.split(' ')
    # return the length of the list (number of words)
    return len(words)

s = ""This is a sample string""
words_count = count_words(s)
print(words_count)",Data Type,2132,"# Count number of words in a string

def count_words(s):
    # remove unnecessary characters
    s = s.replace(',', '').replace('.', '')
    # split string into list of words
    words = s.split(' ')
    # return the length of the list (number of words)
    return len(words)

s = ""This is a sample string""
words_count = count_words(s)
print(words_count)","# Count number of words in a string

    ___
    # remove unnecessary characters
    s = s.replace(',', '').replace('.', '')
    # split string into list of words
    words = s.split(' ')
    # return the length of the list (number of words)
    return len(words)

s = ""This is a sample string""
words_count = count_words(s)
print(words_count)"
How can we create a function to check if a given string is a palindrome in Python?,No input,"def is_palindrome(s): 
    s = s.lower() 
    return s == s[::-1]",Data Type,2145,"def is_palindrome(s): 
    s = s.lower() 
    return s == s[::-1]","    ___
    s = s.lower() 
    return s == s[::-1]"
"From a Python data type, generate a json string.","person = {
    ""name"": ""John Doe"",
    ""age"": 30,
    ""hobbies"":[""reading"", ""playing chess"", ""hiking""]
}","import json

json_str = json.dumps(person)",Data Type,2146,"import json

json_str = json.dumps(person)","import json

json_str = json.dumps(person)"
Can you write a Python script that prints out the number of 'a's found in a text string?,"string = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""","text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = 0 
for char in text:
    if char == 'a':
        count += 1

print(count)",Data Type,2147,"text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = 0 
for char in text:
    if char == 'a':
        count += 1

print(count)","text = ""abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc""

count = 0 
    ___
    ___
        count += 1

print(count)"
Create a program in Python to calculate the length of a given string without using the len() method.,"string=""Python""","def length(string):
    count = 0
    for char in string:
        count += 1
    return count

string=""Python""

print(length(string))",Data Type,2149,"def length(string):
    count = 0
    for char in string:
        count += 1
    return count

string=""Python""

print(length(string))","    ___
    count = 0
    ___
        count += 1
    return count

string=""Python""

print(length(string))"
Create a function to generate a random string of fixed length using Python.,length=8,"import random
import string

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(8)
print(random_string) # Outputs 'yezrtsyz'",Data Type,2162,"import random
import string

def generate_random_string(length):
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(8)
print(random_string) # Outputs 'yezrtsyz'","import random
import string

    ___
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(length))
     
    return result_str

random_string = generate_random_string(8)
print(random_string) # Outputs 'yezrtsyz'"
Write a function in Python to count how many words are in the given string.,"""Do not stand at my grave and weep""","def count_words(string):
    words = string.split(' ')
    return len(words)

sentence = ""Do not stand at my grave and weep""
count = count_words(sentence)
print(""The given string has {} words."".format(count))",Data Type,2186,"def count_words(string):
    words = string.split(' ')
    return len(words)

sentence = ""Do not stand at my grave and weep""
count = count_words(sentence)
print(""The given string has {} words."".format(count))","    ___
    words = string.split(' ')
    return len(words)

sentence = ""Do not stand at my grave and weep""
count = count_words(sentence)
print(""The given string has {} words."".format(count))"
Create a Python script to remove redundant characters in a given string.,"text = ""teeestttingggg""","def remove_redundant(text):
    """"""Remove redundant characters from a given string""""""
    result = """"

    # Iterate over the string
    for c in text:
        # Add the character to the result if it is not already present
        if c not in result:
            result+=c

    return result

# Output
print(remove_redundant(text))",Data Type,2192,"def remove_redundant(text):
    """"""Remove redundant characters from a given string""""""
    result = """"

    # Iterate over the string
    for c in text:
        # Add the character to the result if it is not already present
        if c not in result:
            result+=c

    return result

# Output
print(remove_redundant(text))","    ___
    """"""Remove redundant characters from a given string""""""
    result = """"

    # Iterate over the string
    ___
        # Add the character to the result if it is not already present
    ___
            result+=c

    return result

# Output
print(remove_redundant(text))"
"Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False.",MyString,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True
    return False",Data Type,2194,"def has_capital_letter(input_string):
    for character in input_string:
        if character.isupper():
            return True
    return False","    ___
    ___
    ___
            return True
    return False"
Write a python program to convert a given string in valid json format,"str = '{""key1"": ""value1"", ""key2"": ""value2""}'","import json

def str_to_json(json_string):
    # convert the string to dictionary
    json_dict = json.loads(json_string) 
    # convert the dictionary to json
    json_data = json.dumps(json_dict) 
    # return json
    return json_data",Data Type,2198,"import json

def str_to_json(json_string):
    # convert the string to dictionary
    json_dict = json.loads(json_string) 
    # convert the dictionary to json
    json_data = json.dumps(json_dict) 
    # return json
    return json_data","import json

    ___
    # convert the string to dictionary
    json_dict = json.loads(json_string) 
    # convert the dictionary to json
    json_data = json.dumps(json_dict) 
    # return json
    return json_data"
Develop a function in python to delete all the vowels in a string.,"string = ""B e a u t iful""","def remove_vowels(string):
    vowels = 'aeiou'
    new_string = ''

    for c in string:
        if c.lower() not in vowels:
            new_string += c
    
    return new_string

if __name__ == '__main__':
    string = ""Beau tiful""
    print(remove_vowels(string))",Data Type,2211,"def remove_vowels(string):
    vowels = 'aeiou'
    new_string = ''

    for c in string:
        if c.lower() not in vowels:
            new_string += c
    
    return new_string

if __name__ == '__main__':
    string = ""Beau tiful""
    print(remove_vowels(string))","    ___
    vowels = 'aeiou'
    new_string = ''

    ___
    ___
            new_string += c
    
    return new_string

    ___
    string = ""Beau tiful""
    print(remove_vowels(string))"
Create a python program to check the following string for palindrome,"""madam""","def check_palindrome(string):
  rev_str = string[::-1]
  if rev_str == string:
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))",Data Type,2213,"def check_palindrome(string):
  rev_str = string[::-1]
  if rev_str == string:
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))","    ___
  rev_str = string[::-1]
    ___
    return ""The string is a palindrome""
  return ""The string is not a palindrome""

print(check_palindrome(""madam""))"
Create a Python dictionary that stores the number of occurrences of each character in a string.,"s = ""Hello World!""","def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to 1
    if char not in chars_dict:
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict",Data Type,2226,"def countCharacters(s):
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
  for char in s:
    # If the character is not in the dictionary, set the value to 1
    if char not in chars_dict:
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict","    ___
  # Create empty dictionary 
  chars_dict = {}
  
  # Iterate over each character in the string
    ___
    # If the character is not in the dictionary, set the value to 1
    ___
      chars_dict[char] = 1
    # Otherwise, increment the value
    else:
      chars_dict[char] += 1
  
  return chars_dict"
Create a Python program to remove all characters from a given string except for letters and whitespaces,Hello $% World,"def remove_non_letter_characters(s): 
    return """".join(e for e in s if e.isalpha() or e == "" "") 
      
s = 'Hello $% World'
print(remove_non_letter_characters(s))",Data Type,2228,"def remove_non_letter_characters(s): 
    return """".join(e for e in s if e.isalpha() or e == "" "") 
      
s = 'Hello $% World'
print(remove_non_letter_characters(s))","    ___
    return """".join(e for e in s if e.isalpha() or e == "" "") 
      
s = 'Hello $% World'
print(remove_non_letter_characters(s))"
"Create a program in Python that takes two parameters, a string and an integer, and returns the string repeated that many times.","""Hello"", 4","def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", 4))",Data Type,2230,"def repeat_string(string, n):
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", 4))","    ___
    repeated_string = string * n
    return repeated_string

print(repeat_string(""Hello"", 4))"
Can you make the following string lowercase using Python?,"""This is a TEST string!""","""""""
Make the given string lowercase using Python
""""""

test_string = ""This is a TEST string!""

lowercase_string = test_string.lower()

print(lowercase_string) # prints ""this is a test string!""",Data Type,2232,"""""""
Make the given string lowercase using Python
""""""

test_string = ""This is a TEST string!""

lowercase_string = test_string.lower()

print(lowercase_string) # prints ""this is a test string!""","""""""
Make the given string lowercase using Python
""""""

test_string = ""This is a TEST string!""

lowercase_string = test_string.lower()

print(lowercase_string) # prints ""this is a test string!"""
"In Python, write a function that takes a string as input and reverses it.","""Hello World!""","def reverseString(text):
    return text[::-1]
 
result = reverseString(""Hello World!"")
print(result)",Data Type,2238,"def reverseString(text):
    return text[::-1]
 
result = reverseString(""Hello World!"")
print(result)","    ___
    return text[::-1]
 
result = reverseString(""Hello World!"")
print(result)"
Generate a correct python program to identify a particular character in a string.,Search for the letter 'e' in the given string,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False",Data Type,2239,"def char_in_string(char, string):
    for c in string:
        if c == char:
            return True
    return False","    ___
    ___
    ___
            return True
    return False"
Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string.,"List of strings: [""Hello"", ""World"", ""Hello"", ""World""]
Search String: ""World""","def search_string(lst, s):
 for i, item in enumerate(lst):
 if item == s:
 return i
 return -1",Data Type,2241,"def search_string(lst, s):
 for i, item in enumerate(lst):
 if item == s:
 return i
 return -1","    ___
    ___
    ___
 return i
 return -1"
Write a function in Python that takes in a string and then reverses each word in the string.,"string = ""This is a string""","def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts",Data Type,2242,"def reverse_words(s):
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts","    ___
  words = s.split()
  reversed_words = [word[::-1] for word in words]
  return ' '.join(reversed_words)

string = ""This is a string""
print(reverse_words(string))
// Output: sihT si a gnirts"
Create a function in Python to determine whether a given string contains any whitespace character.,"""Hello World""","def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True
 return False

print(hasWhitespace(""Hello World""))",Data Type,2243,"def hasWhitespace(string):
 for c in string:
  if c.isspace():
   return True
 return False

print(hasWhitespace(""Hello World""))","    ___
    ___
    ___
   return True
 return False

print(hasWhitespace(""Hello World""))"
Write a Python program to add two numbers given in string format.,"first number: ""2""
second number: ""3""","def addStringNumbers(num1,num2): 
    return int(num1) + int(num2)",Data Type,2245,"def addStringNumbers(num1,num2): 
    return int(num1) + int(num2)","    ___
    return int(num1) + int(num2)"
Write a Python program to remove all whitespace from a string.,The quick brown fox jumps over the lazy dog,"text_without_whitespace = """".join(text.split())",Data Type,2261,"text_without_whitespace = """".join(text.split())","text_without_whitespace = """".join(text.split())"
Generate a Python program to search for a particular string in a given dictionary?,"dict = {'a': 'apple', 'b': 'ball', 'c': 'cat'}","def search_string(dict, keyword):
    # iterate through the dictionary
    for key, value in dict.items():
        # check if the keyword is present in the value of the dictionary
        if keyword in value:
            return key
    # if keyword not found in dictionary
    return ""Not found""",Data Type,2265,"def search_string(dict, keyword):
    # iterate through the dictionary
    for key, value in dict.items():
        # check if the keyword is present in the value of the dictionary
        if keyword in value:
            return key
    # if keyword not found in dictionary
    return ""Not found""","    ___
    # iterate through the dictionary
    ___
        # check if the keyword is present in the value of the dictionary
    ___
            return key
    # if keyword not found in dictionary
    return ""Not found"""
"Create a Python function to classify a given string as a Positive, Negative, or Neutral sentiment.","""This is an amazing service.""","def classify_sentiment(string):
 if 'positive' in string:
  return 'Positive' 
 elif 'negative' in string:
  return 'Negative' 
 elif 'neutral' in string:
  return 'Neutral'
 else:
  return 'Unknown'

sentiment = classify_sentiment(""This is an amazing service."")
print(sentiment) # Positive",Data Type,2272,"def classify_sentiment(string):
 if 'positive' in string:
  return 'Positive' 
 elif 'negative' in string:
  return 'Negative' 
 elif 'neutral' in string:
  return 'Neutral'
 else:
  return 'Unknown'

sentiment = classify_sentiment(""This is an amazing service."")
print(sentiment) # Positive","    ___
    ___
  return 'Positive' 
    ___
  return 'Negative' 
    ___
  return 'Neutral'
 else:
  return 'Unknown'

sentiment = classify_sentiment(""This is an amazing service."")
print(sentiment) # Positive"
"Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array.","[‘a’, ‘a’, ‘b’, ‘a’, ‘c’, ‘a’]","def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}",Data Type,2273,"def count_frequency(arr):
    freq_dict = {}
    for ele in arr: 
        if ele in freq_dict: 
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}","    ___
    freq_dict = {}
    ___
    ___
            freq_dict[ele] += 1
        else: 
            freq_dict[ele] = 1
    return freq_dict

arr = ['a', 'a', 'b', 'a', 'c', 'a']
result = count_frequency(arr)

print(result) # Output: {'a': 4, 'b': 1, 'c': 1}"
Write a Python program to edit the given JSON string using the given selection criteria.,"JSON String: { “name”: “Alice”, “role”: “programmer”, “department”: “engineering” }
Selection Criteria: Change the department of the given JSON string.","import json

json_str = '{ ""name"": ""Alice"", ""role"": ""programmer"", ""department"": ""engineering"" }'

data = json.loads(json_str)

data[""department""] = ""marketing""

json_str = json.dumps(data)

print(json_str)",Data Type,2284,"import json

json_str = '{ ""name"": ""Alice"", ""role"": ""programmer"", ""department"": ""engineering"" }'

data = json.loads(json_str)

data[""department""] = ""marketing""

json_str = json.dumps(data)

print(json_str)","import json

json_str = '{ ""name"": ""Alice"", ""role"": ""programmer"", ""department"": ""engineering"" }'

data = json.loads(json_str)

data[""department""] = ""marketing""

json_str = json.dumps(data)

print(json_str)"
Design a python program to replace every occurrence of a word in a string with another word.,"string = ""Hello hello world!""
word = ""hello""
replacement_word = ""welcome""","def replace_word(string, word, replacement_word):
    return string.replace(word, replacement_word)

print(replace_word(""Hello hello world!"", ""hello"", ""welcome""))",Data Type,2285,"def replace_word(string, word, replacement_word):
    return string.replace(word, replacement_word)

print(replace_word(""Hello hello world!"", ""hello"", ""welcome""))","    ___
    return string.replace(word, replacement_word)

print(replace_word(""Hello hello world!"", ""hello"", ""welcome""))"
"Write a Python program to create a new string from a given string, where the first and last chars have been exchanged.",Hello,"def exchange_first_last(str1):
  str2 = """" 
  str2 = str1[-1] + str1[1:-1] + str1[0]
  return str2

print(exchange_first_last('Hello'))",Data Type,2286,"def exchange_first_last(str1):
  str2 = """" 
  str2 = str1[-1] + str1[1:-1] + str1[0]
  return str2

print(exchange_first_last('Hello'))","    ___
  str2 = """" 
  str2 = str1[-1] + str1[1:-1] + str1[0]
  return str2

print(exchange_first_last('Hello'))"
Write a Python program to replace all the vowels in the given string with '_'.,String: Python is a very interesting language,"def replace_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    res = []
    for letter in string.lower():
        if letter in vowels:
            res.append('_')
        else:
            res.append(letter)
    return ''.join(res)",Data Type,2295,"def replace_vowels(string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    res = []
    for letter in string.lower():
        if letter in vowels:
            res.append('_')
        else:
            res.append(letter)
    return ''.join(res)","    ___
    vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
    res = []
    ___
    ___
            res.append('_')
        else:
            res.append(letter)
    return ''.join(res)"
Design a function in Python to find the most repeated character in a string.,"my_string=""Hello world""","def most_repeated_character(my_string):
    counts = Counter(my_string)
    max_char = max(counts, key=counts.get)
    return max_char

print(""Most repeated character:"", most_repeated_character(my_string))",Data Type,2296,"def most_repeated_character(my_string):
    counts = Counter(my_string)
    max_char = max(counts, key=counts.get)
    return max_char

print(""Most repeated character:"", most_repeated_character(my_string))","    ___
    counts = Counter(my_string)
    max_char = max(counts, key=counts.get)
    return max_char

print(""Most repeated character:"", most_repeated_character(my_string))"
"Given a list of strings, write a Python program to sort the strings according to the length of each string.","strings = ['abc', 'def', 'ghi', 'jkl', 'mno']","def sort_strings_by_length(strings):
  return sorted(strings, key=len)",Data Type,2297,"def sort_strings_by_length(strings):
  return sorted(strings, key=len)","    ___
  return sorted(strings, key=len)"
Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item.,"items = [1,2,3,4,5]","def detect_item(items, item):
  if item in items:
    return True
  else:
    return False",Data Type,2312,"def detect_item(items, item):
  if item in items:
    return True
  else:
    return False","    ___
    ___
    return True
  else:
    return False"
Construct a function in Python that takes a list of strings and returns the original list with each string replaced by its reverse.,"list = ['hello', 'world', 'example']","def reverse_list(lst):
    return [s[::-1] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']",Data Type,2315,"def reverse_list(lst):
    return [s[::-1] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']","    ___
    return [s[::-1] for s in lst]

print(reverse_list(list))
# Output: ['olleh', 'dlrow', 'elpmaxe']"
Write Python script to replace all occurrences of a given letter in a string with another.,"String: ""fortnite""
Letter to replace: ""t""
Letter to replace with: ""l""","""""""Write Python script to replace all occurrences of a given letter in a string with another.""""""

# Take a string as an input
string = ""fortnite""

# Replace the target letter with the replacement letter
new_string = string.replace(""t"", ""l"")

# Print the new string
print(new_string)",Data Type,2324,"""""""Write Python script to replace all occurrences of a given letter in a string with another.""""""

# Take a string as an input
string = ""fortnite""

# Replace the target letter with the replacement letter
new_string = string.replace(""t"", ""l"")

# Print the new string
print(new_string)","""""""Write Python script to replace all occurrences of a given letter in a string with another.""""""

# Take a string as an input
string = ""fortnite""

# Replace the target letter with the replacement letter
new_string = string.replace(""t"", ""l"")

# Print the new string
print(new_string)"
Write a Python script to delete all duplicate characters in a given string,"string = ""mississippi""","def deleteDuplicates(string): 
    result = """"
    for i in string: 
        if i not in result: 
            result = result + i
    return result

print(""The output string is: "", deleteDuplicates(string))",Data Type,2326,"def deleteDuplicates(string): 
    result = """"
    for i in string: 
        if i not in result: 
            result = result + i
    return result

print(""The output string is: "", deleteDuplicates(string))","    ___
    result = """"
    ___
    ___
            result = result + i
    return result

print(""The output string is: "", deleteDuplicates(string))"
Create a function using Python to reverse the order of the characters in each word of a given string,string = “Hello World”,"def reverse_words(string): 
  splitted_words = string.split("" "") 

  reversed_words = [word[::-1] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)",Data Type,2338,"def reverse_words(string): 
  splitted_words = string.split("" "") 

  reversed_words = [word[::-1] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)","    ___
  splitted_words = string.split("" "") 

  reversed_words = [word[::-1] for word in splitted_words] 

  reversed_string = "" "".join(reversed_words) 
 
  return reversed_string 

reverse_words(string)"
Find the number 10 in a string using a Python regular expression.,"String: ""This string contains the number 10 in it""","re.search(""10"", ""This string contains the number 10 in it"")",Data Type,2339,"re.search(""10"", ""This string contains the number 10 in it"")","re.search(""10"", ""This string contains the number 10 in it"")"
Create two functions in Python to capitalize and uncapitalize each character of a string.,string = 'hello world',"def capitalize_each_character(string):
  result = ''
  for char in string:
    result += char.capitalize()
  return result

def uncapitalize_each_character(string):
  result = ''
  for char in string:
    result += char.lower()
  return result",Data Type,2345,"def capitalize_each_character(string):
  result = ''
  for char in string:
    result += char.capitalize()
  return result

def uncapitalize_each_character(string):
  result = ''
  for char in string:
    result += char.lower()
  return result","    ___
  result = ''
    ___
    result += char.capitalize()
  return result

    ___
  result = ''
    ___
    result += char.lower()
  return result"
Create a Python script to reverse a given string.,'Hello World',"def reverse_string(string):
    return string[::-1]

result = reverse_string('Hello World')
print(result)",Data Type,2350,"def reverse_string(string):
    return string[::-1]

result = reverse_string('Hello World')
print(result)","    ___
    return string[::-1]

result = reverse_string('Hello World')
print(result)"
Write a Python program to convert a list of numbers into a string.,"[2, 3, 10]","def list_to_str(lst):
    result = "","".join(map(str, lst))
    return result

result = list_to_str([2, 3, 10])
print(result)",Data Type,2351,"def list_to_str(lst):
    result = "","".join(map(str, lst))
    return result

result = list_to_str([2, 3, 10])
print(result)","    ___
    result = "","".join(map(str, lst))
    return result

result = list_to_str([2, 3, 10])
print(result)"
Develop a Python program to remove a specific character from a given string.,"string = ""Hello World!"" 
character = 'l'","def remove_char(string, char):
  return string.replace(char, '')",Data Type,2364,"def remove_char(string, char):
  return string.replace(char, '')","    ___
  return string.replace(char, '')"
Write a script in Python to return the cryptographic hash of a string.,string = 'Welcome to the world of programming!',"import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))",Data Type,2368,"import hashlib

def get_hash(string):
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))","import hashlib

    ___
    sha1 = hashlib.sha1()
    sha1.update(string.encode('utf-8'))
    return sha1.hexdigest()

print(get_hash(string))"
"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results.","""Hello World!""","str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))",Data Type,2374,"str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

for char in chars:
    if char in char_counts:
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
for char, count in char_counts.items():
    print(""{} : {}"".format(char, count))","str = ""Hello World!""
chars = list(str)

# initialize counts as empty dictionary
char_counts = {}

    ___
    ___
        char_counts[char] += 1
    else:
        char_counts[char] = 1

# printing result
    ___
    print(""{} : {}"".format(char, count))"
Generate a list in Python that contains all the words from a source string that start with a certain letter.,"source_string = ""My dog loves to play in the park!""
letter = ""p""","def generate_list(source_string, letter):
  words = source_string.split()
  result = []
  for word in words:
    if word[0].lower() == letter:
      result.append(word)
  return result

print(generate_list(source_string, letter))",Data Type,2382,"def generate_list(source_string, letter):
  words = source_string.split()
  result = []
  for word in words:
    if word[0].lower() == letter:
      result.append(word)
  return result

print(generate_list(source_string, letter))","    ___
  words = source_string.split()
  result = []
    ___
    ___
      result.append(word)
  return result

print(generate_list(source_string, letter))"
"Write a python program to convert a time string ""hh:mm:ss"" into total number of seconds","time = ""08:11:15""",time_in_secs = 8 * 3600 + 11 * 60 + 15,Data Type,2402,time_in_secs = 8 * 3600 + 11 * 60 + 15,time_in_secs = 8 * 3600 + 11 * 60 + 15
Write a Python script that counts the characters of a given string.,Hello World,"string = 'Hello world'

count = len(string)

print(""Length of the string is"", count)",Data Type,2404,"string = 'Hello world'

count = len(string)

print(""Length of the string is"", count)","string = 'Hello world'

count = len(string)

print(""Length of the string is"", count)"
Create a Python program to check if a string ends with a given substring.,"s = 'Hello World', substring = 'ld'","def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True",Data Type,2406,"def endswith(s, substring): 
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True","    ___
    return s.endswith(substring) 


s = 'Hello World'
substring = 'ld'
print(endswith(s, substring)) # prints True"
Create a program in Python which takes a string and an integer as input and prints the string the given number of times.,"String: Hello
Integer: 3","string = ""Hello""
num = 3

for i in range(num):
    print(string)",Data Type,2407,"string = ""Hello""
num = 3

for i in range(num):
    print(string)","string = ""Hello""
num = 3

    ___
    print(string)"
Create a function in Python to calculate the total of all the characters in a given input string.,string: 'Hello World!',"def char_total(string):
total = 0

for char in string:
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: 1116",Data Type,2411,"def char_total(string):
total = 0

for char in string:
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: 1116","    ___
total = 0

    ___
 total += ord(char)

return total

print(char_total('Hello World!')) 
# Output: 1116"
Create a feature extraction function in Python to extract data from a json string.,"{""id"":111,""title"":""This is a sample title"",""body"":""This is a sample body text""}","def feature_extraction(input_str):
    import json
    data = json.loads(input_str)

    features = {
        ""id"": data[""id""],
        ""title"": data[""title""],
        ""body_len"": len(data[""body""])
    }

    return features",Data Type,2422,"def feature_extraction(input_str):
    import json
    data = json.loads(input_str)

    features = {
        ""id"": data[""id""],
        ""title"": data[""title""],
        ""body_len"": len(data[""body""])
    }

    return features","    ___
    import json
    data = json.loads(input_str)

    features = {
        ""id"": data[""id""],
        ""title"": data[""title""],
        ""body_len"": len(data[""body""])
    }

    return features"
Generate a program in Python that takes two strings and returns a list containing the combined string.,"(""Hello "", ""World!"")","def combine_strings(str1, str2):
 return [str1 + str2]

combined_string = combine_strings(""Hello "", ""World!"")
print(combined_string) # [""Hello World!""]",Data Type,2424,"def combine_strings(str1, str2):
 return [str1 + str2]

combined_string = combine_strings(""Hello "", ""World!"")
print(combined_string) # [""Hello World!""]","    ___
 return [str1 + str2]

combined_string = combine_strings(""Hello "", ""World!"")
print(combined_string) # [""Hello World!""]"
Write a function in Python to display all the words beginning with a given alphabet in a given string.,"str = ""This is a sample sentence""","def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[0].upper() == alphabet.upper():
      result.append(word)
  
  return result",Data Type,2425,"def all_words_beginning_with(str, alphabet):
  words = str.split()
  result = []
  for word in words:
    if word[0].upper() == alphabet.upper():
      result.append(word)
  
  return result","    ___
  words = str.split()
  result = []
    ___
    ___
      result.append(word)
  
  return result"
Create a python code to generate a dictionary of char counts for a given string.,"input_string = ""Hello World!""","def char_count_dict(input_string):
    char_dict = {}

    for char in input_string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    
    return char_dict

print(char_count_dict(input_string))",Data Type,2433,"def char_count_dict(input_string):
    char_dict = {}

    for char in input_string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    
    return char_dict

print(char_count_dict(input_string))","    ___
    char_dict = {}

    ___
    ___
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    
    return char_dict

print(char_count_dict(input_string))"
Write a python program to convert a list of words into a string delimited by a space separator.,"[""Hello"",""World"",""!""]","words = [""Hello"", ""World"", ""!""]
print(' '.join(words))",Data Type,2435,"words = [""Hello"", ""World"", ""!""]
print(' '.join(words))","words = [""Hello"", ""World"", ""!""]
print(' '.join(words))"
Generate an efficient Python program to reverse a string.,Hello,"def reverseString(inputString): 
    reversedString = """" 
    for i in inputString: 
        reversedString = i + reversedString 
    return reversedString 
  
print(reverseString(""Hello""))",Data Type,2436,"def reverseString(inputString): 
    reversedString = """" 
    for i in inputString: 
        reversedString = i + reversedString 
    return reversedString 
  
print(reverseString(""Hello""))","    ___
    reversedString = """" 
    ___
        reversedString = i + reversedString 
    return reversedString 
  
print(reverseString(""Hello""))"
"Write a Python program to find all the words in a string, that begin with a vowel.",This is a sample string,"vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

for word in words:
 if word[0].lower() in vowels:
 print(word)",Data Type,2469,"vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

for word in words:
 if word[0].lower() in vowels:
 print(word)","vowels = ['a', 'e', 'i', 'o', 'u']
words = ""This is a sample string"".split()

    ___
    ___
 print(word)"
Create a program in Python to reverse a string using a recursive algorithm.,"string = ""Hello world!""","def reverse_string_recursive(string: str) -> str: 
  if len(string) == 0:
    return string 
  else: 
    return reverse_string_recursive(string[1:]) + string[0]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH""",Data Type,2479,"def reverse_string_recursive(string: str) -> str: 
  if len(string) == 0:
    return string 
  else: 
    return reverse_string_recursive(string[1:]) + string[0]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH""","def reverse_string_recursive(string: str) -> str: 
    ___
    return string 
  else: 
    return reverse_string_recursive(string[1:]) + string[0]

print(reverse_string_recursive(string)) 
# Output: ""!dlrow olleH"""
Develop a script in Python to find all numbers in a given string.,This sentence has two numbers: 35 and 347.,"import re

s = ""This sentence has two numbers: 35 and 347.""
numlist = []
for item in re.findall('\d+', s):
    numlist.append(int(item))
    
print(numlist) # prints [35, 347]",Data Type,2480,"import re

s = ""This sentence has two numbers: 35 and 347.""
numlist = []
for item in re.findall('\d+', s):
    numlist.append(int(item))
    
print(numlist) # prints [35, 347]","import re

s = ""This sentence has two numbers: 35 and 347.""
numlist = []
    ___
    numlist.append(int(item))
    
print(numlist) # prints [35, 347]"
Generate a valid python program to convert a given string to its title case.,hello world,"def to_title_case(string):
    words = string.split()

    result = []
    for word in words:
        result.append(word.title())

    return ' '.join(result)

title = to_title_case(""hello world"")
print(title)",Data Type,2484,"def to_title_case(string):
    words = string.split()

    result = []
    for word in words:
        result.append(word.title())

    return ' '.join(result)

title = to_title_case(""hello world"")
print(title)","    ___
    words = string.split()

    result = []
    ___
        result.append(word.title())

    return ' '.join(result)

title = to_title_case(""hello world"")
print(title)"
Can you write a code snippet in Python that replaces all occurrences of a specific character in a string?,"string = ""Hello World""
character = ""o""","def replace_all_occurrences(string, character): 
  return string.replace(character, """")",Data Type,2498,"def replace_all_occurrences(string, character): 
  return string.replace(character, """")","    ___
  return string.replace(character, """")"
Create a Python function that takes a string and returns the longest prefix that is a palindrome.,"The input string is ""abca"".","def longest_prefix_palindrome(s):
  if len(s) <= 1: 
    return s
  
  max_length = 0
  for i in range(1,len(s)): 
    if s[:i] == s[i-1::-1]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))",Data Type,2506,"def longest_prefix_palindrome(s):
  if len(s) <= 1: 
    return s
  
  max_length = 0
  for i in range(1,len(s)): 
    if s[:i] == s[i-1::-1]:
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))","    ___
    ___
    return s
  
  max_length = 0
    ___
    ___
       max_length = i 
  
  return s[:max_length] 

print(longest_prefix_palindrome(""abca""))"
Generate a Python program that takes a string and capitalizes the first character of each word.,"""this is an example""","def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)",Data Type,2521,"def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)","    ___
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)

capitalized_string = capitalize_string(""this is an example"")
print(capitalized_string)"
Create a Python function to input a string and then return the number of vowels found in the string.,hello,"def count_vowels(string):
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = 0
 for letter in string.lower():
 if letter in vowels:
  count += 1
 return count

output = count_vowels(""Hello"")
print(output)  # output = 2",Data Type,2526,"def count_vowels(string):
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = 0
 for letter in string.lower():
 if letter in vowels:
  count += 1
 return count

output = count_vowels(""Hello"")
print(output)  # output = 2","    ___
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 count = 0
    ___
    ___
  count += 1
 return count

output = count_vowels(""Hello"")
print(output)  # output = 2"
"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not.","myString = ""Hello World!""
substring = ""World""","def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False",Data Type,2559,"def checkIfStringContainsSubstring(myString, substring):
  for i in range(len(myString) - len(substring) + 1):
    if myString[i:i+len(substring)] == substring:
      return True
  return False","    ___
    ___
    ___
      return True
  return False"
Write a function in Python to remove all occurrences of a specific character from a string.,"string = ""computer science""
remove_char = ""c""","def remove_char_from_string(string, remove_char):
    new_string = """"
    for char in string:
        if char != remove_char:
            new_string += char
    return new_string

if __name__ == '__main__':
     string = ""computer science""
     remove_char = ""c""
     print(remove_char_from_string(string, remove_char))",Data Type,2560,"def remove_char_from_string(string, remove_char):
    new_string = """"
    for char in string:
        if char != remove_char:
            new_string += char
    return new_string

if __name__ == '__main__':
     string = ""computer science""
     remove_char = ""c""
     print(remove_char_from_string(string, remove_char))","    ___
    new_string = """"
    ___
    ___
            new_string += char
    return new_string

    ___
     string = ""computer science""
     remove_char = ""c""
     print(remove_char_from_string(string, remove_char))"
Create a python program that takes a string and prints the reverse of it.,Hello,"""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-1] 

# Print the reversed string
print(rev_string)",Data Type,2578,"""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-1] 

# Print the reversed string
print(rev_string)","""""""
Create a python program that takes a string and prints the reverse of it
""""""

# Get the input string 
my_string = input('Enter a string: ') 

# Reverse the string 
rev_string = my_string[::-1] 

# Print the reversed string
print(rev_string)"
Develop a Python program to count the frequency of each word in a given string.,"string = ""This is a string""","def countFreq(str): 
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    for word in str: 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
    return freq",Data Type,2581,"def countFreq(str): 
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    for word in str: 
        if word in freq: 
            freq[word] += 1
        else: 
            freq[word] = 1
    return freq","    ___
      
    # break the string into words  
    str = str.split("" "")  
      
    # Count each word using Dictionary  
    freq = {} 
    ___
    ___
            freq[word] += 1
        else: 
            freq[word] = 1
    return freq"
Create a Python script to split a string into an array of substrings based on a given delimiter.,"text = ""one-two-three-four""","def split(text, delimiter):
  substring = []
  temp = """"
   
  for i in text:
    if i != delimiter:
      temp += i
    else:
      substring.append(temp)
      temp = """"
  substring.append(temp)
  
  return substring
    
text = ""one-two-three-four""
print(""Original String: ""+text)

print(""Split String:"",split(text,'-'))",Data Type,2603,"def split(text, delimiter):
  substring = []
  temp = """"
   
  for i in text:
    if i != delimiter:
      temp += i
    else:
      substring.append(temp)
      temp = """"
  substring.append(temp)
  
  return substring
    
text = ""one-two-three-four""
print(""Original String: ""+text)

print(""Split String:"",split(text,'-'))","    ___
  substring = []
  temp = """"
   
    ___
    ___
      temp += i
    else:
      substring.append(temp)
      temp = """"
  substring.append(temp)
  
  return substring
    
text = ""one-two-three-four""
print(""Original String: ""+text)

print(""Split String:"",split(text,'-'))"
Write a Python program that takes in a list of strings and prints out the string with the most characters,"[“Hello”, “World”, “How”, “Are”, “You”]","longest_str = """"
for string in list_of_strings:
    if len(string) > len(longest_str):
        longest_str = string

print(longest_str)",Data Type,2627,"longest_str = """"
for string in list_of_strings:
    if len(string) > len(longest_str):
        longest_str = string

print(longest_str)","longest_str = """"
    ___
    ___
        longest_str = string

print(longest_str)"
Create a function in Python that takes two strings as parameters and returns the string that has the longest length.,"string1=""Python""
string2=""Programming""","def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

string1=""Python""
string2=""Programming""

print(longest_string(string1, string2))",Data Type,2631,"def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

string1=""Python""
string2=""Programming""

print(longest_string(string1, string2))","    ___
    ___
        return string1
    else:
        return string2

string1=""Python""
string2=""Programming""

print(longest_string(string1, string2))"
Compose a program in Python to convert every word of a given string to uppercase letters.,"sentence = ""the quick brown fox jumps over the lazy dog""","def to_uppercase(sentence):
    words = sentence.split(' ')
    new_sentence = []
    for word in words:
        new_sentence.append(word.upper())
    return ' '.join(new_sentence)

if __name__ == '__main__':
    print(to_uppercase(sentence))",Data Type,2634,"def to_uppercase(sentence):
    words = sentence.split(' ')
    new_sentence = []
    for word in words:
        new_sentence.append(word.upper())
    return ' '.join(new_sentence)

if __name__ == '__main__':
    print(to_uppercase(sentence))","    ___
    words = sentence.split(' ')
    new_sentence = []
    ___
        new_sentence.append(word.upper())
    return ' '.join(new_sentence)

    ___
    print(to_uppercase(sentence))"
Generate python code to encode a given string in base64.,string = 'This is a test string.',"def base64_encode(string):
    encoded_string = base64.b64encode(string.encode('utf-8')) 
    return encoded_string.decode('utf-8')",Data Type,2635,"def base64_encode(string):
    encoded_string = base64.b64encode(string.encode('utf-8')) 
    return encoded_string.decode('utf-8')","    ___
    encoded_string = base64.b64encode(string.encode('utf-8')) 
    return encoded_string.decode('utf-8')"
Create a Completion function in Python that takes a string and returns a list of strings that match the input string.,string = “th”,"def completion(string):
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
  for word in words:
    if len(word) > 2 and word.startswith(string):
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]",Data Type,2644,"def completion(string):
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
  for word in words:
    if len(word) > 2 and word.startswith(string):
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]","    ___
  results = []
  words = [""the"", ""that"", ""this"", ""those"", ""thing"", ""think"", ""thought""]
    ___
    ___
      results.append(word)
  return results
  
print(completion(""th"")) # Output: [""those"", ""think"", ""thought""]"
Create a function to convert a string to a list using Python.,"text = ""This is a sentence.""","def string_to_list(text):
    lst = text.split()
    return lst

text = ""This is a sentence.""
print(string_to_list(text))",Data Type,2650,"def string_to_list(text):
    lst = text.split()
    return lst

text = ""This is a sentence.""
print(string_to_list(text))","    ___
    lst = text.split()
    return lst

text = ""This is a sentence.""
print(string_to_list(text))"
"Using Python, detect if the given string is a palindrome or not.",madam,"def isPalindrome(s): 
    s = s.lower()
    return s == s[::-1]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

if palindrome_status:
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")",Data Type,2660,"def isPalindrome(s): 
    s = s.lower()
    return s == s[::-1]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

if palindrome_status:
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")","    ___
    s = s.lower()
    return s == s[::-1]

string_input = ""madam""
palindrome_status = isPalindrome(string_input)

    ___
    print(""The given string is a Palindrome"")
else:
    print(""The given string is not a Palindrome"")"
Write a Python script to check if the given string is a palindrome.,"string_to_test = ""racecar""","def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False",Data Type,2690,"def is_palindrome(string_to_test):
    reverse = reversed(string_to_test)
    if list(string_to_test) == list(reverse):
        return True
    return False","    ___
    reverse = reversed(string_to_test)
    ___
        return True
    return False"
Write a Python program to check if a given string is a rotation of another given string.,"str1 = ""waterbottle""
str2 = ""erbottlewat""","def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)",Data Type,2695,"def is_rotation(str1, str2):
 if len(str1) != len(str2):
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)","    ___
    ___
  return False
 
 concat_str2 = str2 * 2
 
 return str1 in concat_str2
 
is_rotation(str1, str2)"
Write a Python function to edit the given input string such that all consecutive duplicate characters in the string are removed.,"inputstring = ""aabbcccdddd""","def remove_duplicates(inputstring):
    result = """"
    for i in range(len(inputstring)):
        if i == 0 or inputstring[i] != inputstring[i-1]:
            result += inputstring[i]
    return result",Data Type,2714,"def remove_duplicates(inputstring):
    result = """"
    for i in range(len(inputstring)):
        if i == 0 or inputstring[i] != inputstring[i-1]:
            result += inputstring[i]
    return result","    ___
    result = """"
    ___
    ___
            result += inputstring[i]
    return result"
Create a Python dictionary to store the number of occurrences of each character of the given string.,String = “abracadabra”,str_dict = {i:list(str).count(i) for i in set(str)},Data Type,2748,str_dict = {i:list(str).count(i) for i in set(str)},str_dict = {i:list(str).count(i) for i in set(str)}
"Generate a Python function that reverses a given string, and test the function with an input of ""Hello"".","""Hello""","def reverse(string):
    return string[::-1]

print(reverse('Hello')) #prints ""olleH""",Data Type,2754,"def reverse(string):
    return string[::-1]

print(reverse('Hello')) #prints ""olleH""","    ___
    return string[::-1]

print(reverse('Hello')) #prints ""olleH"""
Create a Python program that takes two strings as input and outputs a single concatenated string.,"""Hello "", ""world!""","def concat_strings(a, b):
    return a + b

result = concat_strings(""Hello "", ""world!"")
print(result)",Data Type,2755,"def concat_strings(a, b):
    return a + b

result = concat_strings(""Hello "", ""world!"")
print(result)","    ___
    return a + b

result = concat_strings(""Hello "", ""world!"")
print(result)"
Write a Python program to remove duplicate characters from a given string.,"string = ""Hello World !""","string = ""Hello World !""

result = """" 
for char in string:
    if char not in result: 
        result += char

print(""String after removing duplicate characters:"", result)",Data Type,2758,"string = ""Hello World !""

result = """" 
for char in string:
    if char not in result: 
        result += char

print(""String after removing duplicate characters:"", result)","string = ""Hello World !""

result = """" 
    ___
    ___
        result += char

print(""String after removing duplicate characters:"", result)"
Write a Python program to detect the largest word in a sentence. The program should take a string as input and return the largest word found in it.,This sentence has seven words.,"def find_largest_word(sentence):
 splits = sentence.split(' ')
 largest_word = """"
 for word in splits:
 if len(word) > len(largest_word):
 largest_word = word
 return largest_word

print(find_largest_word(""This sentence has seven words.""))
# Output: ""sentence""",Data Type,2766,"def find_largest_word(sentence):
 splits = sentence.split(' ')
 largest_word = """"
 for word in splits:
 if len(word) > len(largest_word):
 largest_word = word
 return largest_word

print(find_largest_word(""This sentence has seven words.""))
# Output: ""sentence""","    ___
 splits = sentence.split(' ')
 largest_word = """"
    ___
    ___
 largest_word = word
 return largest_word

print(find_largest_word(""This sentence has seven words.""))
# Output: ""sentence"""
"Create a program in Python which takes an input string, and sorts it alphabetically",Fortnite,"def sort_string(string): 
    return ''.join(sorted(string)) 
  
string = ""Fortnite""
print(sort_string(string))",Data Type,2775,"def sort_string(string): 
    return ''.join(sorted(string)) 
  
string = ""Fortnite""
print(sort_string(string))","    ___
    return ''.join(sorted(string)) 
  
string = ""Fortnite""
print(sort_string(string))"
Construct an algorithm in Golang to capitalize all the letters in a given string,"string = ""python""","package main

import (
	""strings""
)

func capitalize(string string) string {
	return strings.ToUpper(string)
}

func main() {
	string := ""python""
	fmt.Println(capitalize(string))
}",Data Type,2781,"package main

import (
	""strings""
)

func capitalize(string string) string {
	return strings.ToUpper(string)
}

func main() {
	string := ""python""
	fmt.Println(capitalize(string))
}","package main

import (
	""strings""
)

func capitalize(string string) string {
	return strings.ToUpper(string)
}

func main() {
	string := ""python""
	fmt.Println(capitalize(string))
}"
Create a Python program that takes a string as input and prints all permutations of it in lexicographical order.,ABC,"def permutations(string):
 if len(string) == 0:
 return

 else:
 first_char = string[0]
 remainder = string[1:]
 permutations(remainder)
 for perm in permutations(remainder):
 for i in range(len(perm)+1):
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB",Data Type,2791,"def permutations(string):
 if len(string) == 0:
 return

 else:
 first_char = string[0]
 remainder = string[1:]
 permutations(remainder)
 for perm in permutations(remainder):
 for i in range(len(perm)+1):
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB","    ___
    ___
 return

 else:
 first_char = string[0]
 remainder = string[1:]
 permutations(remainder)
    ___
    ___
 result = perm[:i] + first_char + perm[i:]
 print(result)

permutations(""ABC"") #run the code

# Output
ABC
ACB
BAC
BCA
CBA
CAB"
Develop a Python program to remove duplicate characters in a given string.,"""Hello World""","def remove_duplicate(my_string):
    char_seen = []
    for character in my_string:
        if character not in char_seen:
            char_seen.append(character)
    return ''.join(char_seen)

print(remove_duplicate(""Hello World"")) #Helo Wrld",Data Type,2794,"def remove_duplicate(my_string):
    char_seen = []
    for character in my_string:
        if character not in char_seen:
            char_seen.append(character)
    return ''.join(char_seen)

print(remove_duplicate(""Hello World"")) #Helo Wrld","    ___
    char_seen = []
    ___
    ___
            char_seen.append(character)
    return ''.join(char_seen)

print(remove_duplicate(""Hello World"")) #Helo Wrld"
Write a Python program to find the most common letter in the given string.,"str = ""hello world""","str = ""hello world""

from collections import Counter

def most_common_letter(str):
    letters_count = Counter(str).most_common()
    return letters_count[0][0]

print(most_common_letter(str))",Data Type,2800,"str = ""hello world""

from collections import Counter

def most_common_letter(str):
    letters_count = Counter(str).most_common()
    return letters_count[0][0]

print(most_common_letter(str))","str = ""hello world""

from collections import Counter

    ___
    letters_count = Counter(str).most_common()
    return letters_count[0][0]

print(most_common_letter(str))"
"Edit the following Python program to return true if the following string contains the word ""Hello"".",def check_hello(s):,"def check_hello(s):
    return 'Hello' in s",Data Type,2807,"def check_hello(s):
    return 'Hello' in s","    ___
    return 'Hello' in s"
Generate a Python program to split a given string into uppercase and lowercase letters.,"string=""GPTIsForever""","def case_split(string):
    string_list =list(string)
    upper_list = []
    lower_list = []
    
    for i in string_list:
        if i.isupper():
            upper_list.append(i)
        else:
            lower_list.append(i)
    return ''.join(upper_list), ''.join(lower_list)",Data Type,2824,"def case_split(string):
    string_list =list(string)
    upper_list = []
    lower_list = []
    
    for i in string_list:
        if i.isupper():
            upper_list.append(i)
        else:
            lower_list.append(i)
    return ''.join(upper_list), ''.join(lower_list)","    ___
    string_list =list(string)
    upper_list = []
    lower_list = []
    
    ___
    ___
            upper_list.append(i)
        else:
            lower_list.append(i)
    return ''.join(upper_list), ''.join(lower_list)"
"Given an URL as a string, write a program in Python to find the domain name.","url = ""https://www.google.com""","def get_domain_name(url): 
    return url.split(""/"")[2]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com",Data Type,2827,"def get_domain_name(url): 
    return url.split(""/"")[2]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com","    ___
    return url.split(""/"")[2]

print(get_domain_name(""https://www.google.com""))  # prints www.google.com"
Create a Python script that takes a given text string and outputs the number of words in the string.,Text string: “I love programming”,"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3",Data Type,2831,"def wordCount(text):
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3","    ___
    words = text.split(' ')

    return len(words)

print(wordCount(""I love programming""))  # 3"
Generate a python program to parse a string and extract the number of vowels.,"Input string: “Hello World!""","def count_vowels(s):
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = 0 
    for character in s.lower():
        if character in vowels:
            count += 1
    print(""Number of vowels :"", count)",Data Type,2859,"def count_vowels(s):
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = 0 
    for character in s.lower():
        if character in vowels:
            count += 1
    print(""Number of vowels :"", count)","    ___
    vowels = [""a"", ""e"", ""i"" , ""o"", ""u""]
    count = 0 
    ___
    ___
            count += 1
    print(""Number of vowels :"", count)"
Write a Python script to parse a given string and construct a dictionary from its content.,"""bio: John Smith, age: 32""","def parse_string(s):
    info = s.split("", "")

    result = {}
    for item in info:
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: 32"")
print(result)",Data Type,2867,"def parse_string(s):
    info = s.split("", "")

    result = {}
    for item in info:
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: 32"")
print(result)","    ___
    info = s.split("", "")

    result = {}
    ___
        k, v = item.split("": "")
        result[k] = v

    return result

result = parse_string(""bio: John Smith, age: 32"")
print(result)"
Write a script in Python to generate a dictionary of words from a given string.,def words_dict(string):,"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict",Data Type,2872,"def words_dict(string):
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    for word in words:
        if word in word_dict:
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict","    ___
    """"""This function returns a dictionary with words as keys and their count as values.""""""
    words = string.split()
    word_dict = {}
    
    ___
    ___
            word_dict[word] += 1
        else: 
            word_dict[word] = 1
    
    return word_dict"
Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'.,"Input string: ""Hello world""
Index: 3","def replace_character(string, index):
    new_string = """"
    for i in range(len(string)):
        if i == index:
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", 3)) # Output: Hel*lo world",Data Type,2881,"def replace_character(string, index):
    new_string = """"
    for i in range(len(string)):
        if i == index:
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", 3)) # Output: Hel*lo world","    ___
    new_string = """"
    ___
    ___
            new_string += ""*""
        else:
            new_string += string[i]
    return new_string

print(replace_character(""Hello world"", 3)) # Output: Hel*lo world"
Convert a string to lowercase using Python.,HELLO WORLD!,"str = ""HELLO WORLD!""
lowerCaseStr = str.lower()
print(lowerCaseStr)",Data Type,2889,"str = ""HELLO WORLD!""
lowerCaseStr = str.lower()
print(lowerCaseStr)","str = ""HELLO WORLD!""
lowerCaseStr = str.lower()
print(lowerCaseStr)"
Create a Python code to split a given string into an array with all of the individual sentences.,'This is a test string with three sentences!',"def split_sentences(text):
    sentences = []
    start = 0
    for i in range(len(text)):
        if text[i] == '.' or text[i] == '!' or text[i] == '?':
            sentences.append(text[start:i+1])
            start = i+1
    return sentences

split_sentences('This is a test string with three sentences!')",Data Type,2904,"def split_sentences(text):
    sentences = []
    start = 0
    for i in range(len(text)):
        if text[i] == '.' or text[i] == '!' or text[i] == '?':
            sentences.append(text[start:i+1])
            start = i+1
    return sentences

split_sentences('This is a test string with three sentences!')","    ___
    sentences = []
    start = 0
    ___
    ___
            sentences.append(text[start:i+1])
            start = i+1
    return sentences

split_sentences('This is a test string with three sentences!')"
Write a function in Python which takes a string as input and returns its reversed version.,"Input string: ""Hello World""","def reverse_string(string): 
  
  # Create an empty string  
  rev_str = """" 
  
  # Iterate over characters of the given string  
  for char in string: 
    # Prepend the character to the beginning of rev_str 
    rev_str = char + rev_str 
  
  return rev_str 
  
# Driver code 
string = ""Hello World""
print(reverse_string(string)) # Output: dlroW olleH",Data Type,2913,"def reverse_string(string): 
  
  # Create an empty string  
  rev_str = """" 
  
  # Iterate over characters of the given string  
  for char in string: 
    # Prepend the character to the beginning of rev_str 
    rev_str = char + rev_str 
  
  return rev_str 
  
# Driver code 
string = ""Hello World""
print(reverse_string(string)) # Output: dlroW olleH","    ___
  
  # Create an empty string  
  rev_str = """" 
  
  # Iterate over characters of the given string  
    ___
    # Prepend the character to the beginning of rev_str 
    rev_str = char + rev_str 
  
  return rev_str 
  
# Driver code 
string = ""Hello World""
print(reverse_string(string)) # Output: dlroW olleH"
Write a Python program to classify the type of an angle based on the measure of the angle.,angle = 180,"def classify_angle(angle):
  if angle == 0:
    return ""Zero angle""
  elif angle > 0 and angle < 90:
    return ""Acute angle""
  elif angle == 90:
    return ""Right angle""
  elif angle > 90 and angle < 180:
    return ""Obtuse angle""
  elif angle == 180:
    return ""Straight angle""

result = classify_angle(angle)",Data Type,2934,"def classify_angle(angle):
  if angle == 0:
    return ""Zero angle""
  elif angle > 0 and angle < 90:
    return ""Acute angle""
  elif angle == 90:
    return ""Right angle""
  elif angle > 90 and angle < 180:
    return ""Obtuse angle""
  elif angle == 180:
    return ""Straight angle""

result = classify_angle(angle)","    ___
    ___
    return ""Zero angle""
    ___
    return ""Acute angle""
    ___
    return ""Right angle""
    ___
    return ""Obtuse angle""
    ___
    return ""Straight angle""

result = classify_angle(angle)"
Write a code in python to remove given character from a given string.,"given_string = ""Hello world!""
character = ""l""","def remove_char(given_string, character):
    new_string =  given_string.replace(character, """")
    return new_string",Data Type,2955,"def remove_char(given_string, character):
    new_string =  given_string.replace(character, """")
    return new_string","    ___
    new_string =  given_string.replace(character, """")
    return new_string"
Identify the data type of the following input and provide a code to convert it to an integer in Python.,"""123""","input_type = type(""123"") # str

converted_int = int(""123"") # 123",Data Type,2958,"input_type = type(""123"") # str

converted_int = int(""123"") # 123","input_type = type(""123"") # str

converted_int = int(""123"") # 123"
Create a program to search for a substring in a string and return the starting position of the substring.,"String: ""Python is powerful & fun""
Substring: ""pow""","string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
if start_pos == -1:
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)",Data Type,2967,"string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
if start_pos == -1:
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)","string = ""Python is powerful & fun""
substring = ""pow""
 
start_pos = string.find(substring)
    ___
    print(""substring not found"")
else:
    print(""substring found at position:"", start_pos)"
Generate a Python program to search an array of strings and return the string that contains a given substring.,"array = [""apple"", ""banana"", ""pear"", ""kiwi""]
query = ""ana""","def searchArray(array, query):
    results = []
    for string in array:
        if query in string:
            results.append(string)
    return results

array = [""apple"", ""banana"", ""pear"", ""kiwi""]
query = ""ana""

print(searchArray(array, query))",Data Type,2971,"def searchArray(array, query):
    results = []
    for string in array:
        if query in string:
            results.append(string)
    return results

array = [""apple"", ""banana"", ""pear"", ""kiwi""]
query = ""ana""

print(searchArray(array, query))","    ___
    results = []
    ___
    ___
            results.append(string)
    return results

array = [""apple"", ""banana"", ""pear"", ""kiwi""]
query = ""ana""

print(searchArray(array, query))"
Write a function in Python which takes a question string and returns the answer.,What is the capital of China?,"def answer_question(question):
    if question == 'What is the capital of China?':
        return 'Beijing'
    else:
        return 'I don\'t know'",Data Type,2972,"def answer_question(question):
    if question == 'What is the capital of China?':
        return 'Beijing'
    else:
        return 'I don\'t know'","    ___
    ___
        return 'Beijing'
    else:
        return 'I don\'t know'"
Implement a Python program that takes an input string and returns the first character that appears more than once in that string.,"input_string = ""programming""","def find_duplicate_char(input_string):
 char_count = {}
 for char in input_string:
  if char in char_count:
   return char
  else:
   char_count[char] = 1
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'",Data Type,2980,"def find_duplicate_char(input_string):
 char_count = {}
 for char in input_string:
  if char in char_count:
   return char
  else:
   char_count[char] = 1
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'","    ___
 char_count = {}
    ___
    ___
   return char
  else:
   char_count[char] = 1
 return 'No duplicates found'

input_string = ""programming""
print(find_duplicate_char(input_string))

# Output:
# 'r'"
Build a function in Python to test whether a string is a palindrome.,"""aba""","def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")",Data Type,2996,"def is_palindrome(s): 
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    if (s == rev): 
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
if ans == 1: 
    print(""Yes"") 
else: 
    print(""No"")","    ___
    # Reverse the string 
    rev = s[::-1] 
  
    # Check if the string is equal to its reverse 
    ___
        return True
    return False
  
# Driver code 
s = ""aba""
ans = is_palindrome(s) 
  
    ___
    print(""Yes"") 
else: 
    print(""No"")"
Create a program using Python to classify the type of company an advertising company can be.,"The advertising company can be classified into the following types: Automotive, Food & Beverage, Finance, Technology, and Others.","def classify_company(company):
 if company in [""AUTOMOTIVE"", ""FOOD & BEVERAGE"", ""FINANCE"", ""TECHNOLOGY""]:
 return company
 else:
 return ""OTHER""",Data Type,3006,"def classify_company(company):
 if company in [""AUTOMOTIVE"", ""FOOD & BEVERAGE"", ""FINANCE"", ""TECHNOLOGY""]:
 return company
 else:
 return ""OTHER""","    ___
    ___
 return company
 else:
 return ""OTHER"""
Write a Python program to insert a given string at the beginning of all items in a list.,"mylist=[""one"",""two"",""three""]","# Insert the given string at the beginning of all list items 
new_list = [""prefix_"" + item for item in mylist]

# Print the new list 
print(new_list) # Output: [""prefix_one"", ""prefix_two"", ""prefix_three""]",Data Type,3010,"# Insert the given string at the beginning of all list items 
new_list = [""prefix_"" + item for item in mylist]

# Print the new list 
print(new_list) # Output: [""prefix_one"", ""prefix_two"", ""prefix_three""]","# Insert the given string at the beginning of all list items 
new_list = [""prefix_"" + item for item in mylist]

# Print the new list 
print(new_list) # Output: [""prefix_one"", ""prefix_two"", ""prefix_three""]"
Write a Python code snippet to find the words which are at least 4 characters long in a given string.,"string = ""This is a sample sentence""","def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= 4:
            result.append(word)
    return result",Data Type,3023,"def find_words(string):
    words = string.split()
    result = []
    for word in words:
        if len(word) >= 4:
            result.append(word)
    return result","    ___
    words = string.split()
    result = []
    ___
    ___
            result.append(word)
    return result"
Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another.,"""ABACD"", ""CDABA""","def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))",Data Type,3037,"def is_rotation(s1, s2):
    if len(s1) != len(s2):
        return False
    
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))","    ___
    ___
        return False
    
    s1s1 = s1 + s1
    ___
        return True
    return False

print(is_rotation(""ABACD"", ""CDABA""))"
Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides.,"8, 8, 12","a = 8
b = 8
c = 12

if a == b and b == c:
    print(""Equilateral triangle"")
elif a == b or b == c or a == c:
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")",Data Type,3042,"a = 8
b = 8
c = 12

if a == b and b == c:
    print(""Equilateral triangle"")
elif a == b or b == c or a == c:
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")","a = 8
b = 8
c = 12

    ___
    print(""Equilateral triangle"")
    ___
    print(""Isosceles triangle"")
else:
    print(""Scalene triangle"")"
Create a Python program to reverse a string.,Hello,"def reverse_string(string):
    reversed_string = """"
    for c in string:
        reversed_string = c + reversed_string
    return reversed_string

string = ""Hello""
print(reverse_string(string))",Data Type,3053,"def reverse_string(string):
    reversed_string = """"
    for c in string:
        reversed_string = c + reversed_string
    return reversed_string

string = ""Hello""
print(reverse_string(string))","    ___
    reversed_string = """"
    ___
        reversed_string = c + reversed_string
    return reversed_string

string = ""Hello""
print(reverse_string(string))"
Create a solution that detects the presence of a character in a string.,Python,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))",Data Type,3058,"def detect_character(string, char):
    for ch in string:
        if ch == char:
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))","    ___
    ___
    ___
            return True
    return False

string = 'Python'
char = 'y'
print(detect_character(string, char))"
Create a Python program which takes in a string of text and returns all the unique words in the string.,"""Hello, my name is John""","def find_unique_words(string):
    return set(string.split())",Data Type,3066,"def find_unique_words(string):
    return set(string.split())","    ___
    return set(string.split())"
"Create a function in Python that takes a list of strings and a value, and returns a new list of the strings with the value preprended to each string.","List = [""one"", ""two"", ""three""]
Value = ""STR-""","def prepend_list(List, Value):
    return [Value + Value for Value in List]
  
List = [""one"", ""two"", ""three""]
Value = ""STR-""
print (prepend_list(List, Value))

# Output: ['STR-one', 'STR-two', 'STR-three']",Data Type,3074,"def prepend_list(List, Value):
    return [Value + Value for Value in List]
  
List = [""one"", ""two"", ""three""]
Value = ""STR-""
print (prepend_list(List, Value))

# Output: ['STR-one', 'STR-two', 'STR-three']","    ___
    return [Value + Value for Value in List]
  
List = [""one"", ""two"", ""three""]
Value = ""STR-""
print (prepend_list(List, Value))

# Output: ['STR-one', 'STR-two', 'STR-three']"
Write a Python script to search for a specific word in a given string.,The quick brown fox,"import re 
  
def searchWord(string, word): 
    return re.search(word, string)
  
result = searchWord(""The quick brown fox"", ""brown"") 
if result is not None:
    print(""Word found"")
else:
    print(""Word not found"")",Data Type,3076,"import re 
  
def searchWord(string, word): 
    return re.search(word, string)
  
result = searchWord(""The quick brown fox"", ""brown"") 
if result is not None:
    print(""Word found"")
else:
    print(""Word not found"")","import re 
  
    ___
    return re.search(word, string)
  
result = searchWord(""The quick brown fox"", ""brown"") 
    ___
    print(""Word found"")
else:
    print(""Word not found"")"
Design a program in Python that converts a text string to a titlecase.,"str = ""Hello World""","def to_titlecase(str):
    new_str = """"
    for word in str.split(): 
        new_str += word.capitalize() + "" ""
    return new_str.strip()

print(to_titlecase(""Hello World""))",Data Type,3079,"def to_titlecase(str):
    new_str = """"
    for word in str.split(): 
        new_str += word.capitalize() + "" ""
    return new_str.strip()

print(to_titlecase(""Hello World""))","    ___
    new_str = """"
    ___
        new_str += word.capitalize() + "" ""
    return new_str.strip()

print(to_titlecase(""Hello World""))"
"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not.","haystack: ""This is a string"" 
needle: ""is""","def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False",Data Type,3084,"def contains_substring(haystack, needle): 
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False","    ___
 return needle in haystack

# Usage example
contains_substring(""This is a string"", ""is"") # returns True 
contains_substring(""This is a string"", ""xyz"") # returns False"
Create a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary.,"dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""","def checkKeyExists(dictionary, key):
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""

print(checkKeyExists(dict, String))",Data Type,3088,"def checkKeyExists(dictionary, key):
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""

print(checkKeyExists(dict, String))","    ___
    return key in dictionary.keys()

dict = {
    ""Name"":""John"",
    ""Age"":25
}
String = ""Name""

print(checkKeyExists(dict, String))"
Create a python script which replaces each letter in a string by the letter which appears n positions after it.,"string = ""abcdef""
n = 2","def replace_letter(string, n):
    result = """"
    for char in string:
        if char == 'z':
            result += 'b'
        elif char == 'Z':
            result += 'B'
        else:
            result += chr(ord(char) + n)
    
    return result",Data Type,3092,"def replace_letter(string, n):
    result = """"
    for char in string:
        if char == 'z':
            result += 'b'
        elif char == 'Z':
            result += 'B'
        else:
            result += chr(ord(char) + n)
    
    return result","    ___
    result = """"
    ___
    ___
            result += 'b'
    ___
            result += 'B'
        else:
            result += chr(ord(char) + n)
    
    return result"
Write code in Python to count the number of distinct substrings for a given string.,string = “abcd”,"def count_distinct_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)",Data Type,3094,"def count_distinct_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)","    ___
    count = 0
    ___
    ___
            count += 1
    return count

result = count_distinct_substrings(""abcd"")
print(result)"
Build a Python program that extracts all email addresses from a given string.,"""This is an example with two emails: john@example.com, and jane@example.com""","import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)",Data Type,3105,"import re

def find_emails(text):
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)","import re

    ___
    regex = r""([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)""
    emails = re.findall(regex, text)
    return emails

emails = find_emails(""This is an example with two emails: john@example.com, and jane@example.com"")
print(emails)"
Out put the first 3 characters of a given string.,Python,"string = ""Python""

print(string[:3])",Data Type,3110,"string = ""Python""

print(string[:3])","string = ""Python""

print(string[:3])"
Create a python program for creating a dictionaries of char count in a given string.,"string = ""Hello World""","def get_char_count(s):
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    for char in s:
        if char not in char_count.keys():
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count",Data Type,3115,"def get_char_count(s):
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    for char in s:
        if char not in char_count.keys():
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count","    ___
    """"""
    This function returns a dictionary of character count in a given string.
    :param s: string
    :return: dictionary
    """"""
    char_count = dict()
    ___
    ___
            char_count[char] = 1
        else:
            char_count[char] += 1
    return char_count"
Develop a function to delete duplicates from a given string in Python.,"string=""mississippi""","def remove_duplicates(string):
    new_string = """"
    for char in string:
        if char not in new_string:
            new_string += char
    return new_string

no_duplicates = remove_duplicates(""mississippi"")
print(no_duplicates)",Data Type,3118,"def remove_duplicates(string):
    new_string = """"
    for char in string:
        if char not in new_string:
            new_string += char
    return new_string

no_duplicates = remove_duplicates(""mississippi"")
print(no_duplicates)","    ___
    new_string = """"
    ___
    ___
            new_string += char
    return new_string

no_duplicates = remove_duplicates(""mississippi"")
print(no_duplicates)"
Write a function in Python that takes a list of words as an argument and outputs a string of comma separated words.,"words = ['cat', 'dog', 'bird']","def listToString(words):
 return ', '.join(words)",Data Type,3122,"def listToString(words):
 return ', '.join(words)","    ___
 return ', '.join(words)"
Generate a Python function that takes a list of strings and returns a dictionary with each string as the key and the length of the string as the value.,"['one', 'two', 'three', 'four']","def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}",Data Type,3133,"def count_lengths(strings):
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}","    ___
  return {string : len(string) for string in strings}

strings = ['one', 'two', 'three', 'four']

print(count_lengths(strings))
# Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}"
Create a program in Python to to compute the sum of all the numbers present in a given string.,string = 'The sum of 5 and 9 is 14',"def sum_of_numbers_in_string(string):
    number_list = []
    for word in string.split(' '):
        if word.isdigit():
            number_list.append(int(word))

    return sum(number_list)",Data Type,3139,"def sum_of_numbers_in_string(string):
    number_list = []
    for word in string.split(' '):
        if word.isdigit():
            number_list.append(int(word))

    return sum(number_list)","    ___
    number_list = []
    ___
    ___
            number_list.append(int(word))

    return sum(number_list)"
Can you write a Python3 program to calculate the number of times a character appears in a given string?,"""Hello World!""","str1 = ""Hello World!""

char = 'l'
count = 0

for i in str1:
     if i == char:
          count = count + 1

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')",Data Type,3148,"str1 = ""Hello World!""

char = 'l'
count = 0

for i in str1:
     if i == char:
          count = count + 1

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')","str1 = ""Hello World!""

char = 'l'
count = 0

    ___
    ___
          count = count + 1

# Print the result 
print (f'The character {char} appears {count} times in the string {str1}')"
Convert a given list of integers to a string in Python.,"[56, 23, 7]","def list_to_string(int_list):
  return ' '.join(str(x) for x in int_list)

int_list = [56, 23, 7]
print(list_to_string(int_list))",Data Type,3149,"def list_to_string(int_list):
  return ' '.join(str(x) for x in int_list)

int_list = [56, 23, 7]
print(list_to_string(int_list))","    ___
  return ' '.join(str(x) for x in int_list)

int_list = [56, 23, 7]
print(list_to_string(int_list))"
Generate a Python method to format a given string in the desired manner.,"""I am learning python""","def format_string(string):
  return string.lower().title()",Data Type,3150,"def format_string(string):
  return string.lower().title()","    ___
  return string.lower().title()"
"Given two strings, write a python function to check whether one string is a substring of another.","String1 = ""abc""
String2 = ""abcdef""","def is_substring(string1, string2): 
    if string1 in string2:
        return True
    else:
        return False",Data Type,3156,"def is_substring(string1, string2): 
    if string1 in string2:
        return True
    else:
        return False","    ___
    ___
        return True
    else:
        return False"
Design an algorithm in Python to convert a binary string into its decimal representation.,"""1010""","def binaryToDecimals(binary_number):
  decimal = 0
  for i, digit in enumerate(reversed(binary_number)):
    decimal += int(digit) * (2**i)
  return decimal

print (binaryToDecimals(""1010""))  # Output 10",Data Type,3157,"def binaryToDecimals(binary_number):
  decimal = 0
  for i, digit in enumerate(reversed(binary_number)):
    decimal += int(digit) * (2**i)
  return decimal

print (binaryToDecimals(""1010""))  # Output 10","    ___
  decimal = 0
    ___
    decimal += int(digit) * (2**i)
  return decimal

print (binaryToDecimals(""1010""))  # Output 10"
Write a function in Python that takes a single string argument and prints it out in reverse.,"""Hello World!""","def printReverseString(in_str): 
  
    reversed_str = in_str[::-1] 
    print(reversed_str) 

printReverseString(""Hello World!"")",Data Type,3161,"def printReverseString(in_str): 
  
    reversed_str = in_str[::-1] 
    print(reversed_str) 

printReverseString(""Hello World!"")","    ___
  
    reversed_str = in_str[::-1] 
    print(reversed_str) 

printReverseString(""Hello World!"")"
Write a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string.,"['foo', 'bar', 'baz']","def list_to_tuples(words):
    # create an empty list
    result = []

    # create a tuple for each string
    for word in words:
        result.append((word, len(word)))
    
    return result

result = list_to_tuples(['foo', 'bar', 'baz'])
print(result)",Data Type,3169,"def list_to_tuples(words):
    # create an empty list
    result = []

    # create a tuple for each string
    for word in words:
        result.append((word, len(word)))
    
    return result

result = list_to_tuples(['foo', 'bar', 'baz'])
print(result)","    ___
    # create an empty list
    result = []

    # create a tuple for each string
    ___
        result.append((word, len(word)))
    
    return result

result = list_to_tuples(['foo', 'bar', 'baz'])
print(result)"
Can you convert a given dictionary into a string using Python?,"{""foo"": ""bar"", ""hello"": ""world""}","dictionary_string = str({""foo"": ""bar"", ""hello"": ""world""})",Data Type,3181,"dictionary_string = str({""foo"": ""bar"", ""hello"": ""world""})","dictionary_string = str({""foo"": ""bar"", ""hello"": ""world""})"
Develop a function to search for a character into a given string and return its index if present.,"String: Python
Character: y","#function to search for a character
def search_char(str, char):
	idx = -1
	for i in range(len(str)):
		if str[i] == char:
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
if index != -1:
	print('Character found at index:', index)
else:
	print('Character not found')",Data Type,3190,"#function to search for a character
def search_char(str, char):
	idx = -1
	for i in range(len(str)):
		if str[i] == char:
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
if index != -1:
	print('Character found at index:', index)
else:
	print('Character not found')","#function to search for a character
    ___
	idx = -1
    ___
    ___
			idx = i
			break
	return idx
    
#call the function
str = 'Python'
char = 'y'

index = search_char(str, char)
#print the result
    ___
	print('Character found at index:', index)
else:
	print('Character not found')"
Generate a script in python to split a given string into words and store them in a list.,"str = ""This is a great day""","def split_str(str):
    words = str.split("" "")
    return words",Data Type,3204,"def split_str(str):
    words = str.split("" "")
    return words","    ___
    words = str.split("" "")
    return words"
Write a Python program to generate all possible strings by rearranging the characters of a given string.,"String = ""ABC""","def generate_all_strings(string):
   if len(string) == 1: 
       return [string]
    result = []
    for i, letter in enumerate(string):
        for permutation in generate_all_strings(string[:i] + string[i+1:]):
            result += [letter + permutation]
    return result",Data Type,3212,"def generate_all_strings(string):
   if len(string) == 1: 
       return [string]
    result = []
    for i, letter in enumerate(string):
        for permutation in generate_all_strings(string[:i] + string[i+1:]):
            result += [letter + permutation]
    return result","    ___
    ___
       return [string]
    result = []
    ___
    ___
            result += [letter + permutation]
    return result"
Create a function in Python for converting currencies from one type to another.,"currency_from = 'USD'
currency_to = 'EUR'
exchange_rate = 0.9","def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9",Data Type,3219,"def convert_currencies(currency_from, currency_to, exchange_rate):
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9","    ___
 return currency_fit * exchange_rate 

c = convert_currencies('USD', 'EUR', 0.9)
print(c) # Output: 0.9"
Write a python program to detect the occurrence of a given string in another large string.,"String 1: ""This is a test.""
String 2: ""test""","def str_find(str1, str2):
    return str1.find(str2) != -1

str_find(""This is a test."", ""test"")",Data Type,3224,"def str_find(str1, str2):
    return str1.find(str2) != -1

str_find(""This is a test."", ""test"")","    ___
    return str1.find(str2) != -1

str_find(""This is a test."", ""test"")"
Generate a correct python program that reverses a string,"string = ""Hello""","def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string",Data Type,3225,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string","    ___
    reversed_string = """"
    ___
        reversed_string = char + reversed_string
    return reversed_string"
Identify the type of object a Python expression will evaluate to.,expression = 8 + 5,Integer.,Data Type,3226,Integer.,Integer.
Write a Python program to turn a string into Pig Latin.,"string = ""Hello World""","def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[0] in vowels:
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))",Data Type,3233,"def toPigLatin(s):
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
   if s[0] in vowels:
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))","    ___
   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')
    ___
      return s + 'way'
   else:
      return s[1:] + s[0] + 'ay'
      
print(toPigLatin(""Hello World""))"
Write a Python program to convert a query string into a dictionary.,"queryString = ""country=usa&city=ny&lang=en&temp=77""","queryString = ""country=usa&city=ny&lang=en&temp=77""

queryDict = {}

for keyValueString in queryString.split('&'):
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}",Data Type,3242,"queryString = ""country=usa&city=ny&lang=en&temp=77""

queryDict = {}

for keyValueString in queryString.split('&'):
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}","queryString = ""country=usa&city=ny&lang=en&temp=77""

queryDict = {}

    ___
 key, value = keyValueString.split('=')
 queryDict[key] = value

print(queryDict)
# Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}"
Generate a JSON string from a Python dict object.,"dict_object = { 'name': 'John Doe', 'age': 40 }","import json

json_obj = json.dumps(dict_object)",Data Type,3246,"import json

json_obj = json.dumps(dict_object)","import json

json_obj = json.dumps(dict_object)"
"Write a Python program that parses and prints the value of the ""name"" field in a json string.","json_string = '{""name"":""John"", ""age"":20, ""city"":""San Fransisco""}'","import json

data = json.loads(json_string)

print(data['name'])

# Output: John",Data Type,3260,"import json

data = json.loads(json_string)

print(data['name'])

# Output: John","import json

data = json.loads(json_string)

print(data['name'])

# Output: John"
Write a Python program to insert a given string at the beginning of all items in a list.,"my_list = [""hello"", ""world"", ""python""]
prefix = ""Programming - ""","my_list = [""hello"", ""world"", ""python""]
prefix = ""Programming - ""

# Insert the prefix to all items in the list
new_list = [prefix + item for item in my_list]

print(new_list)",Data Type,3263,"my_list = [""hello"", ""world"", ""python""]
prefix = ""Programming - ""

# Insert the prefix to all items in the list
new_list = [prefix + item for item in my_list]

print(new_list)","my_list = [""hello"", ""world"", ""python""]
prefix = ""Programming - ""

# Insert the prefix to all items in the list
new_list = [prefix + item for item in my_list]

print(new_list)"
Generate a Python program to implement the following feature: Search a phrase in a given string.,"Search the phrase ""to be or not to be"" in the string ""Whether 'tis nobler in the mind to suffer"".","def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)",Data Type,3269,"def search(phrase, string):
  if phrase in string:
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)","    ___
    ___
     return True 
  else:
     return False 

result = search(""to be or not to be"", ""Whether 'tis nobler in the mind to suffer"")
print(result)"
Create a Python program to generate all the permutations of a string using backtracking.,ABC,"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+1):
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)",Data Type,3272,"def permute(s, l, r):
 if l == r:
  print(''.join(s))
 else:
  for i in range(l, r+1):
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

def generate_all_permutations(s):
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)","    ___
    ___
  print(''.join(s))
 else:
    ___
   s[l], s[i] = s[i], s[l]
   permute(s, l + 1, r)
   s[l], s[i] = s[i], s[l] 

    ___
 n = len(s)
 permute(list(s), 0, n-1)

s = 'ABC'
generate_all_permutations(s)"
Create an algorithm and its corresponding code implementation in Python that counts the number of words in a string.,This is a sentence,"def word_count(string):
 words = string.split()
 return len(words)

print(word_count(""This is a sentence""))",Data Type,3274,"def word_count(string):
 words = string.split()
 return len(words)

print(word_count(""This is a sentence""))","    ___
 words = string.split()
 return len(words)

print(word_count(""This is a sentence""))"
Suppose you are given a list of strings in Python. Write a function that takes the list of strings as input and prints out the first string that is longer than 10 characters.,"[""cat"", ""doggo"", ""elephant"", ""giraffe""]","def find_long_string(string_list):
    for string in string_list:
        if len(string) > 10:
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)",Data Type,3275,"def find_long_string(string_list):
    for string in string_list:
        if len(string) > 10:
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)","    ___
    ___
    ___
            print(string)
            break

string_list = [""cat"", ""doggo"", ""elephant"", ""giraffe""]
find_long_string(string_list)"
"Given a JSON string, write a Python program that prints out the values for each key.","{""FirstName"": ""John"", ""LastName"": ""Smith""}","import json

data_string = '{""FirstName"": ""John"", ""LastName"": ""Smith""}'
data = json.loads(data_string)

for key, value in data.items(): 
    print(""{} = {}"".format(key, value))",Data Type,3277,"import json

data_string = '{""FirstName"": ""John"", ""LastName"": ""Smith""}'
data = json.loads(data_string)

for key, value in data.items(): 
    print(""{} = {}"".format(key, value))","import json

data_string = '{""FirstName"": ""John"", ""LastName"": ""Smith""}'
data = json.loads(data_string)

    ___
    print(""{} = {}"".format(key, value))"
Create a Python program that takes two string as input and produces a new string as output. The output string is the concatenation of the two inputs with all the vowels removed.,"string1 = 'Hello World!'
string2 = 'This is a test.'","def remove_vowels(string1, string2):
  res = ''
  vowels = 'aeiouAEIOU'

  for char in string1 + string2:
    if char not in vowels:
      res += char
  
  return res

print(remove_vowels(string1, string2))",Data Type,3282,"def remove_vowels(string1, string2):
  res = ''
  vowels = 'aeiouAEIOU'

  for char in string1 + string2:
    if char not in vowels:
      res += char
  
  return res

print(remove_vowels(string1, string2))","    ___
  res = ''
  vowels = 'aeiouAEIOU'

    ___
    ___
      res += char
  
  return res

print(remove_vowels(string1, string2))"
Create a Python program to replace all vowels in a given string with a given character.,"string = ""replace all vowels""
character = '*'","def replace_vowels(s, c): 
    return s.translate(str.maketrans('aeiou', c*5))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls",Data Type,3288,"def replace_vowels(s, c): 
    return s.translate(str.maketrans('aeiou', c*5))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls","    ___
    return s.translate(str.maketrans('aeiou', c*5))

print(replace_vowels(string, character)) 

# Output: 
 r*pl*c* *ll v*w*ls"
Design a Python program that computes the reverse of a given string.,Hello,"def reverseString(s):
    return s[::-1]
 
s = ""Hello""
print(reverseString(s))",Data Type,3289,"def reverseString(s):
    return s[::-1]
 
s = ""Hello""
print(reverseString(s))","    ___
    return s[::-1]
 
s = ""Hello""
print(reverseString(s))"
Create a Python program to count the number of upper case and lower case letters in a given string,Hello World,"def countLetters(s): 
   uppercase, lowercase = 0, 0
   for x in s: 
      if x.islower(): 
         lowercase+= 1
      elif x.isupper(): 
         uppercase+= 1
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')",Data Type,3293,"def countLetters(s): 
   uppercase, lowercase = 0, 0
   for x in s: 
      if x.islower(): 
         lowercase+= 1
      elif x.isupper(): 
         uppercase+= 1
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')","    ___
   uppercase, lowercase = 0, 0
    ___
    ___
         lowercase+= 1
    ___
         uppercase+= 1
   print (""No. of Upper case characters : "", uppercase) 
   print (""No. of Lower case Characters : "", lowercase) 

countLetters('Hello World')"
Develop a Python program to determine the frequency of characters in an input string.,Input string: hello world,"def frequency(string):
 freq = {}
 for c in string:
 if c not in freq:
 freq[c] = 1
 else:
 freq[c] += 1
 return freq

string = input('Please enter your string: ')
print(frequency(string))",Data Type,3296,"def frequency(string):
 freq = {}
 for c in string:
 if c not in freq:
 freq[c] = 1
 else:
 freq[c] += 1
 return freq

string = input('Please enter your string: ')
print(frequency(string))","    ___
 freq = {}
    ___
    ___
 freq[c] = 1
 else:
 freq[c] += 1
 return freq

string = input('Please enter your string: ')
print(frequency(string))"
Create a function to find the number of times the given string appears in the array.,"Python, ""Python""","def count_occurrences(items, string):
  count = 0
  for item in items: 
    if item == string:
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: 2",Data Type,3299,"def count_occurrences(items, string):
  count = 0
  for item in items: 
    if item == string:
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: 2","    ___
  count = 0
    ___
    ___
      count += 1
  return count

print(count_occurrences(['Python', 'Python'], ""Python""))

# Output: 2"
Write a Python program for converting a decimal number into its corresponding binary string.,56,"def decimal_to_binary(n):
 binary_string = """"
 while n > 0:
 binary_string += str(n % 2)
 n //= 2
 return binary_string[::-1]

# Example
result = decimal_to_binary(5)
print(result) 

# Output
101",Data Type,3309,"def decimal_to_binary(n):
 binary_string = """"
 while n > 0:
 binary_string += str(n % 2)
 n //= 2
 return binary_string[::-1]

# Example
result = decimal_to_binary(5)
print(result) 

# Output
101","    ___
 binary_string = """"
    ___
 binary_string += str(n % 2)
 n //= 2
 return binary_string[::-1]

# Example
result = decimal_to_binary(5)
print(result) 

# Output
101"
Create a function in Python that takes two strings and combines the characters of each string keeping the order of the characters.,"foo
bar","def combine(s1, s2):
    result = """" 
    for i in range(max(len(s1), len(s2))):
        if i < len(s1):
            result += s1[i]
        if i < len(s2):
            result += s2[i]
    return result",Data Type,3322,"def combine(s1, s2):
    result = """" 
    for i in range(max(len(s1), len(s2))):
        if i < len(s1):
            result += s1[i]
        if i < len(s2):
            result += s2[i]
    return result","    ___
    result = """" 
    ___
    ___
            result += s1[i]
    ___
            result += s2[i]
    return result"
Write a function in Python to remove a specific character from a string.,"string = ""Hello World""
character = 'l'","def remove_character(string, character):
    return string.replace(character, '')

print(remove_character(string, character))",Data Type,3330,"def remove_character(string, character):
    return string.replace(character, '')

print(remove_character(string, character))","    ___
    return string.replace(character, '')

print(remove_character(string, character))"
Develop a Python program that encrypts a given string using 'Caeser Cipher',string = 'Hello World',"def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % 26
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)",Data Type,3356,"def caesarCipherEncryptor(string, key):
  newLetters = []
  newKey = key % 26
  for letter in string:
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
def getNewLetter(letter, key):
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)","    ___
  newLetters = []
  newKey = key % 26
    ___
   newLetters.append(getNewLetter(letter, newKey))
  return ''.join(newLetters)
 
    ___
   newLetterCode = ord(letter) + key
   return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)"
Create a Python program to reverse a string in place.,"""Hello World!""","def reverse_string_in_space(s): 
    temp_list = list(s) 
    start = 0
    end = len(temp_list) - 1
  
    while start < end: 
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += 1
        end -= 1
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))",Data Type,3368,"def reverse_string_in_space(s): 
    temp_list = list(s) 
    start = 0
    end = len(temp_list) - 1
  
    while start < end: 
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += 1
        end -= 1
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))","    ___
    temp_list = list(s) 
    start = 0
    end = len(temp_list) - 1
  
    ___
        temp_list[start], temp_list[end] = temp_list[end], temp_list[start] 
        start += 1
        end -= 1
  
    s = """".join(temp_list) 
      
    return s
  
s = ""Hello World!""
print(reverse_string_in_space(s))"
Design a Python program that prints out the reverse of a given string.,"String = ""Hello World""","def reverse_string(String):
    rev_str = """" 
    for i in String: 
        rev_str = i + rev_str
    return rev_str

print(reverse_string(""Hello World""))",Data Type,3375,"def reverse_string(String):
    rev_str = """" 
    for i in String: 
        rev_str = i + rev_str
    return rev_str

print(reverse_string(""Hello World""))","    ___
    rev_str = """" 
    ___
        rev_str = i + rev_str
    return rev_str

print(reverse_string(""Hello World""))"
Write a Python program that takes in a string of numbers delimited by spaces and returns the largest number.,64 8 224 54 21,"def findMax(string):
  numbers = string.split("" "")
  largest = 0
  
  for number in numbers:
    if number > largest:
      largest = number
      
  return largest
  
string = ""64 8 224 54 21""
print(f""The largest number is {findMax(string)}."")",Data Type,3382,"def findMax(string):
  numbers = string.split("" "")
  largest = 0
  
  for number in numbers:
    if number > largest:
      largest = number
      
  return largest
  
string = ""64 8 224 54 21""
print(f""The largest number is {findMax(string)}."")","    ___
  numbers = string.split("" "")
  largest = 0
  
    ___
    ___
      largest = number
      
  return largest
  
string = ""64 8 224 54 21""
print(f""The largest number is {findMax(string)}."")"
Write a script in Python to input a list of strings and convert it into a single string.,"[‘hello’, ‘world’]","# Convert list of strings into a single string
def list_to_string(lst):
    return ' '.join(lst)",Data Type,3385,"# Convert list of strings into a single string
def list_to_string(lst):
    return ' '.join(lst)","# Convert list of strings into a single string
    ___
    return ' '.join(lst)"
Create a Python program to split a given string into two parts according to a given character.,"Str = ""apple-banana-orange""
Char = ""-""","def split_string(s, char):
    new_list = s.split(char)
    return new_list

result = split_string(""apple-banana-orange"", ""-"")
print(result)",Data Type,3396,"def split_string(s, char):
    new_list = s.split(char)
    return new_list

result = split_string(""apple-banana-orange"", ""-"")
print(result)","    ___
    new_list = s.split(char)
    return new_list

result = split_string(""apple-banana-orange"", ""-"")
print(result)"
Write a code in Python to parse a JSON string.,"{
    ""name"": ""James"",
    ""age"": 27
}","import json

json_string = '{""name"": ""James"",""age"": 27}'
data = json.loads(json_string)
print(data[""name""], data[""age""])",Data Type,3398,"import json

json_string = '{""name"": ""James"",""age"": 27}'
data = json.loads(json_string)
print(data[""name""], data[""age""])","import json

json_string = '{""name"": ""James"",""age"": 27}'
data = json.loads(json_string)
print(data[""name""], data[""age""])"
Create a function in Python that can tell if a string is a palindrome or not.,civic,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)",Data Type,3406,"def is_palindrome(word):
    reversed_word = word[::-1]

    if word == reversed_word:
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)","    ___
    reversed_word = word[::-1]

    ___
        return True
    else:
        return False
        
result = is_palindrome('civic')
print(result)"
Generate a code for a Python program that removes all instances of a given character from a string.,"'Hello World!', 'o'","def remove_letter(word, letter):
    new_word = ''
    for char in word:
        if char != letter:
            new_word += char
    return new_word 

print(remove_letter('Hello World!', 'o'))",Data Type,3418,"def remove_letter(word, letter):
    new_word = ''
    for char in word:
        if char != letter:
            new_word += char
    return new_word 

print(remove_letter('Hello World!', 'o'))","    ___
    new_word = ''
    ___
    ___
            new_word += char
    return new_word 

print(remove_letter('Hello World!', 'o'))"
Create a Python script that will create a dictionary that contains the character count of the given string.,"""Python""","from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  str(res))",Data Type,3420,"from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  str(res))","from collections import Counter 
  
str = ""Python""

# character count 
# using collections.Counter() 
res = Counter(str) 

# printing result  
print(""Count of all characters in GeeksforGeeks is :\n ""
                                        +  str(res))"
Can you generate code to clear all whitespace from a given string in Python?,"Input String = "" Hello World    ""","def clear_whitespace(s):
        s = s.strip() # Remove leading and trailing whitespaces
        s = """".join(s.split()) # Remove middle whitespaces
        return s

print(clear_whitespace("" Hello World    ""))",Data Type,3421,"def clear_whitespace(s):
        s = s.strip() # Remove leading and trailing whitespaces
        s = """".join(s.split()) # Remove middle whitespaces
        return s

print(clear_whitespace("" Hello World    ""))","    ___
        s = s.strip() # Remove leading and trailing whitespaces
        s = """".join(s.split()) # Remove middle whitespaces
        return s

print(clear_whitespace("" Hello World    ""))"
Design a function in Python which takes a string and returns the string with the last word capitalized.,"mystring = ""This is a simple string""","def capitalize_last_word(mystring):
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)",Data Type,3426,"def capitalize_last_word(mystring):
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)","    ___
    words = mystring.split()
    words[-1] = words[-1].capitalize()
    return ' '.join(words)

result = capitalize_last_word(mystring)
print(result)"
Create a Python program that takes in a string and counts the number of vowels in it.,"""Hello""","def count_vowels(s):
    count = 0
    for char in s:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

s = ""Hello""
result = count_vowels(s)
print(result)",Data Type,3428,"def count_vowels(s):
    count = 0
    for char in s:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

s = ""Hello""
result = count_vowels(s)
print(result)","    ___
    count = 0
    ___
    ___
            count += 1
    return count

s = ""Hello""
result = count_vowels(s)
print(result)"
"Write a function in Python which takes two parameters, a string and a single character, and returns a count of occurrence of the single character in the string.","String = ""The quick brown fox""
Character = ""q""","def countOccurrence(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)",Data Type,3445,"def countOccurrence(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)","    ___
    count = 0
    ___
    ___
            count += 1
    return count

String = ""The quick brown fox""
Character = ""q""
count = countOccurrence(String, Character)
print(count)"
Create a Python function that prints a string in reverse order.,"""GPT-3""","def reverse_string(string): 
  return string[::-1] 
  
print(reverse_string(""GPT-3""))",Data Type,3448,"def reverse_string(string): 
  return string[::-1] 
  
print(reverse_string(""GPT-3""))","    ___
  return string[::-1] 
  
print(reverse_string(""GPT-3""))"
Construct a loop in Python that iterates over a given list of strings and prints each string.,"[""apple"", ""banana"", ""cherry""]","strings = [""apple"", ""banana"", ""cherry""]

for string in strings:
    print(string)",Data Type,3453,"strings = [""apple"", ""banana"", ""cherry""]

for string in strings:
    print(string)","strings = [""apple"", ""banana"", ""cherry""]

    ___
    print(string)"
Create a Python script that uses regular expressions to find all phone numbers in a string.,The following phone number should be found: (111) 111-1111,"import re

phone_string = ""(111) 111-1111""

phone_numbers = re.findall(r'\(?\d{3}\)?-?\s?\d{3}-\d{4}', phone_string)

for number in phone_numbers:
 print(number)
# Output: (111) 111-1111",Data Type,3467,"import re

phone_string = ""(111) 111-1111""

phone_numbers = re.findall(r'\(?\d{3}\)?-?\s?\d{3}-\d{4}', phone_string)

for number in phone_numbers:
 print(number)
# Output: (111) 111-1111","import re

phone_string = ""(111) 111-1111""

phone_numbers = re.findall(r'\(?\d{3}\)?-?\s?\d{3}-\d{4}', phone_string)

    ___
 print(number)
# Output: (111) 111-1111"
Create a script in Python to replace all occurrences of a character in a string with another character.,"string = ""This is an example""","def replace_char(string, char1, char2):
    new_string = """"
    for char in string:
        if char == char1:
            new_string += char2
        else:
            new_string += char
    return new_string

string = ""This is an example""
new_string = replace_char(string, ""s"", ""z"")
print(new_string)
# Output: Thiz iz an example",Data Type,3472,"def replace_char(string, char1, char2):
    new_string = """"
    for char in string:
        if char == char1:
            new_string += char2
        else:
            new_string += char
    return new_string

string = ""This is an example""
new_string = replace_char(string, ""s"", ""z"")
print(new_string)
# Output: Thiz iz an example","    ___
    new_string = """"
    ___
    ___
            new_string += char2
        else:
            new_string += char
    return new_string

string = ""This is an example""
new_string = replace_char(string, ""s"", ""z"")
print(new_string)
# Output: Thiz iz an example"
Create a python script that outputs the following string,My favorite color is blue.,print('My favorite color is blue.'),Data Type,3474,print('My favorite color is blue.'),print('My favorite color is blue.')
Provide a type definition for the following class in Python.,"class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age","from typing import NamedTuple

class Student(NamedTuple):
    name: str
    age: int",Data Type,3488,"from typing import NamedTuple

class Student(NamedTuple):
    name: str
    age: int","from typing import NamedTuple

class Student(NamedTuple):
    name: str
    age: int"
"In Python, generate a function to extract data from a MySQL table, given a query string.","query_string = ""SELECT * FROM student WHERE course='Python'""","def extract_data_from_mysql(query_string):
    conn = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""password"", database=""student"")
    
    cursor = conn.cursor()
    cursor.execute(query_string)
    
    result = cursor.fetchall()
    
    conn.close()
    
    return result",Data Type,3492,"def extract_data_from_mysql(query_string):
    conn = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""password"", database=""student"")
    
    cursor = conn.cursor()
    cursor.execute(query_string)
    
    result = cursor.fetchall()
    
    conn.close()
    
    return result","    ___
    conn = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""password"", database=""student"")
    
    cursor = conn.cursor()
    cursor.execute(query_string)
    
    result = cursor.fetchall()
    
    conn.close()
    
    return result"
"Given a string which humans can read, write a Python program to create a list that contains all the words in the string in reverse order","input_string = ""I love to write code""","input_words = input_string.split()
output_words = [word[::-1] for word in input_words]
print(output_words)",Data Type,3502,"input_words = input_string.split()
output_words = [word[::-1] for word in input_words]
print(output_words)","input_words = input_string.split()
output_words = [word[::-1] for word in input_words]
print(output_words)"
Make a program that finds the reverse of a string in Python.,Hello World,"def reverse(s): 
    return s[::-1] 

reverse(""Hello World"")",Data Type,3504,"def reverse(s): 
    return s[::-1] 

reverse(""Hello World"")","    ___
    return s[::-1] 

reverse(""Hello World"")"
Define a function in Python that takes two strings and returns a new string which is the concatenation of the two.,"""Hello"" and ""World""","def concatenate_two_strings(str_1, str_2):
    return str_1 + str_2

conc_str = concatenate_two_strings(""Hello"", "" World"")
print(conc_str)",Data Type,3518,"def concatenate_two_strings(str_1, str_2):
    return str_1 + str_2

conc_str = concatenate_two_strings(""Hello"", "" World"")
print(conc_str)","    ___
    return str_1 + str_2

conc_str = concatenate_two_strings(""Hello"", "" World"")
print(conc_str)"
Generate a python script that replaces each character in a string with its reverse:,string = 'Hello World',"def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    for i in range(n):
        revString[n-i-1] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))",Data Type,3519,"def reverseString(string):
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    for i in range(n):
        revString[n-i-1] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))","    ___
    n = len(string) 
    # create an empty array
    revString = [0 for i in range(n)] 
  
    ___
        revString[n-i-1] = string[i] 
  
    return ""("" + ''.join(revString) + "")""
print(reverseString(""Hello World""))"
What Python code can you create to remove the second character from a given string?,"string = ""example""","removed_string = string[:1] + string[2:]
print(removed_string) # ""xample""",Data Type,3521,"removed_string = string[:1] + string[2:]
print(removed_string) # ""xample""","removed_string = string[:1] + string[2:]
print(removed_string) # ""xample"""
Create a serverless API in Python that takes a text string as input and returns the associated Wikipedia page for the text.,Text String: Python programming language,"import wikipedia

def get_wiki_page(query):
 try:
 page = wikipedia.page(query)
 except:
 return None
 
 return page.content",Data Type,3525,"import wikipedia

def get_wiki_page(query):
 try:
 page = wikipedia.page(query)
 except:
 return None
 
 return page.content","import wikipedia

    ___
 try:
 page = wikipedia.page(query)
 except:
 return None
 
 return page.content"
Create a python program to remove all characters in a string that occur more than once,"string = ""aaabbcdefg""","def remove_duplicates(string):
    unique_chars = """"
    for ch in string:
        if ch not in unique_chars:
            unique_chars += ch

    return unique_chars

remove_duplicates(""aaabbcdefg"") # returns ""bcdefg""",Data Type,3527,"def remove_duplicates(string):
    unique_chars = """"
    for ch in string:
        if ch not in unique_chars:
            unique_chars += ch

    return unique_chars

remove_duplicates(""aaabbcdefg"") # returns ""bcdefg""","    ___
    unique_chars = """"
    ___
    ___
            unique_chars += ch

    return unique_chars

remove_duplicates(""aaabbcdefg"") # returns ""bcdefg"""
Create a function in Python that takes a list of strings and replaces each string with its length.,"[""apple"", ""banana"", ""mango""]","def length_strings(string_list):
  new_list = []
  for string in string_list:
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [5, 6, 5]",Data Type,3534,"def length_strings(string_list):
  new_list = []
  for string in string_list:
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [5, 6, 5]","    ___
  new_list = []
    ___
    new_list.append(len(string))
  return new_list

print(length_strings([""apple"", ""banana"", ""mango""])) # [5, 6, 5]"
Design a program to reverse a given string.,Python,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))",Data Type,3536,"def reverse_string(input_string):
    reversed_string = """"
    for i in range(len(input_string)-1, -1, -1):
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))","    ___
    reversed_string = """"
    ___
        reversed_string += input_string[i]
    return reversed_string

input_string = ""Python""

print(reverse_string(input_string))"
Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.,"'waterbottle', 'erbottlewat'","def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')",Data Type,3541,"def is_rotation(str1, str2):
    if len(str1) == len(str2) and len(str1) > 0:
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')","    ___
    ___
        return (str1 + str1).find(str2) != -1
    return False
    
is_rotation('waterbottle', 'erbottlewat')"
"Generate an algorithm in Python that given a string of words, should check if it is a Palindrome.","""racecar""","def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True",Data Type,3563,"def isPalindrome(s):
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True","    ___
 s = s.lower()
 
 left = 0
 right = len(s) - 1
 
    ___
    ___
 return False
 left += 1
 right -= 1
 
 return True

s = 'racecar'
isPalindrome = isPalindrome(s)

print(isPalindrome) # Output: True"
Create a function in Python that takes a string of any length and capitalizes every word.,'hello world',"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)

# Usage

print(capitalize_words('hello world')) # Hello World",Data Type,3568,"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)

# Usage

print(capitalize_words('hello world')) # Hello World","    ___
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)

# Usage

print(capitalize_words('hello world')) # Hello World"
Implement a Python program that takes in a string and prints out the ASCII codes for each character in the string.,"""Hello""","def get_ascii_codes(string):
    ascii_codes = [] 
  
    for char in string: 
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [72, 101, 108, 108, 111]",Data Type,3574,"def get_ascii_codes(string):
    ascii_codes = [] 
  
    for char in string: 
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [72, 101, 108, 108, 111]","    ___
    ascii_codes = [] 
  
    ___
        ascii_codes.append(ord(char)) 
  
    return ascii_codes 


print(get_ascii_codes(""Hello""))

# Output: [72, 101, 108, 108, 111]"
Modify the following Python code to detect and remove punctuation from a given string.,"my_string = 'Hello, world!'","my_string = 'Hello, world!'
punctuation = '!,.'
for char in my_string: 
 if char in punctuation: 
 my_string = my_string.replace(char, """")

print(my_string)
# Output: Hello world",Data Type,3575,"my_string = 'Hello, world!'
punctuation = '!,.'
for char in my_string: 
 if char in punctuation: 
 my_string = my_string.replace(char, """")

print(my_string)
# Output: Hello world","my_string = 'Hello, world!'
punctuation = '!,.'
    ___
    ___
 my_string = my_string.replace(char, """")

print(my_string)
# Output: Hello world"
"Given a list of strings, write a Python program to search for a string and return its index.","myList = [""a"", ""b"", ""c"", ""d"", ""e""]","def find_string(search_string, myList):
    for index, s in enumerate(myList):
        if s == search_string:
            return index",Data Type,3578,"def find_string(search_string, myList):
    for index, s in enumerate(myList):
        if s == search_string:
            return index","    ___
    ___
    ___
            return index"
Compose a Python program that takes a list of strings and checks if each string length is 2 or more.,"['dog', 'cat', 'mouse', 'snake', 'python', 'go']","def isStringLengthMoreThanTwo(list): 
    new_list = [] 
  
    for string in list:
        if len(string) >= 2: 
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))",Data Type,3587,"def isStringLengthMoreThanTwo(list): 
    new_list = [] 
  
    for string in list:
        if len(string) >= 2: 
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))","    ___
    new_list = [] 
  
    ___
    ___
            new_list.append(string) 
     
    return new_list
  
# Driver Code 
list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go']
print(isStringLengthMoreThanTwo(list))"
Create a Python program that takes a string and returns a new string with the first letter of each word capitalized.,"""my name is john""","def capitalize_words(string): 
    words = string.split(' ') 
    capitalized_words = [word.capitalize() for word in words] 
    return ' '.join(capitalized_words)",Data Type,3588,"def capitalize_words(string): 
    words = string.split(' ') 
    capitalized_words = [word.capitalize() for word in words] 
    return ' '.join(capitalized_words)","    ___
    words = string.split(' ') 
    capitalized_words = [word.capitalize() for word in words] 
    return ' '.join(capitalized_words)"
Generate a code snippet to convert the given JSON string to a dictionary in Python.,"json_str = '{ ""name"" : ""John"", ""age"" : 20, ""city"" : ""New York"" }'","import json

json_dict = json.loads(json_str)",Data Type,3593,"import json

json_dict = json.loads(json_str)","import json

json_dict = json.loads(json_str)"
"Write a string slicing function in Python that takes a string and start and end index, and return the slice.","string = ""This is a slicing test""
start = 8
end = 15","def slicing(string, start, end):
    return string[start:end]
    
print(slicing(string, start, end))",Data Type,3600,"def slicing(string, start, end):
    return string[start:end]
    
print(slicing(string, start, end))","    ___
    return string[start:end]
    
print(slicing(string, start, end))"
Create a Python script that searches the string for a given pattern and returns the starting position.,"""Hello world""","def find_pattern_position(string, pattern):
    for i in range(len(string) - len(pattern) + 1):
        if string[i:i+len(pattern)] == pattern:
            return i
    else:
        return -1

position = find_pattern_position(""Hello world"", ""world"")
print(position)",Data Type,3601,"def find_pattern_position(string, pattern):
    for i in range(len(string) - len(pattern) + 1):
        if string[i:i+len(pattern)] == pattern:
            return i
    else:
        return -1

position = find_pattern_position(""Hello world"", ""world"")
print(position)","    ___
    ___
    ___
            return i
    else:
        return -1

position = find_pattern_position(""Hello world"", ""world"")
print(position)"
Generate a Python program that finds all palindromes in a given string.,"input_str = ""madamabcdcba""","input_str = ""madamabcdcba""

def find_palindromes(input_str):
 palindromes = []
 for i in range(len(input_str)):
  for j in range(i+1, len(input_str)):
   curr_str = input_str[i:j+1]
   if curr_str == curr_str[::-1]:
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']",Data Type,3605,"input_str = ""madamabcdcba""

def find_palindromes(input_str):
 palindromes = []
 for i in range(len(input_str)):
  for j in range(i+1, len(input_str)):
   curr_str = input_str[i:j+1]
   if curr_str == curr_str[::-1]:
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']","input_str = ""madamabcdcba""

    ___
 palindromes = []
    ___
    ___
   curr_str = input_str[i:j+1]
    ___
    palindromes.append(curr_str)
 return palindromes

print(find_palindromes(input_str))

# Output: ['madam', 'aba', 'bcdbcd', 'cba']"
Write down logic to generate all permutations of a given string in Python.,"String = ""ABC""","def permutations(str): 
    ans = []
    if len(str) == 1: 
        ans = [str] 
    else: 
        for i, letter in enumerate(str):
            for perm in permutations(str[:i] + str[i+1:]):
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))",Data Type,3606,"def permutations(str): 
    ans = []
    if len(str) == 1: 
        ans = [str] 
    else: 
        for i, letter in enumerate(str):
            for perm in permutations(str[:i] + str[i+1:]):
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))","    ___
    ans = []
    ___
        ans = [str] 
    else: 
    ___
    ___
                ans += [letter + perm]
    return ans

print (permutations(""ABC""))"
Write a Python function to remove duplicate characters from a string.,"InputString=""tree traversal""","def remove_duplicate_characters(string): 
 result = """" 
  
 for i in range(len(string)): 
  if string[i] not in result: 
   result += string[i] 
  
 return result 
  
print(remove_duplicate_characters(""tree traversal""))",Data Type,3611,"def remove_duplicate_characters(string): 
 result = """" 
  
 for i in range(len(string)): 
  if string[i] not in result: 
   result += string[i] 
  
 return result 
  
print(remove_duplicate_characters(""tree traversal""))","    ___
 result = """" 
  
    ___
    ___
   result += string[i] 
  
 return result 
  
print(remove_duplicate_characters(""tree traversal""))"
Generate a python program for creating a function to take a list of strings as input and return the longest string,"list of strings: ['hello', 'world', 'this', 'is', 'awesome']","def find_longest_string(arr):
    longest = arr[0]
    for string in arr:
        if len(string) > len(longest):
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)",Data Type,3640,"def find_longest_string(arr):
    longest = arr[0]
    for string in arr:
        if len(string) > len(longest):
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)","    ___
    longest = arr[0]
    ___
    ___
            longest = string
    return longest

result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome'])
print(result)"
Create a Python function to replace a specific character in a string?,"string = ""Hello World""
character = ""l""
replacement = ""X""","def replace_char(string, character, replacement):
   return string.replace(character, replacement)

string = ""Hello World""
character = ""l""
replacement = ""X""
print(replace_char(string, character, replacement))",Data Type,3651,"def replace_char(string, character, replacement):
   return string.replace(character, replacement)

string = ""Hello World""
character = ""l""
replacement = ""X""
print(replace_char(string, character, replacement))","    ___
   return string.replace(character, replacement)

string = ""Hello World""
character = ""l""
replacement = ""X""
print(replace_char(string, character, replacement))"
Generate a python program to convert a list of strings to a new list of strings with each string's first letter capitalized,"[""apple"", ""cat"", ""dog"", ""hello""]","def capitalize(list):
    # Create an empty list to contain the corrected strings 
    output = []
    
    # Iterate over the strings 
    for string in list:
        output.append(string.capitalize())
    
    # Return the corrected list
    return output",Data Type,3652,"def capitalize(list):
    # Create an empty list to contain the corrected strings 
    output = []
    
    # Iterate over the strings 
    for string in list:
        output.append(string.capitalize())
    
    # Return the corrected list
    return output","    ___
    # Create an empty list to contain the corrected strings 
    output = []
    
    # Iterate over the strings 
    ___
        output.append(string.capitalize())
    
    # Return the corrected list
    return output"
Create a function in Python which can take in a string and capitalize the first character of the string.,"mystring = ""hello world""","def capitalize_first_character(mystring):
    return mystring[0].upper() + mystring[1:]",Data Type,3655,"def capitalize_first_character(mystring):
    return mystring[0].upper() + mystring[1:]","    ___
    return mystring[0].upper() + mystring[1:]"
Create a Python program to write a string in Reverse order,This is a Test string,"def reverse_string(input_string): 
    str = """" 
    for i in input_string: 
        str = i + str
    return str
  
if __name__ == ""__main__"": 
    input_string = ""This is a Test string""
    print(reverse_string(input_string))",Data Type,3657,"def reverse_string(input_string): 
    str = """" 
    for i in input_string: 
        str = i + str
    return str
  
if __name__ == ""__main__"": 
    input_string = ""This is a Test string""
    print(reverse_string(input_string))","    ___
    str = """" 
    ___
        str = i + str
    return str
  
    ___
    input_string = ""This is a Test string""
    print(reverse_string(input_string))"
Write a Python function for encrypting a string of plaintext.,"plaintext = ""Hello World!""","import base64
from cryptography.fernet import Fernet

def encrypt(plaintext):
 key = Fernet.generate_key()
 f = Fernet(key)
 encrypted_data = f.encrypt(plaintext.encode())
 return base64.b64encode(encrypted_data)",Data Type,3660,"import base64
from cryptography.fernet import Fernet

def encrypt(plaintext):
 key = Fernet.generate_key()
 f = Fernet(key)
 encrypted_data = f.encrypt(plaintext.encode())
 return base64.b64encode(encrypted_data)","import base64
from cryptography.fernet import Fernet

    ___
 key = Fernet.generate_key()
 f = Fernet(key)
 encrypted_data = f.encrypt(plaintext.encode())
 return base64.b64encode(encrypted_data)"
Generate a Python program to convert a given binary string to its equivalent decimal value.,1110,"def binary_to_decimal(n):
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    while temp > 0:
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value",Data Type,3672,"def binary_to_decimal(n):
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    while temp > 0:
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value","    ___
    num = n
    dec_value = 0
    base = 1
    temp = num
    
    ___
        last_digit = temp % 10
        temp = temp // 10
        dec_value += last_digit * base
        base = base * 2
    return dec_value"
Develop a program in Python to identify the longest string in a list of strings.,"[‘apple’, ‘bee’, ‘cat’]","def longest_string(string_list):
    longest_str = string_list[0]
    longest_len = len(longest_str)
    for string in string_list:
        if len(string) > longest_len:
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)",Data Type,3698,"def longest_string(string_list):
    longest_str = string_list[0]
    longest_len = len(longest_str)
    for string in string_list:
        if len(string) > longest_len:
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)","    ___
    longest_str = string_list[0]
    longest_len = len(longest_str)
    ___
    ___
            longest_str = string
            longest_len = len(string)
    return longest_str

string_list = ['apple', 'bee', 'cat']
longest_str = longest_string(string_list)
print(longest_str)"
Create a Python program to check for anagrams of a string.,"""listen"", ""silent""","def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True",Data Type,3706,"def anagramCheck(str1, str2):
    if (len(str1) != len(str2)):
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    for i in range( len( str1 ) ):
        if (str1[i] != str2[i]):
            return False
 
    return True","    ___
    ___
        return False

    str1 = sorted(str1)
    str2 = sorted (str2)

    # Compare each character in str1 with
    # each character in str2
    ___
    ___
            return False
 
    return True"
Create a function to replace all instances of a string in another string.,"Input string ""I love Python programming language"" and replace all the 'Python' with 'JavaScript'","def replace_string(old, new, s): 
    return s.replace(old, new) 


input_string = ""I love Python programming language""
new_string = replace_string(""Python"", ""JavaScript"", input_string)
print(new_string)

# Output: I love JavaScript programming language",Data Type,3720,"def replace_string(old, new, s): 
    return s.replace(old, new) 


input_string = ""I love Python programming language""
new_string = replace_string(""Python"", ""JavaScript"", input_string)
print(new_string)

# Output: I love JavaScript programming language","    ___
    return s.replace(old, new) 


input_string = ""I love Python programming language""
new_string = replace_string(""Python"", ""JavaScript"", input_string)
print(new_string)

# Output: I love JavaScript programming language"
Develop a program that alters and returns a given string.,"string: ""Python is fun!""","""""""
Develop a program that alters and returns a given string
""""""

def alter_string(string):

    # alter the original string 
    string_altered = string.replace(""!"", ""?"")

    return string_altered

if __name__ == '__main__':
    string = ""Python is fun!""
    print(alter_string(string))",Data Type,3727,"""""""
Develop a program that alters and returns a given string
""""""

def alter_string(string):

    # alter the original string 
    string_altered = string.replace(""!"", ""?"")

    return string_altered

if __name__ == '__main__':
    string = ""Python is fun!""
    print(alter_string(string))","""""""
Develop a program that alters and returns a given string
""""""

    ___

    # alter the original string 
    string_altered = string.replace(""!"", ""?"")

    return string_altered

    ___
    string = ""Python is fun!""
    print(alter_string(string))"
Implement a python function to remove all special characters from a string.,"string = “@#$&#() <>, +/”","import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)",Data Type,3728,"import re

def remove_special_characters(string):
    return re.sub('[^A-Za-z0-9]+', '', string)","import re

    ___
    return re.sub('[^A-Za-z0-9]+', '', string)"
Create a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string.,"""Hello world hello world""","def word_frequency(string):
    word_freq = {} 
  
    for word in string.split(): 
        if word in word_freq: 
            word_freq[word] += 1
        else: 
            word_freq[word] = 1
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))",Data Type,3739,"def word_frequency(string):
    word_freq = {} 
  
    for word in string.split(): 
        if word in word_freq: 
            word_freq[word] += 1
        else: 
            word_freq[word] = 1
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))","    ___
    word_freq = {} 
  
    ___
    ___
            word_freq[word] += 1
        else: 
            word_freq[word] = 1
  
    return word_freq 
      
string = ""Hello world hello world""
print(word_frequency(string))"
Create a Python function that converts an integer into a binary representation as a string.,13,"def to_binary(num):
  result = """"
  while num > 0:
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'",Data Type,3741,"def to_binary(num):
  result = """"
  while num > 0:
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'","    ___
  result = """"
    ___
   remainder = num % 2
   num = num // 2
   result = str(remainder) + result
  return result

print(to_binary(13)) # '1101'"
"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character.","words = ['apple','ball','cat','dog','elephant']
char = 'a'","def find_words(words, char):
    count_dict = dict()
    for word in words:
        if word.startswith(char):
            count_dict[word] = count_dict.get(word, 0) + 1
    return count_dict",Data Type,3747,"def find_words(words, char):
    count_dict = dict()
    for word in words:
        if word.startswith(char):
            count_dict[word] = count_dict.get(word, 0) + 1
    return count_dict","    ___
    count_dict = dict()
    ___
    ___
            count_dict[word] = count_dict.get(word, 0) + 1
    return count_dict"
"Input a text string, and build a function in Python to count the number of vowels in the string.",The quick brown fox jumps over the lazy dog,"def countVowels(sentence):
    vowels = 'aeiouAEIOU'
    count = 0
    for ch in sentence:
        if ch in vowels:
            count += 1
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)",Data Type,3748,"def countVowels(sentence):
    vowels = 'aeiouAEIOU'
    count = 0
    for ch in sentence:
        if ch in vowels:
            count += 1
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)","    ___
    vowels = 'aeiouAEIOU'
    count = 0
    ___
    ___
            count += 1
    return count

result = countVowels('The quick brown fox jumps over the lazy dog')
print(result)"
Create a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string.,"A list of strings including:
['Python', 'Java', 'C', 'Python', 'JavaScript']","string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
for string in string_list:
 if string in string_dict:
 string_dict[string] += 1
 else:
 string_dict[string] = 1

print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}",Data Type,3758,"string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
for string in string_list:
 if string in string_dict:
 string_dict[string] += 1
 else:
 string_dict[string] = 1

print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}","string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript']

string_dict = {}
    ___
    ___
 string_dict[string] += 1
 else:
 string_dict[string] = 1

print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}"
Create a program in Python to split a string into a list by given character,string = 'This is a sample string',"def split_string(string, delimiter): 
    return string.split(delimiter) 

print(split_string('This is a sample string', ' '))",Data Type,3777,"def split_string(string, delimiter): 
    return string.split(delimiter) 

print(split_string('This is a sample string', ' '))","    ___
    return string.split(delimiter) 

print(split_string('This is a sample string', ' '))"
Write code in Python to find the frequency of words in a given string.,"String: ""The apple is red and the banana is yellow.""","str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
for rawword in str.lower().split():
    word = rawword.replace(""."","""")
    if word not in wordfreq:
        wordfreq[word] = 0
    wordfreq[word] += 1
    
print(""Frequency of the words:"")
for key, value in wordfreq.items():
  print(key, value)",Data Type,3780,"str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
for rawword in str.lower().split():
    word = rawword.replace(""."","""")
    if word not in wordfreq:
        wordfreq[word] = 0
    wordfreq[word] += 1
    
print(""Frequency of the words:"")
for key, value in wordfreq.items():
  print(key, value)","str = ""The apple is red and the banana is yellow.""
wordfreq = {}
 
    ___
    word = rawword.replace(""."","""")
    ___
        wordfreq[word] = 0
    wordfreq[word] += 1
    
print(""Frequency of the words:"")
    ___
  print(key, value)"
Generate a Python program which will take as input a string and output the corresponding hexadecimal representation of the string.,"""Hello world""","import binascii

def stringToHex(s):
 output = ''
 for c in s:
 output += '%02x' % ord(c)

return output

inputString = input('Input a string:')
hexString = stringToHex(inputString)
print(""The hexadecimal representation of the string is: {}"".format(hexString))",Data Type,3816,"import binascii

def stringToHex(s):
 output = ''
 for c in s:
 output += '%02x' % ord(c)

return output

inputString = input('Input a string:')
hexString = stringToHex(inputString)
print(""The hexadecimal representation of the string is: {}"".format(hexString))","import binascii

    ___
 output = ''
    ___
 output += '%02x' % ord(c)

return output

inputString = input('Input a string:')
hexString = stringToHex(inputString)
print(""The hexadecimal representation of the string is: {}"".format(hexString))"
Create a function using Python that reverses the order of the words in a given string.,Please reverse the order of the words.,"def reverse_words(string): 
    words = string.split(' ') 
    reverse = words[::-1] 
    return ' '.join(reverse)",Data Type,3819,"def reverse_words(string): 
    words = string.split(' ') 
    reverse = words[::-1] 
    return ' '.join(reverse)","    ___
    words = string.split(' ') 
    reverse = words[::-1] 
    return ' '.join(reverse)"
Write a Python program to parse a string containing HTML tags and extract the text not contained in the HTML tags.,"<p>This is a <a href=""https://example.com"">link</a>.</p>","import re

html = '<p>This is a <a href=""https://example.com"">link</a>.'
text = re.sub(r'<[^>]+>', '', html)
print(text)

# Output: This is a link.",Data Type,3821,"import re

html = '<p>This is a <a href=""https://example.com"">link</a>.'
text = re.sub(r'<[^>]+>', '', html)
print(text)

# Output: This is a link.","import re

html = '<p>This is a <a href=""https://example.com"">link</a>.'
text = re.sub(r'<[^>]+>', '', html)
print(text)

# Output: This is a link."
Create an algorithm to detect a palindrome string in Python.,"String str = ""madam"";","def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False
    left += 1
    right -= 1
  return True",Data Type,3824,"def isPalindrome(str):
  left, right = 0, len(str) - 1
  while right >= left:
    if not str[left] == str[right]:
      return False
    left += 1
    right -= 1
  return True","    ___
  left, right = 0, len(str) - 1
    ___
    ___
      return False
    left += 1
    right -= 1
  return True"
Create a Python function that processes a string and returns the string in lowercase.,"String to be modified: ""MyString""","def process_string(string):
    return string.lower()

process_string(""MyString"") # returns ""mystring""",Data Type,3829,"def process_string(string):
    return string.lower()

process_string(""MyString"") # returns ""mystring""","    ___
    return string.lower()

process_string(""MyString"") # returns ""mystring"""
Construct an algorithm in Python to convert a string to uppercase.,hello world,"def stringToUpper(str):
    return str.upper()

inputStr = ""hello world""

outputStr = stringToUpper(inputStr)

print(outputStr)",Data Type,3843,"def stringToUpper(str):
    return str.upper()

inputStr = ""hello world""

outputStr = stringToUpper(inputStr)

print(outputStr)","    ___
    return str.upper()

inputStr = ""hello world""

outputStr = stringToUpper(inputStr)

print(outputStr)"
Implement a Python method to encrypt a given string.,"text = ""Hello, World!""","def encrypt(text): 
    result = """" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + 7)) 
        else: 
            result += chr((ord(char) + 3)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))",Data Type,3850,"def encrypt(text): 
    result = """" 
    for i in range(len(text)): 
        char = text[i] 
        if (char.isupper()): 
            result += chr((ord(char) + 7)) 
        else: 
            result += chr((ord(char) + 3)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))","    ___
    result = """" 
    ___
        char = text[i] 
    ___
            result += chr((ord(char) + 7)) 
        else: 
            result += chr((ord(char) + 3)) 
    return result 

text = ""Hello, World!""
print(encrypt(text))"
Construct a Python function that takes as input a string and returns the length of the longest word in the string.,"""This is an example string.""","def longest_word_length(input_string):
    longest_word_length = 0
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length",Data Type,3861,"def longest_word_length(input_string):
    longest_word_length = 0
    words = input_string.split()
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length","    ___
    longest_word_length = 0
    words = input_string.split()
    ___
    ___
            longest_word_length = len(word)
    return longest_word_length"
Create a program in Python that reads a string from standard input and prints the frequency of each letter in the input.,"""Hello World!""","from collections import Counter

def frequency(string):
    count = Counter()
    for letter in string:
        count[letter] += 1
    return count

if __name__ == ""__main__"":
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)",Data Type,3864,"from collections import Counter

def frequency(string):
    count = Counter()
    for letter in string:
        count[letter] += 1
    return count

if __name__ == ""__main__"":
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)","from collections import Counter

    ___
    count = Counter()
    ___
        count[letter] += 1
    return count

    ___
    input_string = input(""Enter the string: "")
    count = frequency(input_string)
    print(count)"
Create a program in Python to normalize a given input string.,"input_string = ""david_Xq3r5""","import re 

def normalize_string(input_string): 
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-9]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35",Data Type,3879,"import re 

def normalize_string(input_string): 
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-9]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35","import re 

    ___
  ## convert to lowercase 
  normalized_string = input_string.lower() 
  
  ## remove special characters 
  normalized_string = re.sub(""[^a-z0-9]"", """", normalized_string) 
  
  ## return the normalized string
  return normalized_string

normalized_string = normalize_string(input_string) 
print(normalized_string) # davidxq35"
"Create a function in Python to apply a discount rate to a given price. This should accept two parameters, a float for the discount rate between 0 and 1 and the price. The function should return the discounted price.","discountRate = 0.9
price = 200","def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180",Data Type,3880,"def applyDiscount(discountRate, price):
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180","    ___
    discountedPrice = discountRate * price
    return discountedPrice

print(applyDiscount(discountRate, price)) # 180"
Create a function in Python that takes two strings as arguments and returns a concatenated string.,"String1: ""Hello ""
String2: ""World""","def concat_strings(first_str, second_str):
 return first_str + second_str

print(concat_strings(""Hello "", ""World"")) # prints ""Hello World""",Data Type,3899,"def concat_strings(first_str, second_str):
 return first_str + second_str

print(concat_strings(""Hello "", ""World"")) # prints ""Hello World""","    ___
 return first_str + second_str

print(concat_strings(""Hello "", ""World"")) # prints ""Hello World"""
Create a Python function that takes a string as an argument and reverses it.,testing,"def reverse_string(str_input):
    reversed_string = ''
    index = len(str_input)
    while index > 0: 
        reversed_string += str_input[ index - 1 ]
        index = index - 1
    return reversed_string

print(reverse_string(""testing""))",Data Type,3900,"def reverse_string(str_input):
    reversed_string = ''
    index = len(str_input)
    while index > 0: 
        reversed_string += str_input[ index - 1 ]
        index = index - 1
    return reversed_string

print(reverse_string(""testing""))","    ___
    reversed_string = ''
    index = len(str_input)
    ___
        reversed_string += str_input[ index - 1 ]
        index = index - 1
    return reversed_string

print(reverse_string(""testing""))"
Create a Python script that prints the number of unique characters in a given string and their frequency.,Hello World,"inputString = ""Hello World"" 
freq = {}
  
for ch in inputString:
    if ch in freq:
        freq[ch] += 1
    else:
        freq[ch] = 1

for key, value in freq.items():
    print (key + "" has a frequency of "" + str(value))",Data Type,3901,"inputString = ""Hello World"" 
freq = {}
  
for ch in inputString:
    if ch in freq:
        freq[ch] += 1
    else:
        freq[ch] = 1

for key, value in freq.items():
    print (key + "" has a frequency of "" + str(value))","inputString = ""Hello World"" 
freq = {}
  
    ___
    ___
        freq[ch] += 1
    else:
        freq[ch] = 1

    ___
    print (key + "" has a frequency of "" + str(value))"
Write a Python program to count the number of characters in a string.,"String = ""Hello World""","String = ""Hello World""

def count_characters(str):
  return len(str)

print(""Number of characters in the string:"", count_characters(String))",Data Type,3912,"String = ""Hello World""

def count_characters(str):
  return len(str)

print(""Number of characters in the string:"", count_characters(String))","String = ""Hello World""

    ___
  return len(str)

print(""Number of characters in the string:"", count_characters(String))"
Write a Python script to convert a given string to datetime format.,Input Date: 10/07/2020,"import datetime

def convert_to_date(input_date):
    date_obj = datetime.datetime.strptime(input_date,""%d/%m/%Y"")
    return date_obj",Data Type,3913,"import datetime

def convert_to_date(input_date):
    date_obj = datetime.datetime.strptime(input_date,""%d/%m/%Y"")
    return date_obj","import datetime

    ___
    date_obj = datetime.datetime.strptime(input_date,""%d/%m/%Y"")
    return date_obj"
Write a Python program that takes a list as input and returns the longest consecutive string of characters.,"['a', 'bb', 'ccc', 'dd', 'eee']","def longest_consecutive(lst):
    longest = """"
    for word in lst:
        if len(word) > len(longest):
            longest = word
    return longest

lst = ['a', 'bb', 'ccc', 'dd', 'eee']

print(longest_consecutive(lst))

# Output should be ""ccc""",Data Type,3917,"def longest_consecutive(lst):
    longest = """"
    for word in lst:
        if len(word) > len(longest):
            longest = word
    return longest

lst = ['a', 'bb', 'ccc', 'dd', 'eee']

print(longest_consecutive(lst))

# Output should be ""ccc""","    ___
    longest = """"
    ___
    ___
            longest = word
    return longest

lst = ['a', 'bb', 'ccc', 'dd', 'eee']

print(longest_consecutive(lst))

# Output should be ""ccc"""
Create a function in Python which takes a string as an input and adds the number 1 to each character in the string.,"mystring = ""Hello""","def add_one_to_each_char(mystring):
    new_str = """"
    for c in mystring:
        new_str += chr(ord(c) + 1)
    return new_str",Data Type,3923,"def add_one_to_each_char(mystring):
    new_str = """"
    for c in mystring:
        new_str += chr(ord(c) + 1)
    return new_str","    ___
    new_str = """"
    ___
        new_str += chr(ord(c) + 1)
    return new_str"
Implement a program in Python that encodes a given string of text.,"encoding_string = ""Hello World""","def encode_string(encoding_string):
    encoded_string = """"
    for char in encoding_string : 
        encoded_string += str(ord(char)) + "" ""
    return encoded_string",Data Type,3930,"def encode_string(encoding_string):
    encoded_string = """"
    for char in encoding_string : 
        encoded_string += str(ord(char)) + "" ""
    return encoded_string","    ___
    encoded_string = """"
    ___
        encoded_string += str(ord(char)) + "" ""
    return encoded_string"
Generate a Python dictionary that contains the count of the characters in a given string.,"""Hello World""","def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",Data Type,3941,"def count_chars(string):
    count_dict = {}

    for char in string:
        if char in count_dict:
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}","    ___
    count_dict = {}

    ___
    ___
            count_dict[char] += 1
        else:
            count_dict[char] = 1

    return count_dict

print(count_chars(""Hello World""))

# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"
"Given a string of text, write a function in Python that prints out every word in the string.",The quick brown fox,"def printWords(text):
 words = text.split()
 for word in words:
 print(word)

printWords(""The quick brown fox"")",Data Type,3945,"def printWords(text):
 words = text.split()
 for word in words:
 print(word)

printWords(""The quick brown fox"")","    ___
 words = text.split()
    ___
 print(word)

printWords(""The quick brown fox"")"
Implement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.,"list = ['apple', 'banana', 'pear', 'banana']
string = 'banana'","def find_indices(list, string):
    indices = []
    for i,item in enumerate(list):
        if item == string:
            indices.append(i)

    return indices",Data Type,3954,"def find_indices(list, string):
    indices = []
    for i,item in enumerate(list):
        if item == string:
            indices.append(i)

    return indices","    ___
    indices = []
    ___
    ___
            indices.append(i)

    return indices"
Write a function in Python that takes a string as input and returns the length of the longest word.,"string = ""the quick brown fox jumps over the lazy dog""","def length_longest_word(s):
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)",Data Type,3955,"def length_longest_word(s):
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    for word in words:
        if len(word) > longest_len:
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)","    ___
    longest_word = """"
    longest_len = 0
  
    words = s.split()
    ___
    ___
            longest_len = len(word)
            longest_word = word
  
    return len(longest_word)
  
result = length_longest_word(string)
print(result)"
Write a python program to check if a given string contains all alphabetic characters.,"String: ""Hello World!""","def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False",Data Type,3968,"def is_alpha(word): 
    if word.isalpha(): 
        return True 
    else: 
        return False","    ___
    ___
        return True 
    else: 
        return False"
Generate a program in Python that takes in a string and returns the reverse of the string.,"""Hello World""","def reverse_string(str):
    """""" Reverses a given string """"""

    rev_str = """"

    for c in str:
        rev_str = c + rev_str

    return rev_str

str = ""Hello World""
rev_str = reverse_string(str)

print(rev_str)",Data Type,3977,"def reverse_string(str):
    """""" Reverses a given string """"""

    rev_str = """"

    for c in str:
        rev_str = c + rev_str

    return rev_str

str = ""Hello World""
rev_str = reverse_string(str)

print(rev_str)","    ___
    """""" Reverses a given string """"""

    rev_str = """"

    ___
        rev_str = c + rev_str

    return rev_str

str = ""Hello World""
rev_str = reverse_string(str)

print(rev_str)"
Generate a Python dictionary that tracks the frequency of letters in a given string.,"test_string = ""This is a test string!""","frequency_dict = {}

for letter in test_string:
    if letter not in frequency_dict:
        frequency_dict[letter] = 0
    frequency_dict[letter] += 1",Data Type,3980,"frequency_dict = {}

for letter in test_string:
    if letter not in frequency_dict:
        frequency_dict[letter] = 0
    frequency_dict[letter] += 1","frequency_dict = {}

    ___
    ___
        frequency_dict[letter] = 0
    frequency_dict[letter] += 1"
Create a Python program to search for a particular pattern in a string of text and return all matching substrings.,"let text = ""hey this is a string to match for a pattern"";","import re

text = ""hey this is a string to match for a pattern""
pattern = ""match""

# Find all matches
matches = re.findall(pattern, text)

# Print the matches
print(matches)
# Output: ['match']",Data Type,3989,"import re

text = ""hey this is a string to match for a pattern""
pattern = ""match""

# Find all matches
matches = re.findall(pattern, text)

# Print the matches
print(matches)
# Output: ['match']","import re

text = ""hey this is a string to match for a pattern""
pattern = ""match""

# Find all matches
matches = re.findall(pattern, text)

# Print the matches
print(matches)
# Output: ['match']"
Write a function in Python that finds all possible substrings of a string and prints them.,"String =  ""Hello World""","def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+1, n+1):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)",Data Type,3993,"def printSubstrings(s): 
    n = len(s) 
      
    for i in range(n):
        for j in range(i+1, n+1):
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)","    ___
    n = len(s) 
      
    ___
    ___
            print(s[i:j])
  
# Driver code 
s = ""Hello World""
printSubstrings(s)"
Create a Python program to edit a given string and insert a given word into the middle of the string.,"String = 'I am a programmer';
Word = 'software'","def insert_word(string, word):
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))",Data Type,4001,"def insert_word(string, word):
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))","    ___
  mid_index = len(string)//2
  start_string = string[:mid_index]
  end_string = string[mid_index:]
  new_string = start_string+word+end_string
  return new_string

string = 'I am a programmer'
word = 'software'

print(insert_word(string, word))"
Create a python function that takes in a string and reverse any words that contain a certain character.,"String: ""Hello World!-Abc""
Character: ""-""","def string_reverse(string, character):
    new_string = []
    for word in string.split(' '):
        if character in word:
            new_string.append(word[::-1])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA""",Data Type,4004,"def string_reverse(string, character):
    new_string = []
    for word in string.split(' '):
        if character in word:
            new_string.append(word[::-1])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA""","    ___
    new_string = []
    ___
    ___
            new_string.append(word[::-1])
        else:
            new_string.append(word)
    return ' '.join(new_string)

string_reverse(""Hello World!-Abc"", ""-"") # Output: ""Hello dlroW!-cbA"""
"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds.",32400,"def to_time_string(duration):
    hours, remainder = divmod(duration, 3600)
    minutes, seconds = divmod(remainder, 60)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(32400))",Data Type,4010,"def to_time_string(duration):
    hours, remainder = divmod(duration, 3600)
    minutes, seconds = divmod(remainder, 60)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(32400))","    ___
    hours, remainder = divmod(duration, 3600)
    minutes, seconds = divmod(remainder, 60)
    return ""%02d:%02d:%02d"" % (hours, minutes, seconds)

print(to_time_string(32400))"
Create a Python script to parse a JSON string and return the value of the given field.,"{""name"": ""John"", ""age"": 30}","def get_value(json_string, field):
    json_dict = json.loads(json_string)
    return json_dict[field]",Data Type,4015,"def get_value(json_string, field):
    json_dict = json.loads(json_string)
    return json_dict[field]","    ___
    json_dict = json.loads(json_string)
    return json_dict[field]"
Create a Python function to classify a given string as either a palindrome or not.,"string=""kayak""","def is_palindrome(string):
    string_temp = string.lower()
    reverse_string = string_temp[::-1]
    if string_temp == reverse_string:
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)",Data Type,4033,"def is_palindrome(string):
    string_temp = string.lower()
    reverse_string = string_temp[::-1]
    if string_temp == reverse_string:
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)","    ___
    string_temp = string.lower()
    reverse_string = string_temp[::-1]
    ___
        print(""yes, this is a palindrome"")
    else:
        print(""no, this is not a palindrome"")

is_palindrome(string)"
"Write a Python function that takes a string as input and returns true if the string starts with the letter ""a"".",String: awesome,"def starts_with_a(string):
    if string[0] == 'a':
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)",Data Type,4035,"def starts_with_a(string):
    if string[0] == 'a':
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)","    ___
    ___
        return True
    else:
        return False

result = starts_with_a('awesome')
print(result)"
Create a Python function to generate a URL endpoint mapping based on a given URL string.,"URL string: ""/posts/<title>/<action>""","from flask import Flask

app = Flask(__name__)

@app.route(""/posts/<title>/<action>"")
def process_url(title: str, action: str):
	print(f'URL endpoint mapping for title: {title} and action: {action}')

if __name__ == '__main__':
	app.run()",Data Type,4060,"from flask import Flask

app = Flask(__name__)

@app.route(""/posts/<title>/<action>"")
def process_url(title: str, action: str):
	print(f'URL endpoint mapping for title: {title} and action: {action}')

if __name__ == '__main__':
	app.run()","from flask import Flask

app = Flask(__name__)

@app.route(""/posts/<title>/<action>"")
    ___
	print(f'URL endpoint mapping for title: {title} and action: {action}')

    ___
	app.run()"
Create a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears.,"s = ""hello world"", c = 'l'","def findCount(s, c):
    count = 0
    for char in s:
        if char == c:
            count += 1
    return count 

print(findCount(s, c))",Data Type,4061,"def findCount(s, c):
    count = 0
    for char in s:
        if char == c:
            count += 1
    return count 

print(findCount(s, c))","    ___
    count = 0
    ___
    ___
            count += 1
    return count 

print(findCount(s, c))"
Implement a program in Python that takes a string as an input and prints out the length of the longest word in the string.,"string = ""The quick brown fox jumps over the lazy dog""","def longest_word(string):
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))",Data Type,4069,"def longest_word(string):
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    for word in words:
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))","    ___
    words = string.split("" "")
    max_length = 0
    longest_word = """"
    ___
        if(len(word) > max_length):
            max_length = len(word)
            longest_word = word
    print(""Longest word is {} with length {}"".format(longest_word,max_length))"
"Generate a Python code snippet to convert a string to a list, where each word is an item in the list.","String: ""This is a test string.""","string = ""This is a test string""

list = string.split("" "")

print(list) # Output: ['This', 'is', 'a', 'test', 'string']",Data Type,4079,"string = ""This is a test string""

list = string.split("" "")

print(list) # Output: ['This', 'is', 'a', 'test', 'string']","string = ""This is a test string""

list = string.split("" "")

print(list) # Output: ['This', 'is', 'a', 'test', 'string']"
Optimize a Python program to count occurrences of each letter in a given string.,"""This is a sample string""","from collections import Counter

def count_letters(string):
    return Counter(string)

print(count_letters(""This is a sample string""))",Data Type,4091,"from collections import Counter

def count_letters(string):
    return Counter(string)

print(count_letters(""This is a sample string""))","from collections import Counter

    ___
    return Counter(string)

print(count_letters(""This is a sample string""))"
Write a Python program that takes a string as input and edits the string to remove all punctuation marks.,"string = ""This string contains , a comma, and a % symbol.""","import string

def remove_puncutuation(string):
    translator = str.maketrans('', '', string.punctuation)
    return string.translate(translator)

string = ""This string contains , a comma, and a % symbol.""

print(remove_puncutuation(string))",Data Type,4106,"import string

def remove_puncutuation(string):
    translator = str.maketrans('', '', string.punctuation)
    return string.translate(translator)

string = ""This string contains , a comma, and a % symbol.""

print(remove_puncutuation(string))","import string

    ___
    translator = str.maketrans('', '', string.punctuation)
    return string.translate(translator)

string = ""This string contains , a comma, and a % symbol.""

print(remove_puncutuation(string))"
Create a program in Python which takes a string and prints out all the words present in the string in alphabetical order.,"string = ""This is a test string""","def sortString(string):
    words = string.split("" "")
    words.sort()
    return words
    
print(sortString(string))",Data Type,4118,"def sortString(string):
    words = string.split("" "")
    words.sort()
    return words
    
print(sortString(string))","    ___
    words = string.split("" "")
    words.sort()
    return words
    
print(sortString(string))"
Generate a Python function that checks to see if a given string is a palindrome.,Input: madam,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)",Data Type,4121,"def is_palindrome(str):
    reversed_str = """"
    for i in range(len(str) - 1, -1, -1): 
        reversed_str += str[i]

    if str == reversed_str: 
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)","    ___
    reversed_str = """"
    ___
        reversed_str += str[i]

    ___
        return True
    else: 
        return False

string = ""madam""
result = is_palindrome(string)
print(result)"
Build a Python script to compare two strings and determine which string is the longest.,"""Hello\nWorld""","def longest(str1, str2):
    if len(str1) > len(str2):
        return str1
    elif len(str2) > len(str1):
        return str2
    else:
        return 'Strings are equal length.'

str1 = 'Hello'
str2 = 'World'

print(longest(str1, str2))
# Output: World",Data Type,4123,"def longest(str1, str2):
    if len(str1) > len(str2):
        return str1
    elif len(str2) > len(str1):
        return str2
    else:
        return 'Strings are equal length.'

str1 = 'Hello'
str2 = 'World'

print(longest(str1, str2))
# Output: World","    ___
    ___
        return str1
    ___
        return str2
    else:
        return 'Strings are equal length.'

str1 = 'Hello'
str2 = 'World'

print(longest(str1, str2))
# Output: World"
Generate a Python program to give an output as true if the given string contains at least two distinct characters,"""AbcdABC""","def containsTwoDistinctChars(string):
    distinctChars = set()
    for char in string:
        distinctChars.add(char)
    
    return len(distinctChars) >= 2

print(containsTwoDistinctChars(""AbcdABC""))",Data Type,4125,"def containsTwoDistinctChars(string):
    distinctChars = set()
    for char in string:
        distinctChars.add(char)
    
    return len(distinctChars) >= 2

print(containsTwoDistinctChars(""AbcdABC""))","    ___
    distinctChars = set()
    ___
        distinctChars.add(char)
    
    return len(distinctChars) >= 2

print(containsTwoDistinctChars(""AbcdABC""))"
"Create a Python program that takes in a string and counts how many vowels are in it, regardless of case.",amazing,"def count_vowels(word):
  answer = 0
  for letter in word:
    if letter.lower() in 'aeiou':
      answer += 1
  return answer

print(count_vowels('amazing'))",Data Type,4139,"def count_vowels(word):
  answer = 0
  for letter in word:
    if letter.lower() in 'aeiou':
      answer += 1
  return answer

print(count_vowels('amazing'))","    ___
  answer = 0
    ___
    ___
      answer += 1
  return answer

print(count_vowels('amazing'))"
"Given some code, identify the type of the code written.","def foo():
    x = 0
    y = 1
    z = 2
    if x == y:
        z += 1",The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.,Data Type,4151,The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.,The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true.
Write a Python program that determines whether the given string is a palindrome.,"String: ""racecar""","def is_palindrome(string):
  if len(string) <= 1:
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)",Data Type,4156,"def is_palindrome(string):
  if len(string) <= 1:
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    if letter_1 != letter_2:
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)","    ___
    ___
    return True
  else:
    letter_1 = string[0]
    letter_2 = string[-1]
    ___
      return False
    else:
      new_word = string[1:-1]
      return is_palindrome(new_word)"
Parse the following JSON string into a Python dictionary.,"{""name"":""John"",""age"":30,""city"":""New York""}","import json

data = '{""name"":""John"",""age"":30,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}",Data Type,4159,"import json

data = '{""name"":""John"",""age"":30,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}","import json

data = '{""name"":""John"",""age"":30,""city"":""New York""}'

parsed_data = json.loads(data)
print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}"
Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character.,hello,"def char_freq(s):
    freq = dict()
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}",Data Type,4162,"def char_freq(s):
    freq = dict()
    for i in s:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}","    ___
    freq = dict()
    ___
    ___
            freq[i] += 1
        else:
            freq[i] = 1
    return freq

string = 'hello'
result = char_freq(string)

print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}"
Replace a string in the following python program.,"string = ""Hello, world!""
substring = ""world""
substitution = ""Python""","string = ""Hello, world!""
substring = ""world""
substitution = ""Python""

print(string.replace(substring, substitution))",Data Type,4164,"string = ""Hello, world!""
substring = ""world""
substitution = ""Python""

print(string.replace(substring, substitution))","string = ""Hello, world!""
substring = ""world""
substitution = ""Python""

print(string.replace(substring, substitution))"
Generate a python program that removes all whitespace from a string.,"""This    is    a   string    with    whitespace""","def remove_whitespace(x):
   return x.replace("" "", """")",Data Type,4167,"def remove_whitespace(x):
   return x.replace("" "", """")","    ___
   return x.replace("" "", """")"
Generate a program in Python that counts the number of words in a string.,"String: ""This is a sentence""","def count_words(string):
    words = 0
    for x in string.split():
        words += 1
    return words",Data Type,4175,"def count_words(string):
    words = 0
    for x in string.split():
        words += 1
    return words","    ___
    words = 0
    ___
        words += 1
    return words"
Create a Python program to extract the first three characters of a string.,"string = ""programming""","result = string[:3]
print(result) #pro",Data Type,4178,"result = string[:3]
print(result) #pro","result = string[:3]
print(result) #pro"
Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not?,"s1 = ""restful""
s2 = ""fluster""","def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True",Data Type,4189,"def is_anagram(str1, str2):
    if (len(str1) != len(str2)):
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    for i in range(0, len(str1)): 
        if (list1[i] != list2[i]): 
            return False
  
    return True","    ___
    ___
        return False
    
    list1 = sorted(list(str1)) 
    list2 = sorted(list(str2)) 
  
    ___
    ___
            return False
  
    return True"
Write a Python program to sort the characters in a given string in reverse alphabetical order.,Hello,"def sortReverseString(string):
 char_list = list(string)
 char_list.sort(reverse=True)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH",Data Type,4217,"def sortReverseString(string):
 char_list = list(string)
 char_list.sort(reverse=True)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH","    ___
 char_list = list(string)
 char_list.sort(reverse=True)
 return ''.join(char_list)

# Usage:
string = ""Hello""
sortedString = sortReverseString(string)
print(sortedString) # Output: olleH"
"Make a function in Python which takes a string of any length, reverses it, and then returns the reversed string.",String to be reversed,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string",Data Type,4220,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string","    ___
    reversed_string = """"
    ___
        reversed_string = char + reversed_string
    return reversed_string"
Create a text parser in Python that converts a given string into an integer.,"""47""","def parse_int(string):
 return int(string)

result = parse_int(""47"")
print(result)

# Result: 47",Data Type,4226,"def parse_int(string):
 return int(string)

result = parse_int(""47"")
print(result)

# Result: 47","    ___
 return int(string)

result = parse_int(""47"")
print(result)

# Result: 47"
Write a Python script to parse a JSON string and convert it into a dictionary.,"'{""name"": ""GPT"", ""type"": ""AI""}'","import json

json_str = '{""name"": ""GPT"", ""type"": ""AI""}'

dict_x = json.loads(json_str)
print(dict_x)",Data Type,4230,"import json

json_str = '{""name"": ""GPT"", ""type"": ""AI""}'

dict_x = json.loads(json_str)
print(dict_x)","import json

json_str = '{""name"": ""GPT"", ""type"": ""AI""}'

dict_x = json.loads(json_str)
print(dict_x)"
Create a Python program to edit the following string and make all characters in the string uppercase.,'This is a test string.',"def to_uppercase(input):
    output = """"
    for char in input:
        output += char.upper()
    return output",Data Type,4247,"def to_uppercase(input):
    output = """"
    for char in input:
        output += char.upper()
    return output","    ___
    output = """"
    ___
        output += char.upper()
    return output"
"Given a list of strings, write a Python program to find the string which has the maximum length","list1 = ['cat', 'primate', 'monkey']","def max_length(list1): 
	return max(list1, key=len) 

list1 = ['cat', 'primate', 'monkey']
print(""String with maximum length is : "", max_length(list1))",Data Type,4277,"def max_length(list1): 
	return max(list1, key=len) 

list1 = ['cat', 'primate', 'monkey']
print(""String with maximum length is : "", max_length(list1))","    ___
	return max(list1, key=len) 

list1 = ['cat', 'primate', 'monkey']
print(""String with maximum length is : "", max_length(list1))"
Write a Python program to remove duplicate characters of a given string.,"""bufferoverflow""","def remove_duplicate_characters(string):
    result = """"
    seen = set()
    for char in string:
        if char not in seen:
            seen.add(char)
            result += char
    return result

print(remove_duplicate_characters(""bufferoverflow""))",Data Type,4282,"def remove_duplicate_characters(string):
    result = """"
    seen = set()
    for char in string:
        if char not in seen:
            seen.add(char)
            result += char
    return result

print(remove_duplicate_characters(""bufferoverflow""))","    ___
    result = """"
    seen = set()
    ___
    ___
            seen.add(char)
            result += char
    return result

print(remove_duplicate_characters(""bufferoverflow""))"
Round an input float to two decimal places in Python.,8.374,"num = 8.374
rounded_num = round(num, 2)
print(rounded_num)",Data Type,4287,"num = 8.374
rounded_num = round(num, 2)
print(rounded_num)","num = 8.374
rounded_num = round(num, 2)
print(rounded_num)"
Create a graphical representation of a given string using Python.,Hello World!,"import matplotlib.pyplot as plt 

# initializing string
string = ""Hello World!""

# declaring x, yaxis 
X = range(len(string)) 
Y = [ord(i) for i in string] 

# making a graph 
plt.plot(X, Y) 
plt.title('Graphical representation of String : ' + string) 

plt.show()",Data Type,4309,"import matplotlib.pyplot as plt 

# initializing string
string = ""Hello World!""

# declaring x, yaxis 
X = range(len(string)) 
Y = [ord(i) for i in string] 

# making a graph 
plt.plot(X, Y) 
plt.title('Graphical representation of String : ' + string) 

plt.show()","import matplotlib.pyplot as plt 

# initializing string
string = ""Hello World!""

# declaring x, yaxis 
X = range(len(string)) 
Y = [ord(i) for i in string] 

# making a graph 
plt.plot(X, Y) 
plt.title('Graphical representation of String : ' + string) 

plt.show()"
Generate a python program that takes input as a string and prints out each word in the string in reverse order.,This is an example.,"# Take input
text = input('Enter a string: ')

# Split string into words
words = text.split(' ') 

# Reverse order
words.reverse() 

# Print
for word in words:
 print(word)",Data Type,4315,"# Take input
text = input('Enter a string: ')

# Split string into words
words = text.split(' ') 

# Reverse order
words.reverse() 

# Print
for word in words:
 print(word)","# Take input
text = input('Enter a string: ')

# Split string into words
words = text.split(' ') 

# Reverse order
words.reverse() 

# Print
    ___
 print(word)"
Write a Python function that takes a string as input and counts the number of occurrences of each character in that string.,String: 'python',"def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)",Data Type,4326,"def count_characters(string):
    counts = {}
    for s in string:
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)","    ___
    counts = {}
    ___
        counts[s] = counts.get(s, 0) + 1
    return counts

result = count_characters('python')
print(result)"
Take an input string and write a python program to determine if it is a palindrome.,racecar,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True",Data Type,4330,"def isPalindrome(s):
 left, right = 0, len(s) - 1
 while left < right:
 if s[left] != s[right]:
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True","    ___
 left, right = 0, len(s) - 1
    ___
    ___
 return False
 left += 1
 right -= 1
 return True

s = ""racecar""
print(isPalindrome(s))  # True"
Write a Python program to remove all duplicated words from a given input string.,"sentence = ""This is a sentence with some duplicate words in it.""","sentence_words = sentence.split("" "")
 
unique_words = set(sentence_words)
 
print("" "".join(unique_words))",Data Type,4332,"sentence_words = sentence.split("" "")
 
unique_words = set(sentence_words)
 
print("" "".join(unique_words))","sentence_words = sentence.split("" "")
 
unique_words = set(sentence_words)
 
print("" "".join(unique_words))"
Create a Python program to retrieve the longest string from an array of strings,"names = ['John', 'Paul', 'George', 'Ringo']","def get_longest_string(names):
    longest_string = ''
    for name in names:
        if len(name) > len(longest_string):
            longest_string = name
    return longest_string",Data Type,4333,"def get_longest_string(names):
    longest_string = ''
    for name in names:
        if len(name) > len(longest_string):
            longest_string = name
    return longest_string","    ___
    longest_string = ''
    ___
    ___
            longest_string = name
    return longest_string"
Suggest a completion for the following python code to count the number of a given character in a string.,"def count_characters(s, c):","def count_characters(s, c):
 count = 0
 for ch in s:
  if ch == c:
   count += 1
 return count",Data Type,4338,"def count_characters(s, c):
 count = 0
 for ch in s:
  if ch == c:
   count += 1
 return count","    ___
 count = 0
    ___
    ___
   count += 1
 return count"
Write a python program that will generate a password containing numbers and letters from an entered string.,Hello,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))",Data Type,4341,"def generate_password(word):
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    for i in range(0, len(word)):
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))","    ___
      # initialize variables 
    password = """"
    letters = """"
    numbers = """"

    # create new password
    ___
      letters += word[i]
      numbers += str(i)

    password = letters + numbers
    return password

print(generate_password(""Hello""))"
Create a Python program to find out if a string contains any characters from another given string.,"String 1: Hello
String 2: eo","def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True",Data Type,4348,"def contains_chars(str1, str2):
 if any([c in str1 for c in str2]):
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True","    ___
    ___
 return True
 return False

string1 = ""Hello""
string2 = ""eo""

print(contains_chars(string1, string2)) // Outputs: True"
Write a Python program to create a FuzzyWuzzy string matching for the given two strings.,"String 1: apple
String 2: applee","from fuzzywuzzy import fuzz 
def fuzzy_match(str1, str2): 
    return fuzz.ratio(str1, str2)",Data Type,4349,"from fuzzywuzzy import fuzz 
def fuzzy_match(str1, str2): 
    return fuzz.ratio(str1, str2)","from fuzzywuzzy import fuzz 
    ___
    return fuzz.ratio(str1, str2)"
"Convert a Python list into a string with each item separated by a comma, with no additional characters or whitespace","my_list = [1, 2, 3]","','.join(str(item) for item in my_list)",Data Type,4355,"','.join(str(item) for item in my_list)","','.join(str(item) for item in my_list)"
Create a python function that takes a string as an argument and substitues each letter with its corresponding number in the alphabet.,Input String = “Data Science”,"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)",Data Type,4374,"def letterToNumber(input_string):
    result_string = """"
    for letter in input_string:
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)","    ___
    result_string = """"
    ___
        result_string += str(ord(letter)-64)
    return result_string

input_string  = ""Data Science""
substituted_string = letterToNumber(input_string)
print(""Substituted string : "",substituted_string)"
Convert a string into a valid python program that prints the string on the terminal.,Hello World!,print('Hello World!'),Data Type,4375,print('Hello World!'),print('Hello World!')
Convert a given python data structure into a json string using json package,"data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}","import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'",Data Type,4376,"import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'","import json

# convert python data structure to json
data = {
    ""name"": ""John"",
    ""age"": 30,
    ""location"": ""Greece""
}

data_string = json.dumps(data)

print(data_string) # '{""name"": ""John"", ""age"": 30, ""location"": ""Greece""}'"
Write a function in Python to convert a string of text into separate words in a list.,The quick brown fox jumped over the lazy dog.,"def convert_to_list(sentence):
 words = []
 for word in sentence.split():
  words.append(word)
 return words

result = convert_to_list(""The quick brown fox jumped over the lazy dog."")
print(result)
# Output: ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.']",Data Type,4377,"def convert_to_list(sentence):
 words = []
 for word in sentence.split():
  words.append(word)
 return words

result = convert_to_list(""The quick brown fox jumped over the lazy dog."")
print(result)
# Output: ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.']","    ___
 words = []
    ___
  words.append(word)
 return words

result = convert_to_list(""The quick brown fox jumped over the lazy dog."")
print(result)
# Output: ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.']"
Create a python script to split a string into its word components.,"String: Hello,World!","def split_words(s): 
    words = s.split("" "") 
    return words  
s = ""Hello,World!""
words = split_words(s) 
print(words)",Data Type,4381,"def split_words(s): 
    words = s.split("" "") 
    return words  
s = ""Hello,World!""
words = split_words(s) 
print(words)","    ___
    words = s.split("" "") 
    return words  
s = ""Hello,World!""
words = split_words(s) 
print(words)"
Create a Python program to count the occurrence of a specific word in a string.,The quick brown fox,"def count_occurences(string, word):
    count = 0
    words = string.split(' ')
    for w in words:
        if w == word:
            count += 1
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')",Data Type,4384,"def count_occurences(string, word):
    count = 0
    words = string.split(' ')
    for w in words:
        if w == word:
            count += 1
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')","    ___
    count = 0
    words = string.split(' ')
    ___
    ___
            count += 1
    return count
 
string = 'The quick brown fox'
word = 'The'
 
occurrences = count_occurences(string, word)
print('""The"" occurs', occurrences , 'times in the string.')"
Design an algorithm in Python to detect an anagram in a string.,"Input string: ""eat tea""","def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True
    return False",Data Type,4393,"def isAnagram(string):
    for i in range(len(string)):
        for j in range(i + 1, len(string)):
            if sorted(string[i]) == sorted(string[j]):
                return True
    return False","    ___
    ___
    ___
    ___
                return True
    return False"
Design a Python function to replace all occurrences of ‘x’ in a string with ‘y’.,"str = ""xx123xx456xx"", x = ""x"", y = ""y""","def replaceXWithY(str, x, y):
    while x in str:
        str = str.replace(x, y)
    return str

result = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)",Data Type,4394,"def replaceXWithY(str, x, y):
    while x in str:
        str = str.replace(x, y)
    return str

result = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)","    ___
    ___
        str = str.replace(x, y)
    return str

result = replaceXWithY(""xx123xx456xx"", ""x"", ""y"")
print(result)"
Create a program in Python to capitalize the first letter of a given string.,hello world,"def capitalize_first_letter(text):
  return text[0].upper() + text[1:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world",Data Type,4396,"def capitalize_first_letter(text):
  return text[0].upper() + text[1:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world","    ___
  return text[0].upper() + text[1:]

print(capitalize_first_letter(""hello world"")) # Output: Hello world"
Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer.,"string = ‘Hello’

int = 3","def repeat_string(s, n):
    return s*n

print(repeat_string('Hello', 3))
# Output: 'HelloHelloHello'",Data Type,4400,"def repeat_string(s, n):
    return s*n

print(repeat_string('Hello', 3))
# Output: 'HelloHelloHello'","    ___
    return s*n

print(repeat_string('Hello', 3))
# Output: 'HelloHelloHello'"
Create an API endpoint in Python that takes a text string as input and outputs a JSON response with the text reversed.,Hello world,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
def reverse():
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-1]

 return jsonify({'reversed_text': reversed_text})

if __name__ == '__main__':
 app.run()",Data Type,4402,"from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
def reverse():
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-1]

 return jsonify({'reversed_text': reversed_text})

if __name__ == '__main__':
 app.run()","from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/reverse', methods=['POST'])
    ___
 data = request.get_json()
 text = data['text']
 reversed_text = text[::-1]

 return jsonify({'reversed_text': reversed_text})

    ___
 app.run()"
Develop a Python program that reads in a string and reverses the words in it maintaining their order.,This is a sample string,"def reverseWords(str): 
    words = str.split("" "") 
  
    newWords = [word[::-1] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts",Data Type,4410,"def reverseWords(str): 
    words = str.split("" "") 
  
    newWords = [word[::-1] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts","    ___
    words = str.split("" "") 
  
    newWords = [word[::-1] for word in words] 
  
    newString = "" "".join(newWords) 
  
    return newString 
      
print(reverseWords(""This is a sample string"")) 
# Result: sihT si a elpmas gnirts"
Write a Python program to separate the given string into a list of words.,"string=""This is a test string""","# Split the string into words 
words = string.split(' ') 

# Print the list of words 
print(words) # Output: ['This', 'is', 'a', 'test', 'string']",Data Type,4415,"# Split the string into words 
words = string.split(' ') 

# Print the list of words 
print(words) # Output: ['This', 'is', 'a', 'test', 'string']","# Split the string into words 
words = string.split(' ') 

# Print the list of words 
print(words) # Output: ['This', 'is', 'a', 'test', 'string']"
"Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.","my_list = [""cat"", ""dog"", ""monkey"", ""kite""]","def filter_list(list):
    return [item for item in list if len(item) < 4 or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']",Data Type,4416,"def filter_list(list):
    return [item for item in list if len(item) < 4 or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']","    ___
    return [item for item in list if len(item) < 4 or 'k' not in item]

my_list = filter_list(my_list)
print(my_list)

# Output:
# ['cat', 'dog']"
Write a Python script to generate a dictionary with counts of unique characters in a given string.,"String = ""Hello World!""","def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4417,"def char_count(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}","    ___
    char_dict = {}
    ___
    ___
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    return char_dict

string = ""Hello World!""
result = char_count(string)
print(result)

# Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
Calculate the number of possible permutations of a string using the following Python function.,"word = ""helloworld""","def factorial(string): 
   len_string = len(string) 
   permutations = 1
   for i in range(1, len_string + 1): 
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)",Data Type,4420,"def factorial(string): 
   len_string = len(string) 
   permutations = 1
   for i in range(1, len_string + 1): 
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)","    ___
   len_string = len(string) 
   permutations = 1
    ___
      permutations *= i 
   return permutations 

result = factorial(word) 
print(result)"
"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other.","s1 = 'Hello World'
s2 = 'World'","def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False",Data Type,4423,"def is_substring(s1, s2):
 # check for empty strings 
 if s1 == '' or s2 == '':
 return False
 
 # check if s2 is a substring of s1
 if s1.find(s2) > -1:
 return True
 
 return False","    ___
 # check for empty strings 
    ___
 return False
 
 # check if s2 is a substring of s1
    ___
 return True
 
 return False"
Design a software that reverse orders of string words.,Python programming is fun,"def reverse_string_words(string): 
    words = string.split("" "") 
    words.reverse()
    return ' '.join(words)  
  
string = ""Python programming is fun""
print(reverse_string_words(string))",Data Type,4424,"def reverse_string_words(string): 
    words = string.split("" "") 
    words.reverse()
    return ' '.join(words)  
  
string = ""Python programming is fun""
print(reverse_string_words(string))","    ___
    words = string.split("" "") 
    words.reverse()
    return ' '.join(words)  
  
string = ""Python programming is fun""
print(reverse_string_words(string))"
Detect the data type of a given string in Python.,"String: ""Hello World!""",str type,Data Type,4437,str type,str type
Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary.,'hello world',"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))",Data Type,4452,"def frequency(string): 
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))","    ___
    freq = {} 
    ___
    ___
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq

print(frequency('hello world'))"
Create a Python 3 function to calculate the length of a string.,"string = 'hello, world!'","def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs 13",Data Type,4462,"def get_str_length(string):
  return len(string)

print(get_str_length(string)) # outputs 13","    ___
  return len(string)

print(get_str_length(string)) # outputs 13"
Create a Python function that takes a string and rotates the characters in the string by a specified integer.,"""Hello"", 3","def rotateString(s, n):
    output = """"
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", 3)
print(result)",Data Type,4466,"def rotateString(s, n):
    output = """"
    for char in s:
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", 3)
print(result)","    ___
    output = """"
    ___
        output += chr(ord(char) + n)
    return output

result = rotateString(""Hello"", 3)
print(result)"
Generate a program in Python to count the number of times a substring appears in a string?,"str=""The quick brown fox jumps over the lazy dog."", substr=""the""","def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = 0
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))",Data Type,4476,"def countSubstrings(str, subStr):
    lengthSubStr = len(subStr)
    count = 0
   
    for i in range(len(str)):
        if str[i:i+lengthSubStr] == subStr:
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))","    ___
    lengthSubStr = len(subStr)
    count = 0
   
    ___
    ___
            count += 1
         
    return count

str = ""The quick brown fox jumps over the lazy dog.""
substr = ""the""
print(countSubstrings(str, substr))"
Modify the code to output a float in python instead of integer.,"def multiply(a, b): 
    return a * b","def multiply(a, b): 
    return float(a * b)",Data Type,4477,"def multiply(a, b): 
    return float(a * b)","    ___
    return float(a * b)"
Identify the data type of each variable in the given Python snippet.,"x = 5
name = ""John""
y = [1, 2, 3]","x is an integer, name is a string, and y is a list.",Data Type,4493,"x is an integer, name is a string, and y is a list.","x is an integer, name is a string, and y is a list."
"Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation.","'This sentence has commas, periods, and colons.'","import string

def tokenize(string):
    tokens = string.split()
    tokens = [token.strip(string.punctuation) for token in tokens]
    return tokens

tokenized_str = tokenize('This sentence has commas, periods, and colons.')
print(tokenized_str)
# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']",Data Type,4516,"import string

def tokenize(string):
    tokens = string.split()
    tokens = [token.strip(string.punctuation) for token in tokens]
    return tokens

tokenized_str = tokenize('This sentence has commas, periods, and colons.')
print(tokenized_str)
# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']","import string

    ___
    tokens = string.split()
    tokens = [token.strip(string.punctuation) for token in tokens]
    return tokens

tokenized_str = tokenize('This sentence has commas, periods, and colons.')
print(tokenized_str)
# Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']"
Create a Python class with a constructor and a `to_string` method that takes two integers and returns a formatted string.,The two integers are 7 and 5.,"class MyClass:
 def __init__(self, x, y):
 self.x = x
 self.y = y

def to_string(self):
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(7,5)
print(c.to_string())",Data Type,4517,"class MyClass:
 def __init__(self, x, y):
 self.x = x
 self.y = y

def to_string(self):
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(7,5)
print(c.to_string())","class MyClass:
    ___
 self.x = x
 self.y = y

    ___
 return f'The numbers are {self.x} and {self.y}.'

c = MyClass(7,5)
print(c.to_string())"
Implement a program in Python to detect the occurrence of a string in a given sentence.,"sentence: ""This is an example sentence""
string: ""example""","def detectString(sentence, string):
  if string in sentence:
    return ""String '{}' detected in the sentence"".format(string)
  else:
    return ""String '{}' not detected in the sentence"".format(string)

sentence = ""This is an example sentence""
string = ""example""

print(detectString(sentence, string))",Data Type,4540,"def detectString(sentence, string):
  if string in sentence:
    return ""String '{}' detected in the sentence"".format(string)
  else:
    return ""String '{}' not detected in the sentence"".format(string)

sentence = ""This is an example sentence""
string = ""example""

print(detectString(sentence, string))","    ___
    ___
    return ""String '{}' detected in the sentence"".format(string)
  else:
    return ""String '{}' not detected in the sentence"".format(string)

sentence = ""This is an example sentence""
string = ""example""

print(detectString(sentence, string))"
"Write a Python program to edit a given string and remove all occurances of ""the"".","string = ""the quick brown fox jumped over the lazy dog""","def remove_the(string):
  edited_string = string.replace(""the"", """")
  return edited_string

result = remove_the(""the quick brown fox jumped over the lazy dog"")
print(result)",Data Type,4551,"def remove_the(string):
  edited_string = string.replace(""the"", """")
  return edited_string

result = remove_the(""the quick brown fox jumped over the lazy dog"")
print(result)","    ___
  edited_string = string.replace(""the"", """")
  return edited_string

result = remove_the(""the quick brown fox jumped over the lazy dog"")
print(result)"
Write a Python program to reformat a string using a given dictionary.,"""Hello {name}, it's {time} to go"",{'name':'John', 'time':'2pm'}","def reformat_string(string, mapping):
    for k, v in mapping.items():
        string = string.replace('{' + k + '}', v)
    return string

if __name__ == ""__main__"":
    string = ""Hello {name}, it's {time} to go""
    mapping = {""name"": ""John"", ""time"": ""2pm""}
    print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go",Data Type,4556,"def reformat_string(string, mapping):
    for k, v in mapping.items():
        string = string.replace('{' + k + '}', v)
    return string

if __name__ == ""__main__"":
    string = ""Hello {name}, it's {time} to go""
    mapping = {""name"": ""John"", ""time"": ""2pm""}
    print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go","    ___
    ___
        string = string.replace('{' + k + '}', v)
    return string

    ___
    string = ""Hello {name}, it's {time} to go""
    mapping = {""name"": ""John"", ""time"": ""2pm""}
    print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go"
Create a program to find the frequency of characters in a given string in Python.,"Example string: ""abbccccdddde""","def find_character_frequency(string):
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}",Data Type,4563,"def find_character_frequency(string):
    freq = {} 
    for i in string: 
        if i in freq: 
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}","    ___
    freq = {} 
    ___
    ___
            freq[i] += 1
        else: 
            freq[i] = 1
    return freq
 
# example
string = ""abbccccdddde""
print(find_character_frequency(string))
# Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}"
Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string.,"Example binary string: ""1101011000""","def longestZeroSeq(inputStr):
    maxLength = 0 
   
    currentLength = 0
   
    for c in inputStr:
        if c == '0':
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength",Data Type,4567,"def longestZeroSeq(inputStr):
    maxLength = 0 
   
    currentLength = 0
   
    for c in inputStr:
        if c == '0':
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength","    ___
    maxLength = 0 
   
    currentLength = 0
   
    ___
    ___
            currentLength += 1
        else:
            maxLength = max(maxLength, currentLength) 
            currentLength = 0
   
    maxLength = max(maxLength, currentLength)
   
    return maxLength"
Can you write Python code to replace all the vowels with '*' in a string?,"""Hello, World!""","def replaceVowels(string):
    vowels = [""a"",""e"",""i"",""o"",""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    newstr = """"
    for char in string:
        if char in vowels:
            newstr += ""*""
        else:
            newstr += char
    return newstr

print(replaceVowels(""Hello, World!""))  # H*ll*, W*rld!",Data Type,4569,"def replaceVowels(string):
    vowels = [""a"",""e"",""i"",""o"",""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    newstr = """"
    for char in string:
        if char in vowels:
            newstr += ""*""
        else:
            newstr += char
    return newstr

print(replaceVowels(""Hello, World!""))  # H*ll*, W*rld!","    ___
    vowels = [""a"",""e"",""i"",""o"",""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    newstr = """"
    ___
    ___
            newstr += ""*""
        else:
            newstr += char
    return newstr

print(replaceVowels(""Hello, World!""))  # H*ll*, W*rld!"
Write a Python program to convert a given string to list of words,Hello world,"def convert_to_list(s):
    return s.split()

string = 'Hello world'
result = convert_to_list(string)
print(result)",Data Type,4576,"def convert_to_list(s):
    return s.split()

string = 'Hello world'
result = convert_to_list(string)
print(result)","    ___
    return s.split()

string = 'Hello world'
result = convert_to_list(string)
print(result)"
Design a program in Python to reverse the words of a given string.,"String s = ""This is an example sentence.""","def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This",Data Type,4588,"def reverseWords(s): 
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This","    ___
	# split the string 
	words = s.split(' ') 
	
	# reverse the words 
	words = words[::-1] 
	
	# join the words 
	reverseString = ' '.join(words)
	
	return reverseString 

s = ""This is an example sentence.""
print(reverseWords(s)) 
# Output: sentence. example an is This"
Write a python function to format a string according to provided parameters.,"Input string: ""Hello World""
Upper-Case Letters: True
Lower-Case Letters: False","def formatString(s, upperCaseLetters, lowerCaseLetters):
    newStr = """"
    if upperCaseLetters: 
        newStr = s.upper()
    elif lowerCaseLetters: 
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", True, False)) # Output: ""HELLO WORLD""",Data Type,4596,"def formatString(s, upperCaseLetters, lowerCaseLetters):
    newStr = """"
    if upperCaseLetters: 
        newStr = s.upper()
    elif lowerCaseLetters: 
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", True, False)) # Output: ""HELLO WORLD""","    ___
    newStr = """"
    ___
        newStr = s.upper()
    ___
        newStr = s.lower()
    return newStr

print(formatString(""Hello World"", True, False)) # Output: ""HELLO WORLD"""
Write a Python program that reads a list of strings and sorts them by the number of characters in each string.,"['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']","list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)",Data Type,4601,"list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)","list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']

# sort strings by length
list_of_strings.sort(key=len)

# print sorted list
print(list_of_strings)"
Design a solution in Python for determining the frequency of characters in a given string.,"""A quick brown fox jumps over the lazy dog.""","text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += 1
    else: 
            count[character] = 1
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))",Data Type,4607,"text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
for character in text: 
    if character in count: 
            count[character] += 1
    else: 
            count[character] = 1
  
for key in count: 
    print('%s appears %d times' % (key, count[key]))","text = ""A quick brown fox jumps over the lazy dog.""

count = {} 
    ___
    ___
            count[character] += 1
    else: 
            count[character] = 1
  
    ___
    print('%s appears %d times' % (key, count[key]))"
Create a python program to test if a given string is a palindrome,"str = ""level""","def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True",Data Type,4614,"def is_palindrome(str):
    for i in range(len(str) // 2):
        if str[i] != str[-i - 1]:
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True","    ___
    ___
    ___
            return False
    return True

# Test
result = is_palindrome(""level"")
print(result) # Output: True"
Write a function that takes a string and prints out the string in reverse.,Python,"def reverse_string(s):
  return s[::-1]
  
print(reverse_string('Python'))  # nohtyP",Data Type,4623,"def reverse_string(s):
  return s[::-1]
  
print(reverse_string('Python'))  # nohtyP","    ___
  return s[::-1]
  
print(reverse_string('Python'))  # nohtyP"
"Given a string, convert it to a list of words.","String: ""Hello there, how are you?""","# Python code to convert a string 
# to a list of words 

# Split a string by a delimiter 
def string_split(string): 
    # Split the string into words 
    words = string.split(' ') 
  
    return words 
      
# Driver code 
string = ""Hello there, how are you?""
print(string_split(string))",Data Type,4634,"# Python code to convert a string 
# to a list of words 

# Split a string by a delimiter 
def string_split(string): 
    # Split the string into words 
    words = string.split(' ') 
  
    return words 
      
# Driver code 
string = ""Hello there, how are you?""
print(string_split(string))","# Python code to convert a string 
# to a list of words 

# Split a string by a delimiter 
    ___
    # Split the string into words 
    words = string.split(' ') 
  
    return words 
      
# Driver code 
string = ""Hello there, how are you?""
print(string_split(string))"
Create a program in Python to extract the first and last names from a string of full names.,Elizabeth W. Jennings,"names = input().split()

first_name = names[0]
last_name = names[-1]

print('First Name:', first_name)
print('Last Name:', last_name)",Data Type,4641,"names = input().split()

first_name = names[0]
last_name = names[-1]

print('First Name:', first_name)
print('Last Name:', last_name)","names = input().split()

first_name = names[0]
last_name = names[-1]

print('First Name:', first_name)
print('Last Name:', last_name)"
Write a Python program that parses a single URL from a given string.,"""https://www.example.com/index.php?p=1&q=2""","import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)",Data Type,4646,"import re

def parse_url(url):
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)","import re

    ___
    regex = r""^(https?://[^/]+)(.*)$""
    match = re.search(regex, url)
    return match.group(1), match.group(2)

url, query = parse_url(""https://www.example.com/index.php?p=1&q=2"")
print(""URL:"", url)
print(""Query:"", query)"
Develop an algorithm in Python to reverse a given string.,"""Hello World!""","def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

result = reverse_string(""Hello World!"")
print(result)",Data Type,4650,"def reverse_string(string):
    reversed_string = """"
    for char in string:
        reversed_string = char + reversed_string
    return reversed_string

result = reverse_string(""Hello World!"")
print(result)","    ___
    reversed_string = """"
    ___
        reversed_string = char + reversed_string
    return reversed_string

result = reverse_string(""Hello World!"")
print(result)"
Write a Python script to change all letter cases in a given string.,This Is A Test String,"def change_case(txt):
    result = """"
    for ch in txt:
        if ch.isupper():
            result += ch.lower()
        elif ch.islower():
            result += ch.upper()
    return result

txt = ""This Is A Test String""
result = change_case(txt)
print(result)",Data Type,4653,"def change_case(txt):
    result = """"
    for ch in txt:
        if ch.isupper():
            result += ch.lower()
        elif ch.islower():
            result += ch.upper()
    return result

txt = ""This Is A Test String""
result = change_case(txt)
print(result)","    ___
    result = """"
    ___
    ___
            result += ch.lower()
    ___
            result += ch.upper()
    return result

txt = ""This Is A Test String""
result = change_case(txt)
print(result)"
Write a Python function to check if a given string is an anagram or not.,"str1 = ""listen"", str2 = ""silent""","def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2",Data Type,4658,"def is_anagram(str1, str2): 
    if len(str1) != len(str2): 
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2","    ___
    ___
        return False 
    str1 = sorted(str1.lower()) 
    str2 = sorted(str2.lower()) 
    return str1 == str2"
Create a Python function for reversing a string.,"string = ""hello world!""","def reverse_string(string):
    string = string[::-1]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh""",Data Type,4662,"def reverse_string(string):
    string = string[::-1]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh""","    ___
    string = string[::-1]
    return string

result = reverse_string(string)
print(result) # output -> ""!dlrow olleh"""
Write a Python program to format a given string with a coefficient of over 66%.,"s = ""Hello World""","def format_string(s):
 return s.upper() if (s.count("" "")+1) / len(s) > 0.66 else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD",Data Type,4670,"def format_string(s):
 return s.upper() if (s.count("" "")+1) / len(s) > 0.66 else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD","    ___
 return s.upper() if (s.count("" "")+1) / len(s) > 0.66 else s

s = ""Hello World""
print(format_string(s))
# Output: HELLO WORLD"
Create a function in Python that takes an input string and returns whether it is a palindrome.,"txt = ""madam""","def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True",Data Type,4686,"def isPalindrome(txt):
    i = 0
    j = len(txt) - 1
    
    while i < j:
        if txt[i] != txt[j]:
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True","    ___
    i = 0
    j = len(txt) - 1
    
    ___
    ___
            return False
        i += 1
        j -= 1
    
    return True

print(isPalindrome(txt)) // True"
Write a Python program to format a specified string to limit the number of characters to 6.,String: Hello World,"def limit_chars(string):
    # Limit the number of character to 6
    limited_string = string[:6]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)",Data Type,4691,"def limit_chars(string):
    # Limit the number of character to 6
    limited_string = string[:6]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)","    ___
    # Limit the number of character to 6
    limited_string = string[:6]
    return limited_string

string = ""Hello World""
result = limit_chars(string)
print(result)"
Split the following string into words in Python,string = 'this_is_a_string_in_python',"# Split the string by '_' separator
words = string.split('_')

# Print each word separately
for word in words:
    print(word)",Data Type,4700,"# Split the string by '_' separator
words = string.split('_')

# Print each word separately
for word in words:
    print(word)","# Split the string by '_' separator
words = string.split('_')

# Print each word separately
    ___
    print(word)"
"Write a Python program to convert a given string to a list, using a specified delimiter.","""red, blue, green"", delimiter = "",""","def string_to_list(string, delimiter):
 list = string.split(delimiter)
 return list

string = ""red, blue, green""
delimiter = "",""
print(string_to_list(string, delimiter))",Data Type,4701,"def string_to_list(string, delimiter):
 list = string.split(delimiter)
 return list

string = ""red, blue, green""
delimiter = "",""
print(string_to_list(string, delimiter))","    ___
 list = string.split(delimiter)
 return list

string = ""red, blue, green""
delimiter = "",""
print(string_to_list(string, delimiter))"
"Given an input string, write a Python program to count the occurrence of each character in the string.","""Hello, World!""","def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4709,"def char_occurrences(a_string):
 char_count = {}
 for char in a_string:
 if char in char_count:
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}","    ___
 char_count = {}
    ___
    ___
 char_count[char] += 1
 else:
 char_count[char] = 1
 return char_count

string = ""Hello, World!""
print(char_occurrences(string))

# Output
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
Construct a Python program to perform sentiment analysis on an input string and output the sentiment score.,Example sentence: I had a great day yesterday,"import nltk

sentence = ""I had a great day yesterday""

words = nltk.word_tokenize(sentence)

text = nltk.Text(words)

polarity_score = text.polarity_scores()

print(polarity_score)",Data Type,4713,"import nltk

sentence = ""I had a great day yesterday""

words = nltk.word_tokenize(sentence)

text = nltk.Text(words)

polarity_score = text.polarity_scores()

print(polarity_score)","import nltk

sentence = ""I had a great day yesterday""

words = nltk.word_tokenize(sentence)

text = nltk.Text(words)

polarity_score = text.polarity_scores()

print(polarity_score)"
Write a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list.,"['a', 'b', 'c', 'a', 'b']","def count_strings(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)",Data Type,4729,"def count_strings(lst):
    result = {}
    for item in lst:
        if item in result:
            result[item] += 1
        else:
            result[item] = 1
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)","    ___
    result = {}
    ___
    ___
            result[item] += 1
        else:
            result[item] = 1
    return result

list_of_strings = ['a', 'b', 'c', 'a', 'b']
result = count_strings(list_of_strings)
print(result)"
Write a Python program that counts the occurrence of each string in a dictionary.,"data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}","data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}

counts = {}
for key, value in data.items():
    if key in counts:
        counts[key] += 1
    else:
        counts[key] = 1

print(counts)",Data Type,4748,"data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}

counts = {}
for key, value in data.items():
    if key in counts:
        counts[key] += 1
    else:
        counts[key] = 1

print(counts)","data = {""foo"": 1, ""bar"": 2, ""baz"": 3, ""foo"": 4, ""bar"": 5}

counts = {}
    ___
    ___
        counts[key] += 1
    else:
        counts[key] = 1

print(counts)"
Write a function in Python that takes a string as input and converts it to title case.,"s = ""this is a test string""","def convertToTitleCase(s):
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String",Data Type,4754,"def convertToTitleCase(s):
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String","    ___
    return ' '.join(word[0].upper() + word[1:] for word in s.split())
 
print(convertToTitleCase(""this is a test string""))  # Output: This Is A Test String"
Write a python code to extract the phone number and email address from a provided string,"txt =""John Smith-555-1234, john.s@example.com""","import re

txt =""John Smith-555-1234, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print(""Email Address ="", email)",Data Type,4759,"import re

txt =""John Smith-555-1234, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print(""Email Address ="", email)","import re

txt =""John Smith-555-1234, john.s@example.com""

# Phone Number
phone = re.findall(r'\d{3}-\d{4}', txt)[0]
print(""Phone Number ="", phone) 

# Email Address
email = re.findall(r'\S+@\S+', txt)[0]
print(""Email Address ="", email)"
"Generate a function in Python using the input argument that takes in a string, removes all the vowels from it, and returns a new string without any vowels.",the quick brown fox jumps over the lazy dog,"def remove_vowels(text):
    no_vowels = """"
    for character in text:
        if character not in ""aeiouAEIOU"":
            no_vowels += character
    return no_vowels",Data Type,4762,"def remove_vowels(text):
    no_vowels = """"
    for character in text:
        if character not in ""aeiouAEIOU"":
            no_vowels += character
    return no_vowels","    ___
    no_vowels = """"
    ___
    ___
            no_vowels += character
    return no_vowels"
Implement a Python function that will take two strings and return true if the first string contains the second.,"query = ""catering""
word = ""cat""","def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)",Data Type,4770,"def check_contains(query, word): 
    if query.find(word) != -1:
        return True
    return False

result = check_contains(query, word)","    ___
    ___
        return True
    return False

result = check_contains(query, word)"
Produce a Python program which parses a given html string and extracts all text from it.,"HTML String: ""<p>This is a <strong>html</strong> string.</p>""","def get_text_from_html(html_str):
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=True)
    return ' '.join(all_text)",Data Type,4777,"def get_text_from_html(html_str):
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=True)
    return ' '.join(all_text)","    ___
    soup = BeautifulSoup(html_str, 'html.parser')
    all_text = soup.find_all(text=True)
    return ' '.join(all_text)"
"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.","String1: 'abc'
String2: 'xyz'","def strings_swap(s1, s2): 
	new_s1 = s2[:2] + s1[2:] 
	new_s2 = s1[:2] + s2[2:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'",Data Type,4789,"def strings_swap(s1, s2): 
	new_s1 = s2[:2] + s1[2:] 
	new_s2 = s1[:2] + s2[2:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'","    ___
	new_s1 = s2[:2] + s1[2:] 
	new_s2 = s1[:2] + s2[2:] 
	return new_s1 + ' ' + new_s2 
	
strings_swap('abc', 'xyz') # 'xyc abz'"
Compose a Python script to find the longest word in a given string.,"Str = ""Hello World!""","def longest_word(str):
    words = str.split() 
    longest_word = """"
    max_length = 0
  
    for word in words: 
        if len(word) > max_length: 
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))",Data Type,4808,"def longest_word(str):
    words = str.split() 
    longest_word = """"
    max_length = 0
  
    for word in words: 
        if len(word) > max_length: 
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))","    ___
    words = str.split() 
    longest_word = """"
    max_length = 0
  
    ___
    ___
            max_length = len(word) 
            longest_word = word 
  
    return longest_word
  
str = ""Hello World!""
print(longest_word(str))"
Create an algorithm in Python that takes in a string and returns the number of words in the string.,"""Hello world""","def word_count(s):
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # 2",Data Type,4827,"def word_count(s):
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # 2","    ___
	words = s.split()
	return len(words)

s = ""Hello world""

print(word_count(s)) # 2"
Construct a python program which will receive a string and output the same string in reverse.,"string = ""Hello World!""","def reverse_string(string):
    return string[::-1]",Data Type,4860,"def reverse_string(string):
    return string[::-1]","    ___
    return string[::-1]"
"Given a string containing words separated by spaces, write a Python function to remove any duplicates.","""I have to go go shopping shopping""","def remove_duplicates(string):
words = string.split("" "")
unique_words = set(words)
return "" "".join(unique_words)

remove_duplicates(""I have to go go shopping shopping"") # ""I have to go shopping""",Data Type,4879,"def remove_duplicates(string):
words = string.split("" "")
unique_words = set(words)
return "" "".join(unique_words)

remove_duplicates(""I have to go go shopping shopping"") # ""I have to go shopping""","    ___
words = string.split("" "")
unique_words = set(words)
return "" "".join(unique_words)

remove_duplicates(""I have to go go shopping shopping"") # ""I have to go shopping"""
Write a Python code snippet to convert a string to a dictionary.,'student=John&grade=A',"my_dict = dict(item.split(""="") for item in s.split(""&""))

print(my_dict) # prints {'student': 'John', 'grade': 'A'}",Data Type,4884,"my_dict = dict(item.split(""="") for item in s.split(""&""))

print(my_dict) # prints {'student': 'John', 'grade': 'A'}","my_dict = dict(item.split(""="") for item in s.split(""&""))

print(my_dict) # prints {'student': 'John', 'grade': 'A'}"
Build a Python program to sort a list of strings by the length of the string in descending order.,"[""cat"", ""dog"", ""elephant"", ""tiger""]","def sort_list(list):
    return sorted(list, key=lambda x: len(x), reverse=True)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]",Data Type,4898,"def sort_list(list):
    return sorted(list, key=lambda x: len(x), reverse=True)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]","    ___
    return sorted(list, key=lambda x: len(x), reverse=True)

list = [""cat"", ""dog"", ""elephant"", ""tiger""]
print(sort_list(list))

# Output: [""elephant"", ""tiger"", ""dog"", ""cat""]"
Edit an existing Python script to search for and delete duplicated words in a string.,my_string = 'this this string contains contains duplicate duplicate words words',"my_string = 'this string contains duplicate words' 

my_string = my_string.split() 
res = [] 
for i in my_string: 
    if i not in res: 
        res.append(i) 

my_string = ' '.join(res) 
print(my_string)",Data Type,4900,"my_string = 'this string contains duplicate words' 

my_string = my_string.split() 
res = [] 
for i in my_string: 
    if i not in res: 
        res.append(i) 

my_string = ' '.join(res) 
print(my_string)","my_string = 'this string contains duplicate words' 

my_string = my_string.split() 
res = [] 
    ___
    ___
        res.append(i) 

my_string = ' '.join(res) 
print(my_string)"
"Create a Python 3 program that takes as input a list of numbers (num1, num2,...,numN) and transforms it into the string “num1 + num2 + ... + numN = sum”, where sum is the sum of the numbers.","[5, 3, 2, 6, 8]","nums = [5, 3, 2, 6, 8]
sum = 0
out_string = """"

for num in nums:
 sum += num
 out_string += str(num)
 
 if num != nums[-1]:
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += str(sum)

print(out_string)",Data Type,4904,"nums = [5, 3, 2, 6, 8]
sum = 0
out_string = """"

for num in nums:
 sum += num
 out_string += str(num)
 
 if num != nums[-1]:
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += str(sum)

print(out_string)","nums = [5, 3, 2, 6, 8]
sum = 0
out_string = """"

    ___
 sum += num
 out_string += str(num)
 
    ___
  out_string += "" + ""
 else:
  out_string += "" = ""
  
out_string += str(sum)

print(out_string)"
Write a Python program to convert the input array of strings into a dictionary with keys as the string and the values as the index of the string in the array.,"['foo', 'bar', 'baz', 'qux']","my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}",Data Type,4910,"my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}","my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], 
                  range(len(['foo', 'bar', 'baz', 'qux']))))

print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}"
Optimize a Python program to convert all lowercase letters in a string to uppercase in the most efficient way.,"lowercase.txt
Hello World","# Open the input file
with open('lowercase.txt') as file:
    content = file.read()

# Convert the string to uppercase using a list comprehension
uppercase = ''.join([c.upper() for c in content])

print('Converted string to uppercase:', uppercase)",Data Type,4926,"# Open the input file
with open('lowercase.txt') as file:
    content = file.read()

# Convert the string to uppercase using a list comprehension
uppercase = ''.join([c.upper() for c in content])

print('Converted string to uppercase:', uppercase)","# Open the input file
with open('lowercase.txt') as file:
    content = file.read()

# Convert the string to uppercase using a list comprehension
uppercase = ''.join([c.upper() for c in content])

print('Converted string to uppercase:', uppercase)"
Write a Python program to use Regular Expressions to search and replace a given string.,"text = ""He is an excellent programmer""","import re

text = ""He is an excellent programmer""

def find_and_replace(text, pattern, replacement):
    return re.sub(pattern, replacement, text)

result = find_and_replace(text, r""excellent"", ""brilliant"")
print(result)",Data Type,4929,"import re

text = ""He is an excellent programmer""

def find_and_replace(text, pattern, replacement):
    return re.sub(pattern, replacement, text)

result = find_and_replace(text, r""excellent"", ""brilliant"")
print(result)","import re

text = ""He is an excellent programmer""

    ___
    return re.sub(pattern, replacement, text)

result = find_and_replace(text, r""excellent"", ""brilliant"")
print(result)"
Optimize the following python code to search for a substring in a given string.,"String = “GeeksforGeeks”, Substring = “for”","def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False",Data Type,4939,"def containsSubstring(str, sub):
    for i in range(len(str)-len(sub)+1):
        j = 0
        while j < len(sub) and sub[j] == str[i+j]:
            j += 1
        if j == len(sub):
            return True
    return False","    ___
    ___
        j = 0
    ___
            j += 1
    ___
            return True
    return False"
Write a python program that takes in a given list of string and then prints out a list of all the anagrams of those strings.,"strings = [""dear"", ""read"", ""dare""]","def find_anagrams(strings):
    anagrams = []

    for string in strings:
        temp = [string]
        for s in strings:
            if sorted(string) == sorted(s) and string != s:
                temp.append(s)
        anagrams.append(temp)
 
    return anagrams",Data Type,4943,"def find_anagrams(strings):
    anagrams = []

    for string in strings:
        temp = [string]
        for s in strings:
            if sorted(string) == sorted(s) and string != s:
                temp.append(s)
        anagrams.append(temp)
 
    return anagrams","    ___
    anagrams = []

    ___
        temp = [string]
    ___
    ___
                temp.append(s)
        anagrams.append(temp)
 
    return anagrams"
Construct a Python script that deletes all the characters in a given string except for the vowels.,"""Hello World!""","# Get the input string
string = ""Hello World!""

# Modify the string
vowels = ""aeiou""
new_string = """"
for char in string:
    if char in vowels:
        new_string += char

# Print the string
print(new_string)
# prints ""eoo""",Data Type,4944,"# Get the input string
string = ""Hello World!""

# Modify the string
vowels = ""aeiou""
new_string = """"
for char in string:
    if char in vowels:
        new_string += char

# Print the string
print(new_string)
# prints ""eoo""","# Get the input string
string = ""Hello World!""

# Modify the string
vowels = ""aeiou""
new_string = """"
    ___
    ___
        new_string += char

# Print the string
print(new_string)
# prints ""eoo"""
Develop a Python function to remove the last n characters from a given string.,String = “Hello Programmers!”,"def remove_last_n_characters(str, n):
  return str[:len(str)-n]",Data Type,4946,"def remove_last_n_characters(str, n):
  return str[:len(str)-n]","    ___
  return str[:len(str)-n]"
Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer.,"'Hello World', 5","def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', 5))",Data Type,4947,"def truncateString(inputString, length):
    return inputString[:length]

print(truncateString('Hello World', 5))","    ___
    return inputString[:length]

print(truncateString('Hello World', 5))"
Create a python program to take as input a list of strings and concatenate them into a single string.,"list = [""alpha"", ""beta"", ""gamma""]","def concatenate_list(list):
    result = """"
    for item in list:
        result += item
    return result",Data Type,4953,"def concatenate_list(list):
    result = """"
    for item in list:
        result += item
    return result","    ___
    result = """"
    ___
        result += item
    return result"
Write a function in Python to check whether a given string is in lower case or not.,String: ThisIsAnExample,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True",Data Type,4957,"def is_lowercase(string):
    for character in string:
        if character != character.lower():
            return False
    return True","    ___
    ___
    ___
            return False
    return True"
Write a Python program that takes a string and prints the frequency of each character in the string.,"""Code Generation Task""","# Frequency of each character in the string

string = ""Code Generation Task""

for i in string:
    print(""Number of Occurrence of"", i, ""is"", string.count(i))",Data Type,4959,"# Frequency of each character in the string

string = ""Code Generation Task""

for i in string:
    print(""Number of Occurrence of"", i, ""is"", string.count(i))","# Frequency of each character in the string

string = ""Code Generation Task""

    ___
    print(""Number of Occurrence of"", i, ""is"", string.count(i))"
Reverse a string via a Python function.,String: Hello,"def reverse_string(string):
    return string[::-1]

result = reverse_string(""Hello"")
print(result)",Data Type,4960,"def reverse_string(string):
    return string[::-1]

result = reverse_string(""Hello"")
print(result)","    ___
    return string[::-1]

result = reverse_string(""Hello"")
print(result)"
"Write a Python script that takes two string inputs, a first name and a last name and returns the full name.","""John""
""Smith""","def get_full_name(first, last):
  full_name = f""{first} {last}""
  return full_name

name = get_full_name(""John"", ""Smith"")
print(name)",Data Type,4962,"def get_full_name(first, last):
  full_name = f""{first} {last}""
  return full_name

name = get_full_name(""John"", ""Smith"")
print(name)","    ___
  full_name = f""{first} {last}""
  return full_name

name = get_full_name(""John"", ""Smith"")
print(name)"
Write a Python program that takes a string as input and returns a list of words.,"""The quick brown fox jumps over the lazy dog""","def get_words(input_str):
    return input_str.split()

result = get_words(""The quick brown fox jumps over the lazy dog"")
print(result)",Data Type,4963,"def get_words(input_str):
    return input_str.split()

result = get_words(""The quick brown fox jumps over the lazy dog"")
print(result)","    ___
    return input_str.split()

result = get_words(""The quick brown fox jumps over the lazy dog"")
print(result)"
Design a program using Python that capitalizes the first letter of every word in a given string.,"string = ""this is a sentence""","def capitalize(string):
    words = string.split() 
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))",Data Type,4968,"def capitalize(string):
    words = string.split() 
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))","    ___
    words = string.split() 
    capitalized_words = [word[0].upper() + word[1:] for word in words]
    return "" "".join(capitalized_words)

print(capitalize(""this is a sentence""))"
Generate code in Python to identify the type of an input number.,Number: 100,"if(type(100) == int):
    print(""It is an integer"")
elif(type(100) == float):
    print(""It is a float"")",Data Type,4975,"if(type(100) == int):
    print(""It is an integer"")
elif(type(100) == float):
    print(""It is a float"")","if(type(100) == int):
    print(""It is an integer"")
elif(type(100) == float):
    print(""It is a float"")"
Create a python function that takes two inputs as a string and returns their concatenated output.,"String a = 'Hello'
String b = 'World'","def concat(a,b):
    return a+b",Data Type,4976,"def concat(a,b):
    return a+b","    ___
    return a+b"
Create a function in Python to remove all the occurences of a given letter in a string.,"letter = 'a', 
string = 'Abra Cadabra'","def remove_occurences(letter, string):
	return string.replace(letter, '')",Data Type,4978,"def remove_occurences(letter, string):
	return string.replace(letter, '')","    ___
	return string.replace(letter, '')"
Write a Python function to split a given string into equal parts in a loop.,"string = ""Hello World""","def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result",Data Type,4987,"def split_string(string):
    result = []
    for i in range(0, len(string), int(len(string) / 2)):
        result.append(string[i: i + int(len(string) / 2)])
    return result","    ___
    result = []
    ___
        result.append(string[i: i + int(len(string) / 2)])
    return result"
Generate a program in python to capitalize the first letter of each word in a string.,my name is john,"def capitalize(string):
    words = string.split()
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)",Data Type,4988,"def capitalize(string):
    words = string.split()
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)","    ___
    words = string.split()
    capitalized_words = [word.capitalize() for word in words]
    return "" "".join(capitalized_words)"
Implement a function in Python to determine the number of each character in a string.,"String: ""Hello, World!""","def count_characters(my_string):
    my_dict = dict()
    for character in my_string:
        if character in my_dict:
            my_dict[character] += 1
        else:
            my_dict[character] = 1
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}",Data Type,4989,"def count_characters(my_string):
    my_dict = dict()
    for character in my_string:
        if character in my_dict:
            my_dict[character] += 1
        else:
            my_dict[character] = 1
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}","    ___
    my_dict = dict()
    ___
    ___
            my_dict[character] += 1
        else:
            my_dict[character] = 1
    return my_dict

String = ""Hello, World!""
print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"
Generate a code in Python to extract the capital letters from a given string.,Hello World!,"def extract_capitals(string):
    capitals = """"
    for character in string:
        if character.isupper():
            capitals += character
    return capitals

# Main program
input_string = ""Hello World!""
capitals = extract_capitals(input_string)
print(capitals)",Data Type,5004,"def extract_capitals(string):
    capitals = """"
    for character in string:
        if character.isupper():
            capitals += character
    return capitals

# Main program
input_string = ""Hello World!""
capitals = extract_capitals(input_string)
print(capitals)","    ___
    capitals = """"
    ___
    ___
            capitals += character
    return capitals

# Main program
input_string = ""Hello World!""
capitals = extract_capitals(input_string)
print(capitals)"
Suggest the python code for detecting the position of a character in a string.,"String: ""Hello World!""
Character: ""!""","def position_of_char(string, char):
    '''This function will detect the position of a character in a string.'''
    return string.index(char)",Data Type,5006,"def position_of_char(string, char):
    '''This function will detect the position of a character in a string.'''
    return string.index(char)","    ___
    '''This function will detect the position of a character in a string.'''
    return string.index(char)"
Convert a given string to an array of characters using Python.,"str = ""Hello World!""","""""""
Convert a given string to an array of characters using Python
""""""

str = ""Hello World!""

list = []

for character in str:
    list.append(character)
    
print(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']",Data Type,5008,"""""""
Convert a given string to an array of characters using Python
""""""

str = ""Hello World!""

list = []

for character in str:
    list.append(character)
    
print(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']","""""""
Convert a given string to an array of characters using Python
""""""

str = ""Hello World!""

list = []

    ___
    list.append(character)
    
print(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']"
Write a Python code snippet for encrypting a given string using secret key.,"secret_key = 'test'
string = 'hello world'","import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)",Data Type,5018,"import base64

def encrypt(key, string):
    enc = []
    for i in range(len(string)):
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)","import base64

    ___
    enc = []
    ___
        key_c = key[i % len(key)]
        enc_c = chr((ord(string[i]) + ord(key_c)) % 256)
        enc.append(enc_c)
    return base64.urlsafe_b64encode("""".join(enc).encode()).decode()

encrypted_string = encrypt(secret_key, string)
print(encrypted_string)"
Generate a Python program to group a given list of strings into a dictionary based on the length of the string.,"words = [""apple"", ""cat"", ""robot"", ""fly"", ""revolution""]","words = [""apple"", ""cat"", ""robot"", ""fly"", ""revolution""]

words_by_length = {}

for word in words:
 length = len(word)
 if length not in words_by_length:
 words_by_length[length] = []
 words_by_length[length].append(word)",Data Type,5019,"words = [""apple"", ""cat"", ""robot"", ""fly"", ""revolution""]

words_by_length = {}

for word in words:
 length = len(word)
 if length not in words_by_length:
 words_by_length[length] = []
 words_by_length[length].append(word)","words = [""apple"", ""cat"", ""robot"", ""fly"", ""revolution""]

words_by_length = {}

    ___
 length = len(word)
    ___
 words_by_length[length] = []
 words_by_length[length].append(word)"
Write a function that takes two strings and returns a new string of the longest length.,"""Python"", ""programming""","def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longest_str = longest_string(""Python"", ""programming"")
print(longest_str)",Data Type,5032,"def longest_string(string1, string2):
    if len(string1) > len(string2):
        return string1
    else:
        return string2

longest_str = longest_string(""Python"", ""programming"")
print(longest_str)","    ___
    ___
        return string1
    else:
        return string2

longest_str = longest_string(""Python"", ""programming"")
print(longest_str)"
Develop a method in Python that takes a string as an input and outputs the number of vowels in the string.,"string = ""Hello World""","def vowel_count(string):
  count = 0
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += 1
  
  return count

print(vowel_count(""Hello World""))",Data Type,5035,"def vowel_count(string):
  count = 0
  vowels = 'aeiou'
  for char in string.lower():
    if char in vowels:
      count += 1
  
  return count

print(vowel_count(""Hello World""))","    ___
  count = 0
  vowels = 'aeiou'
    ___
    ___
      count += 1
  
  return count

print(vowel_count(""Hello World""))"
Generate a python program to modify all the characters in a string to lowercase,"string = ""HELLO WORLD""","def to_lowercase(string):
    lowercase_string = """"
    for char in string:
        lowercase_string += char.lower()
    return lowercase_string

if __name__ == '__main__':
    string = ""HELLO WORLD""
    print(to_lowercase(string))",Data Type,5036,"def to_lowercase(string):
    lowercase_string = """"
    for char in string:
        lowercase_string += char.lower()
    return lowercase_string

if __name__ == '__main__':
    string = ""HELLO WORLD""
    print(to_lowercase(string))","    ___
    lowercase_string = """"
    ___
        lowercase_string += char.lower()
    return lowercase_string

    ___
    string = ""HELLO WORLD""
    print(to_lowercase(string))"
Write a python code to extract the year from a string.,"string = ""This movie was released in 1980""","import re

string = ""This movie was released in 1980""

# search for substring of 4 digits
result = re.search(r'\d{4}', string)

# print the year
if result:
    print(result.group())",Data Type,5040,"import re

string = ""This movie was released in 1980""

# search for substring of 4 digits
result = re.search(r'\d{4}', string)

# print the year
if result:
    print(result.group())","import re

string = ""This movie was released in 1980""

# search for substring of 4 digits
result = re.search(r'\d{4}', string)

# print the year
    ___
    print(result.group())"
Write a Python program to compare two strings to determine which string would appear first in alphabetical order.,"string1 = ""hello""
string2 = ""world""","string1 = ""hello""
string2 = ""world""

if string1 < string2:
    print(string1 + "" comes before "" + string2 + "" alphabetically"")
else:
    print(string2 + "" comes before "" + string1 + "" alphabetically"")",Data Type,5053,"string1 = ""hello""
string2 = ""world""

if string1 < string2:
    print(string1 + "" comes before "" + string2 + "" alphabetically"")
else:
    print(string2 + "" comes before "" + string1 + "" alphabetically"")","string1 = ""hello""
string2 = ""world""

    ___
    print(string1 + "" comes before "" + string2 + "" alphabetically"")
else:
    print(string2 + "" comes before "" + string1 + "" alphabetically"")"
"In Python, create a function to find the difference in number of a's and b's in a string.",abcdba,"def countDifference(s): 
   a_count = 0
   b_count = 0
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + 1
       elif (s[i] == 'b'): 
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))",Data Type,5060,"def countDifference(s): 
   a_count = 0
   b_count = 0
   for i in range(len(s)):  
       if (s[i] == 'a'): 
           a_count = a_count + 1
       elif (s[i] == 'b'): 
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))","    ___
   a_count = 0
   b_count = 0
    ___
    ___
           a_count = a_count + 1
    ___
           b_count = b_count + 1
   diff = a_count - b_count
   return diff

print(countDifference('abcdba'))"
Analyze a given text to extract the entities(with their type) in the text using a Python script.,The President Barack Obama was born in Hawaii.,"import spacy

text = ""The President Barack Obama was born in Hawaii.""

nlp = spacy.load(""en_core_web_sm"")
doc = nlp(text)

for entity in doc.ents:
    print(f""{entity.text} ({entity.label_})"")

Output: 
The President (ORG)
Barack Obama (PERSON)
Hawaii (GPE)",Data Type,5061,"import spacy

text = ""The President Barack Obama was born in Hawaii.""

nlp = spacy.load(""en_core_web_sm"")
doc = nlp(text)

for entity in doc.ents:
    print(f""{entity.text} ({entity.label_})"")

Output: 
The President (ORG)
Barack Obama (PERSON)
Hawaii (GPE)","import spacy

text = ""The President Barack Obama was born in Hawaii.""

nlp = spacy.load(""en_core_web_sm"")
doc = nlp(text)

    ___
    print(f""{entity.text} ({entity.label_})"")

Output: 
The President (ORG)
Barack Obama (PERSON)
Hawaii (GPE)"
Create a Python script that takes a list of strings as an input and prints the length of each string in the list.,"words = ['dog', 'cat', 'spring', 'summer']","words = ['dog', 'cat', 'spring', 'summer']
for word in words:
    print(len(word))",Data Type,5064,"words = ['dog', 'cat', 'spring', 'summer']
for word in words:
    print(len(word))","words = ['dog', 'cat', 'spring', 'summer']
    ___
    print(len(word))"
Generate a Python program that can take any type of input and return 'Valid' or 'Invalid'.,No input,"def check_input(data):
    if type(data) in [int, str, list, dict, set]:
        return 'Valid'
    else:
        return 'Invalid'",Data Type,5082,"def check_input(data):
    if type(data) in [int, str, list, dict, set]:
        return 'Valid'
    else:
        return 'Invalid'","    ___
    ___
        return 'Valid'
    else:
        return 'Invalid'"
Write a Python program to convert ratings in a list of strings to a float.,"['4.5', '3.0', '2.5', '4.0']","def str_to_float(ratings):
    return [float(x) for x in ratings]",Data Type,5083,"def str_to_float(ratings):
    return [float(x) for x in ratings]","    ___
    return [float(x) for x in ratings]"
Write a function in Python to select the 3rd character from each string in the given list.,"['IronMan', 'Hulk', 'Thor', 'Captain America']","def third_char(lst):
 third_chars = """"
 for word in lst:
 third_chars += word[2]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])",Data Type,5088,"def third_char(lst):
 third_chars = """"
 for word in lst:
 third_chars += word[2]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])","    ___
 third_chars = """"
    ___
 third_chars += word[2]
 return third_chars

third_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])"
"Create a function in Python to convert a hexadecimal string (e.g. ""0xBA"") to a binary string (e.g. ""10111010"").","""0xA2""","def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""",Data Type,5095,"def hex_to_binary(hex_str):
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010""","    ___
    # convert hex to int 
    num = int(hex_str, 16)
    # convert int to binary string
    bin_str = bin(num)[2:]
    
    return bin_str

print(hex_to_binary(""0xA2""))
# Output: ""10100010"""
Develop an algorithm to remove the duplicate words in a given string.,"""I love coding love coding Python""","def remove_duplicates(string): 
    words = string.split("" "") 
    res = [] 
    for word in words: 
        if word not in res: 
            res.append(word) 
    return ("" "".join(res)) 

string = ""I love coding love coding Python""
res = remove_duplicates(string) 
print(""String after removing duplicates:"")
print(res)",Data Type,5101,"def remove_duplicates(string): 
    words = string.split("" "") 
    res = [] 
    for word in words: 
        if word not in res: 
            res.append(word) 
    return ("" "".join(res)) 

string = ""I love coding love coding Python""
res = remove_duplicates(string) 
print(""String after removing duplicates:"")
print(res)","    ___
    words = string.split("" "") 
    res = [] 
    ___
    ___
            res.append(word) 
    return ("" "".join(res)) 

string = ""I love coding love coding Python""
res = remove_duplicates(string) 
print(""String after removing duplicates:"")
print(res)"
Write a Python program to search for a specific word in a given string and return the number of times the string appears.,"String: ""Hello, world! This is a sample message.""
Word: ""hello""","string = ""Hello, world! This is a sample message.""
word = ""hello""

count = string.lower().split().count(word.lower())
print(f""The word {word} appears {count} times in the given string."")",Data Type,5105,"string = ""Hello, world! This is a sample message.""
word = ""hello""

count = string.lower().split().count(word.lower())
print(f""The word {word} appears {count} times in the given string."")","string = ""Hello, world! This is a sample message.""
word = ""hello""

count = string.lower().split().count(word.lower())
print(f""The word {word} appears {count} times in the given string."")"
Create a Python script to remove all punctuation from a string.,String: A text containing punctuation marks.,"import string

# Define the input string
inp_str = ""A text containing punctuation marks.""

# Remove all punctuation
out_str = inp_str.translate(str.maketrans('', '', string.punctuation))

print(out_str) # Output: A text containing punctuation marks",Data Type,5109,"import string

# Define the input string
inp_str = ""A text containing punctuation marks.""

# Remove all punctuation
out_str = inp_str.translate(str.maketrans('', '', string.punctuation))

print(out_str) # Output: A text containing punctuation marks","import string

# Define the input string
inp_str = ""A text containing punctuation marks.""

# Remove all punctuation
out_str = inp_str.translate(str.maketrans('', '', string.punctuation))

print(out_str) # Output: A text containing punctuation marks"
"Implement a function in Python to extract all the words from the given string with their keyboard shifted character. For example, a letter ""a"" should be replaced by ""b"".","String: ""hello world""","def shift_words(s):
    shifted_s = """"
    for c in s:
        if c.isalpha():
            shifted_s += chr(ord(c)+1)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme",Data Type,5113,"def shift_words(s):
    shifted_s = """"
    for c in s:
        if c.isalpha():
            shifted_s += chr(ord(c)+1)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme","    ___
    shifted_s = """"
    ___
    ___
            shifted_s += chr(ord(c)+1)
        else:
            shifted_s += c
    return shifted_s

print(shift_words(""hello world""))
# Output: ifmmp xpsme"
Design a function in Python that takes two strings and returns a single string which is the concatenation of both strings.,"""Hello"" and "" World""","def concatenate(str1, str2):
    return str1 + str2

# example 
str1 = ""Hello""
str2 = "" World""
result = concatenate(str1, str2)
print(result) # Hello World",Data Type,5117,"def concatenate(str1, str2):
    return str1 + str2

# example 
str1 = ""Hello""
str2 = "" World""
result = concatenate(str1, str2)
print(result) # Hello World","    ___
    return str1 + str2

# example 
str1 = ""Hello""
str2 = "" World""
result = concatenate(str1, str2)
print(result) # Hello World"
"Using input string, write a Python program to sort the string in ascending order.",hello,"def sort_string(string):
    lst = list(string)
    lst.sort()
    return ''.join(lst)

sorted_str = sort_string('hello')
print(sorted_str) # expected output: ehllo",Data Type,5122,"def sort_string(string):
    lst = list(string)
    lst.sort()
    return ''.join(lst)

sorted_str = sort_string('hello')
print(sorted_str) # expected output: ehllo","    ___
    lst = list(string)
    lst.sort()
    return ''.join(lst)

sorted_str = sort_string('hello')
print(sorted_str) # expected output: ehllo"
Create a python script to convert a string to a list containing the ASCII values of each character in the string.,"""Hello World!""","def string_to_ascii_list(string):
    ascii_list = []
    for char in string:
        ascii_list.append(ord(char))
    return ascii_list

print(string_to_ascii_list(""Hello World!""))",Data Type,5124,"def string_to_ascii_list(string):
    ascii_list = []
    for char in string:
        ascii_list.append(ord(char))
    return ascii_list

print(string_to_ascii_list(""Hello World!""))","    ___
    ascii_list = []
    ___
        ascii_list.append(ord(char))
    return ascii_list

print(string_to_ascii_list(""Hello World!""))"
Convert the following array of Python objects into a JSON string.,"[{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]","import json

data = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]

json_str = json.dumps(data)
print(json_str)",Data Type,5137,"import json

data = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]

json_str = json.dumps(data)
print(json_str)","import json

data = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]

json_str = json.dumps(data)
print(json_str)"
Create a Python program that takes a string as input and returns the longest word in it.,"""This is an example sentence.""","def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[0]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)",Data Type,5146,"def find_longest_word(sentence):
    words = sentence.split()
    longest_word = words[0]
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)","    ___
    words = sentence.split()
    longest_word = words[0]
    ___
    ___
            longest_word = word
    return longest_word

sentence = ""This is an example sentence.""
longest_word = find_longest_word(sentence)
print(longest_word)"
Create a program in Python that uses a machine learning approach to classify a type of data.,"dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]","import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [2, 3, 4]
prediction = clf.predict([x])
print(""The prediction is"", prediction[0])",Data Type,5188,"import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [2, 3, 4]
prediction = clf.predict([x])
print(""The prediction is"", prediction[0])","import numpy as np
from sklearn.svm import SVC

# Intialize dataset and labels
dataset = [[1,2,3], [4,5,6], [7,8,9]]
labels = [""a"", ""b"", ""c""]

# Fit the model
clf = SVC(gamma='auto')
clf.fit(dataset, labels)

# Make predictions 
x = [2, 3, 4]
prediction = clf.predict([x])
print(""The prediction is"", prediction[0])"
Generate a Python script for replacing a substring in a given string.,"String = ""Hello World""
Substring = ""Hello""
Replacement Substring = ""Goodbye""","new_str = str.replace(""Hello"",""Goodbye"")
print(new_str)",Data Type,5192,"new_str = str.replace(""Hello"",""Goodbye"")
print(new_str)","new_str = str.replace(""Hello"",""Goodbye"")
print(new_str)"
Write a Python program that carries out the following tasks. The program should take two strings as parameters and return a new string that contains the two inputs merged together.,"Input 1: Hello
Input 2: World","def mergeStrings(str1, str2):
   return str1 + str2

print(mergeStrings('Hello', 'World'))",Data Type,5193,"def mergeStrings(str1, str2):
   return str1 + str2

print(mergeStrings('Hello', 'World'))","    ___
   return str1 + str2

print(mergeStrings('Hello', 'World'))"
Create a function in python that takes a string and adds a prefix to each word in the string.,"Input String: ""Hello World""
Prefix: ""Prefix_""","def add_prefix(input_string, prefix):
    """"""Takes a string and adds a prefix to each word in the string.""""""
    output_string = []
    words = input_string.split()
    for word in words:
        output_string.append(prefix + word)
    return ' '.join(output_string)",Data Type,5205,"def add_prefix(input_string, prefix):
    """"""Takes a string and adds a prefix to each word in the string.""""""
    output_string = []
    words = input_string.split()
    for word in words:
        output_string.append(prefix + word)
    return ' '.join(output_string)","    ___
    """"""Takes a string and adds a prefix to each word in the string.""""""
    output_string = []
    words = input_string.split()
    ___
        output_string.append(prefix + word)
    return ' '.join(output_string)"
Find all possible substrings in a given string.,"my_string = ""Python""","def find_substrings(string):
    substrings = []
    length = len(string) 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']",Data Type,5207,"def find_substrings(string):
    substrings = []
    length = len(string) 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']","    ___
    substrings = []
    length = len(string) 
    ___
    ___
            substrings.append(string[i: j]) 
    return substrings

substrings = find_substrings(my_string)
print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']"
Design an algorithm in Python to count the number of occurrences of each character in a given string.,Hello World,"def count_chars(string):
 chars = {}
 
 for c in string:
 if c not in chars:
 chars[c] = 0
 chars[c] += 1
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}",Data Type,5211,"def count_chars(string):
 chars = {}
 
 for c in string:
 if c not in chars:
 chars[c] = 0
 chars[c] += 1
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}","    ___
 chars = {}
 
    ___
    ___
 chars[c] = 0
 chars[c] += 1
 
 return chars
 
str = ""Hello World""
print(count_chars(str))
# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"
Generate a function in Python that combines two string variables and returns the combined string?,"string1 = ""Hello""
string2 = ""World""","def combine_strings(string1, string2): 
    return string1 + ' ' + string2 

string1 = ""Hello"" 
string2 = ""World""

result = combine_strings(string1, string2) 
print(result)",Data Type,5217,"def combine_strings(string1, string2): 
    return string1 + ' ' + string2 

string1 = ""Hello"" 
string2 = ""World""

result = combine_strings(string1, string2) 
print(result)","    ___
    return string1 + ' ' + string2 

string1 = ""Hello"" 
string2 = ""World""

result = combine_strings(string1, string2) 
print(result)"
Generate a python function that takes a list of strings and returns the string concatenation of them.,"[""Hello"", ""World"", ""How"", ""are"", ""you""]","def concatenateString(list):
    result = """"
    for item in list:
        result += item
    return result
 
print(concatenateString([""Hello"", ""World"", ""How"", ""are"", ""you""]))",Data Type,5224,"def concatenateString(list):
    result = """"
    for item in list:
        result += item
    return result
 
print(concatenateString([""Hello"", ""World"", ""How"", ""are"", ""you""]))","    ___
    result = """"
    ___
        result += item
    return result
 
print(concatenateString([""Hello"", ""World"", ""How"", ""are"", ""you""]))"
Write a function in Python which takes one string as input and checks if the string starts with a vowel.,"String ""abc""","def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[0] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")",Data Type,5232,"def start_vowel(input_string):
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    if input_string[0] in vowel_list: 
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")","    ___
    vowel_list = [""a"", ""e"", ""i"", ""o"", ""u""] 
    ___
      print(""String starts with a vowel"") 
    else:
      print(""String does not start with a vowel"")

start_vowel(""abc"")"
Create an algorithm in Python that replaces substrings in a given string,"""hello world"", ""world"", ""Earth""","# Define function
def replace_substring(string, substring, replacement):
    return string.replace(substring, replacement)
	
# Call function
print(replace_substring(""hello world"", ""world"", ""Earth"")) 
# Output hello Earth",Data Type,5248,"# Define function
def replace_substring(string, substring, replacement):
    return string.replace(substring, replacement)
	
# Call function
print(replace_substring(""hello world"", ""world"", ""Earth"")) 
# Output hello Earth","# Define function
    ___
    return string.replace(substring, replacement)
	
# Call function
print(replace_substring(""hello world"", ""world"", ""Earth"")) 
# Output hello Earth"
Write a Python program to insert a given string at the beginning of all items in a list.,"List: ['Red', 'Green', 'Black']
String: 'White'","def add_string_beginning(list_string, add_string):
    new_list = [add_string + str(item) for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']",Data Type,5250,"def add_string_beginning(list_string, add_string):
    new_list = [add_string + str(item) for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']","    ___
    new_list = [add_string + str(item) for item in list(list_string)]
    return  new_list

list_string = ['Red', 'Green', 'Black']
add_string = 'White'

print(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']"
Write a Python program that takes three strings as input and returns a new string that contains the sums of the first two strings.,"""Hello,"", "" World!"", "" Goodbye""","def combine_strings(str1, str2, str3):
    return str1 + str2 + str3

result = combine_strings(""Hello,"", "" World!"", "" Goodbye"")
print(result)",Data Type,5277,"def combine_strings(str1, str2, str3):
    return str1 + str2 + str3

result = combine_strings(""Hello,"", "" World!"", "" Goodbye"")
print(result)","    ___
    return str1 + str2 + str3

result = combine_strings(""Hello,"", "" World!"", "" Goodbye"")
print(result)"
Write a Python program to remove the characters which have odd index values of a given string.,Hello World,"def remove_odd_index_characters(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))",Data Type,5287,"def remove_odd_index_characters(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))","    ___
    result = """"
    ___
    ___
            result += string[i]
    return result

print(remove_odd_index_characters(""Hello World""))"
Create a Python script to format a string into a list,"string = ""Hello, World, I am here""","string = ""Hello, World, I am here""

list = string.split("", "")
print(list)

# Output
['Hello', 'World', 'I am here']",Data Type,5312,"string = ""Hello, World, I am here""

list = string.split("", "")
print(list)

# Output
['Hello', 'World', 'I am here']","string = ""Hello, World, I am here""

list = string.split("", "")
print(list)

# Output
['Hello', 'World', 'I am here']"
Create a function that takes in a string and evaluates it according to Python's syntax rules.,"String: ""2+3*4""","def evaluate_string(str):
 try:
 result = eval(str)
 return result
 except SyntaxError:
 return ""Syntax Error""",Data Type,5316,"def evaluate_string(str):
 try:
 result = eval(str)
 return result
 except SyntaxError:
 return ""Syntax Error""","    ___
 try:
 result = eval(str)
 return result
 except SyntaxError:
 return ""Syntax Error"""
Generate a reverse string of each word present in the list.,"[""Python"", ""Java"", ""C++""]","def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-1])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)",Data Type,5321,"def reverseStringOfList(list):
    revList = []
    for string in list:
        revList.append(string[::-1])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)","    ___
    revList = []
    ___
        revList.append(string[::-1])
    return revList

result = reverseStringOfList([""Python"", ""Java"", ""C++""])
print(result)"
create a function in Python that takes an array of integers and returns a string of the array in reverse order.,"[1, 3, 5, 7]","def reverse_list(arr):
    rev_arr = []
    for i in range(len(arr)-1,-1,-1):
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [1, 3, 5, 7]
output_string = reverse_list(arr) 
print(output_string)",Data Type,5331,"def reverse_list(arr):
    rev_arr = []
    for i in range(len(arr)-1,-1,-1):
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [1, 3, 5, 7]
output_string = reverse_list(arr) 
print(output_string)","    ___
    rev_arr = []
    ___
        rev_arr.append(arr[i])
    return ''.join(map(str,rev_arr))

arr = [1, 3, 5, 7]
output_string = reverse_list(arr) 
print(output_string)"
Generate Python code to remove all punctuation from the given string.,"String: This, is a test-string.","import string

str = ""This, is a test-string.""
str = str.translate(str.maketrans('', '', string.punctuation))
print(str)",Data Type,5343,"import string

str = ""This, is a test-string.""
str = str.translate(str.maketrans('', '', string.punctuation))
print(str)","import string

str = ""This, is a test-string.""
str = str.translate(str.maketrans('', '', string.punctuation))
print(str)"
Write a python code that takes a string as a parameter and returns the number of different words present in that string.,"string=""The quick brown fox jumped over the lazy dog""","def word_count(string):
    words = string.split()
    return len(set(words))

if __name__ == '__main__':
    output = word_count(""The quick brown fox jumped over the lazy dog"")
    print(output)",Data Type,5349,"def word_count(string):
    words = string.split()
    return len(set(words))

if __name__ == '__main__':
    output = word_count(""The quick brown fox jumped over the lazy dog"")
    print(output)","    ___
    words = string.split()
    return len(set(words))

    ___
    output = word_count(""The quick brown fox jumped over the lazy dog"")
    print(output)"
Write a Python program to convert a string to a list of characters.,"String ""Hello"".","def str_to_list(str):
    char_list = []
    for c in str:
        char_list.append(c)
    return char_list

print(str_to_list(""Hello"")) #prints ['H', 'e', 'l', 'l', 'o']",Data Type,5355,"def str_to_list(str):
    char_list = []
    for c in str:
        char_list.append(c)
    return char_list

print(str_to_list(""Hello"")) #prints ['H', 'e', 'l', 'l', 'o']","    ___
    char_list = []
    ___
        char_list.append(c)
    return char_list

print(str_to_list(""Hello"")) #prints ['H', 'e', 'l', 'l', 'o']"
"Write a Python function that takes a string, checks if it is a palindrome and returns true or false.","""level""","def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome(""level""))",Data Type,5356,"def is_palindrome(string):
    rev_string = string[::-1]
    if string == rev_string:
        return True
    else:
        return False 

print(is_palindrome(""level""))","    ___
    rev_string = string[::-1]
    ___
        return True
    else:
        return False 

print(is_palindrome(""level""))"
Write a Python program to insert a given string at the beginning of all items in a list.,"_list = ['digger', 'dog', 'deer']
string = 'The'","_list = ['digger', 'dog', 'deer']
string = 'The'

# Create an empty list to store the modified elements
new_list = []

# Iterate through the old list and create the modified list
for item in _list:
    new_list.append(string + ' ' + item)

# Print the modified list
print(new_list) # Output: ['The digger', 'The dog', 'The deer']",Data Type,5357,"_list = ['digger', 'dog', 'deer']
string = 'The'

# Create an empty list to store the modified elements
new_list = []

# Iterate through the old list and create the modified list
for item in _list:
    new_list.append(string + ' ' + item)

# Print the modified list
print(new_list) # Output: ['The digger', 'The dog', 'The deer']","_list = ['digger', 'dog', 'deer']
string = 'The'

# Create an empty list to store the modified elements
new_list = []

# Iterate through the old list and create the modified list
    ___
    new_list.append(string + ' ' + item)

# Print the modified list
print(new_list) # Output: ['The digger', 'The dog', 'The deer']"
Generate a valid python program to calculate the frequency of occurrence of a character in a given string.,"""Hello World!""","def char_frequency(string):
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)",Data Type,5362,"def char_frequency(string):
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)","    ___
    frequencies = {}
    ___
    ___
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies

freq = char_frequency(""Hello World!"")
print(freq)"
"Using Python, create a program to convert the string 'Hello, world!' to titlecase.","""Hello, world!""","import string

def toTitlecase(inputString):
    return inputString.title()

print(toTitlecase(""Hello, world!""))",Data Type,5364,"import string

def toTitlecase(inputString):
    return inputString.title()

print(toTitlecase(""Hello, world!""))","import string

    ___
    return inputString.title()

print(toTitlecase(""Hello, world!""))"
Write a function in Python that takes a list of strings and a string as input and adds the string as the last item in the list.,"list=['apple','orange','banana']
string='kiwi'","def add_string_to_list(string_list, string):
 string_list.append(string)
 
 return string_list
 
# sample call
list = ['apple', 'orange', 'banana']
string = 'kiwi'
new_list = add_string_to_list(list, string)

print(new_list)
# ['apple','orange','banana','kiwi']",Data Type,5367,"def add_string_to_list(string_list, string):
 string_list.append(string)
 
 return string_list
 
# sample call
list = ['apple', 'orange', 'banana']
string = 'kiwi'
new_list = add_string_to_list(list, string)

print(new_list)
# ['apple','orange','banana','kiwi']","    ___
 string_list.append(string)
 
 return string_list
 
# sample call
list = ['apple', 'orange', 'banana']
string = 'kiwi'
new_list = add_string_to_list(list, string)

print(new_list)
# ['apple','orange','banana','kiwi']"
Write a Python program to remove the nth index character from a nonempty string.,"text = ""Python""
n = 0","def remove_nth_index(text, n):
    return text[:n] + text[n + 1:]",Data Type,5369,"def remove_nth_index(text, n):
    return text[:n] + text[n + 1:]","    ___
    return text[:n] + text[n + 1:]"
Write a python script which reformats the json string below,"data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'","import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": 42,
#  ""favorite_food"": ""Lasagna""}",Data Type,5372,"import json

def reformat_json(data):
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": 42,
#  ""favorite_food"": ""Lasagna""}","import json

    ___
    data = json.loads(data)
    return json.dumps(data, indent=4)

data = '{""name"":""Jason"",""age"":42,""favorite_food"":""Lasagna""}'
updated_data = reformat_json(data)

print(updated_data)
# {""name"": ""Jason"",
#  ""age"": 42,
#  ""favorite_food"": ""Lasagna""}"
"Given a function that takes a string as an argument, write a Python code snippet to capitalize the first letter of every word in the string.",def capitalize_string(str):,"def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    capitalized_string = ' '.join(capitalized_words)
    return capitalized_string",Data Type,5391,"def capitalize_string(str):
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    capitalized_string = ' '.join(capitalized_words)
    return capitalized_string","    ___
    words = str.split(' ')
    capitalized_words = [word.capitalize() for word in words]
    capitalized_string = ' '.join(capitalized_words)
    return capitalized_string"
Create a function in Python that takes a string as an argument and replace all vowels with underscores.,teststring,"def replace_vowels(input_string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    output_string = ''
    for s in input_string:
        if s in vowels:
            output_string += '_'
        else:
            output_string += s
    return output_string

result = replace_vowels('teststring')
print(result)",Data Type,5410,"def replace_vowels(input_string):
    vowels = [""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    output_string = ''
    for s in input_string:
        if s in vowels:
            output_string += '_'
        else:
            output_string += s
    return output_string

result = replace_vowels('teststring')
print(result)","    ___
    vowels = [""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""]
    output_string = ''
    ___
    ___
            output_string += '_'
        else:
            output_string += s
    return output_string

result = replace_vowels('teststring')
print(result)"
Create a function in Python that takes two strings as arguments and returns the first string repeated as many times as specified by the second argument.,Abstract,"def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", 3)) # Output: AbstractAbstractAbstract",Data Type,5424,"def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", 3)) # Output: AbstractAbstractAbstract","def repeat_string (string, repeat):
    """"""Return the supplied string repeated as many times as specified.""""""
    
    repeated_string = string * repeat
    
    return repeated_string
    
print(repeat_string(""Abstract"", 3)) # Output: AbstractAbstractAbstract"
Write a code in Python that takes a given string and removes all spaces from the string.,"""Hello World""","def remove_spaces(str): 
    new_str = """"
	
    # loop through each character in the string
    for letter in str: 
        if letter != "" "":
            new_str = new_str + letter 
		
    return new_str 

# main program
str = ""Hello World""
new_str = remove_spaces(str)

#print the new string
print(""String without spaces:"", new_str)",Data Type,5428,"def remove_spaces(str): 
    new_str = """"
	
    # loop through each character in the string
    for letter in str: 
        if letter != "" "":
            new_str = new_str + letter 
		
    return new_str 

# main program
str = ""Hello World""
new_str = remove_spaces(str)

#print the new string
print(""String without spaces:"", new_str)","    ___
    new_str = """"
	
    # loop through each character in the string
    ___
    ___
            new_str = new_str + letter 
		
    return new_str 

# main program
str = ""Hello World""
new_str = remove_spaces(str)

#print the new string
print(""String without spaces:"", new_str)"
Generate a unique ID in Python for a given string.,"string = ""Hello World!""","import uuid
unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)",Data Type,5440,"import uuid
unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)","import uuid
unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)"
Create a Python script to convert an input JSON string into a Python dictionary.,"{""name"": ""John"", ""age"": 30, ""country"": ""USA""}","import json

input_string = '{""name"": ""John"", ""age"": 30, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}",Data Type,5443,"import json

input_string = '{""name"": ""John"", ""age"": 30, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}","import json

input_string = '{""name"": ""John"", ""age"": 30, ""country"": ""USA""}'

python_dict = json.loads(input_string)
print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}"
Generate a string of random characters in Python. The length of the string should be determined by a parameter.,length = 20,"import string 
import random
 
def generate_random_string(length):
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = 20
print(generate_random_string(length))",Data Type,5454,"import string 
import random
 
def generate_random_string(length):
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = 20
print(generate_random_string(length))","import string 
import random
 
    ___
 return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
 
length = 20
print(generate_random_string(length))"
How would you parse the following JSON string in Python?,"{
    ""name"": ""John Doe"", 
    ""age"": 34, 
    ""email"": ""john@example.com""
}","import json

json_string = '{""name"": ""John Doe"", ""age"": 34, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']",Data Type,5455,"import json

json_string = '{""name"": ""John Doe"", ""age"": 34, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']","import json

json_string = '{""name"": ""John Doe"", ""age"": 34, ""email"": ""john@example.com""}'
data = json.loads(json_string)

name = data['name']
age = data['age']
email = data['email']"
"Given a string, write a Python program to remove all leading and trailing whitespace characters.","text = ""  This  is a text string   """,text = text.strip(),Data Type,5479,text = text.strip(),text = text.strip()
Write a Python program to generate a random string with the given length.,Length: 8,"import string
import random

def generate_random_string(length):
  characters = string.ascii_letters + string.digits 
  return ''.join(random.choice(characters) for i in range(length))",Data Type,5495,"import string
import random

def generate_random_string(length):
  characters = string.ascii_letters + string.digits 
  return ''.join(random.choice(characters) for i in range(length))","import string
import random

    ___
  characters = string.ascii_letters + string.digits 
  return ''.join(random.choice(characters) for i in range(length))"
Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated.,"[""Hello"", ""World"", ""This"", ""Is"", ""A"", ""Test""]","def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[0]
    return result",Data Type,5498,"def first_letter_concat(l):
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    for s in l:
        result += s[0]
    return result","    ___
    '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.'''
    result = ''
    ___
        result += s[0]
    return result"
Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string.,"""This is a test string""","def replace_spaces(s,replace_with):
    return s.replace("" "",replace_with)

s = ""This is a test string""
replace_with = ""X""

print(replace_spaces(s,replace_with))",Data Type,5502,"def replace_spaces(s,replace_with):
    return s.replace("" "",replace_with)

s = ""This is a test string""
replace_with = ""X""

print(replace_spaces(s,replace_with))","    ___
    return s.replace("" "",replace_with)

s = ""This is a test string""
replace_with = ""X""

print(replace_spaces(s,replace_with))"
Create a python script to identify if a given string is a valid IPv4 address or not.,String: 192.168.25.688,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False",Data Type,5504,"def is_valid_ipv4(ip):
    parts = ip.split('.')
    if len(parts) != 4:
        return False
    for part in parts:
        if not part.isdigit():
            return False
        if int(part) < 0 or int(part) > 255:
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False","    ___
    parts = ip.split('.')
    ___
        return False
    ___
    ___
            return False
    ___
            return False
    return True

print(is_valid_ipv4('192.168.25.688'))

Output: False"
Cut at current position in a string by 1 letter in Python.,"mystring = ""This is my string""",mystring = mystring[:-1],Data Type,5506,mystring = mystring[:-1],mystring = mystring[:-1]
Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.,A quick brown fox jumps over the lazy dog,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)",Data Type,5521,"def words_count(text):
 words_dict = {}
 for word in text.split(' '):
 if word in words_dict:
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)","    ___
 words_dict = {}
    ___
    ___
 words_dict[word] += 1
 else:
 words_dict[word] = 1
 return words_dict

words_dict = words_count(""A quick brown fox jumps over the lazy dog"")
print(words_dict)"
Implement a function in Python to take a string of comma separated numbers and return the average of the numbers.,"""3, 4, 5, 6, 7""","def calculate_average(nums):
 nums_list = nums.split("","")
 total = 0
 for num in nums_list:
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average(""3, 4, 5, 6, 7"")) # should print 5.0",Data Type,5525,"def calculate_average(nums):
 nums_list = nums.split("","")
 total = 0
 for num in nums_list:
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average(""3, 4, 5, 6, 7"")) # should print 5.0","    ___
 nums_list = nums.split("","")
 total = 0
    ___
 total += float(num)
 return total / len(nums_list)
 
# test code
print(calculate_average(""3, 4, 5, 6, 7"")) # should print 5.0"
Code a Python program to calculate the permutation of a given string.,"String = ""ABC""","def permutations(string):
 if len(string) == 0:
  return []

 if len(string) == 1:
  return [string]

 perm_list = []
 for c in string:
  for perm in permutations(string.replace(c, '')):
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))",Data Type,5533,"def permutations(string):
 if len(string) == 0:
  return []

 if len(string) == 1:
  return [string]

 perm_list = []
 for c in string:
  for perm in permutations(string.replace(c, '')):
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))","    ___
    ___
  return []

    ___
  return [string]

 perm_list = []
    ___
    ___
   perm_list.append(c + perm)
 return perm_list

string = ""ABC""
print(permutations(string))"
Create a Python program that takes a string of text and returns a list of all words in it.,"""This is a sentence.""","def get_words(sentence):
    words = sentence.split(' ')
    return words

words = get_words('This is a sentence.')
print(words)",Data Type,5541,"def get_words(sentence):
    words = sentence.split(' ')
    return words

words = get_words('This is a sentence.')
print(words)","    ___
    words = sentence.split(' ')
    return words

words = get_words('This is a sentence.')
print(words)"
Create a function in Java that encodes a string using base64.,Python,"import java.util.Base64;

public String encode(String message) {
 byte[] messageBytes = message.getBytes();
 String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);
 return encodedMessage;
}

String message = ""Python"";
String encodedMessage  = encode(message);
System.out.println(encodedMessage); // Output: UHl0aG9u",Data Type,5542,"import java.util.Base64;

public String encode(String message) {
 byte[] messageBytes = message.getBytes();
 String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);
 return encodedMessage;
}

String message = ""Python"";
String encodedMessage  = encode(message);
System.out.println(encodedMessage); // Output: UHl0aG9u","import java.util.Base64;

public String encode(String message) {
 byte[] messageBytes = message.getBytes();
 String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);
 return encodedMessage;
}

String message = ""Python"";
String encodedMessage  = encode(message);
System.out.println(encodedMessage); // Output: UHl0aG9u"
Create a function in Python that takes a string as input and converts all the vowels to capital letters.,"str = ""This is a sample string""","def convert_to_upper(str):
    res = """"
    for ch in str:
        if ch in ""aeiou"":
            res += ch.upper()
        else:
            res += ch
    return res

input = ""This is a sample string""
output = convert_to_upper(input)
print(""Converted string: ""+ output)",Data Type,5548,"def convert_to_upper(str):
    res = """"
    for ch in str:
        if ch in ""aeiou"":
            res += ch.upper()
        else:
            res += ch
    return res

input = ""This is a sample string""
output = convert_to_upper(input)
print(""Converted string: ""+ output)","    ___
    res = """"
    ___
    ___
            res += ch.upper()
        else:
            res += ch
    return res

input = ""This is a sample string""
output = convert_to_upper(input)
print(""Converted string: ""+ output)"
Design an algorithm in Python for finding the longest string in an input.,"['cat', 'dog', 'elephant']","def longest_string(strings):
    longest_len = 0
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)",Data Type,5554,"def longest_string(strings):
    longest_len = 0
    longest_str = ''
    for s in strings:
        str_len = len(s)
        if str_len > longest_len:
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)","    ___
    longest_len = 0
    longest_str = ''
    ___
        str_len = len(s)
    ___
            longest_str = s
            longest_len = str_len
    return longest_str

strings = ['cat', 'dog', 'elephant']
longest_str = longest_string(strings)
print(longest_str)"
Generate a programming code with Python to count the frequency of each character in a given string.,hello,"def count_frequency(text):
  char_frequency = {}
  for i in text:
    if i in char_frequency:
      char_frequency[i] += 1
    else:
      char_frequency[i] = 1
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  str(res))",Data Type,5561,"def count_frequency(text):
  char_frequency = {}
  for i in text:
    if i in char_frequency:
      char_frequency[i] += 1
    else:
      char_frequency[i] = 1
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  str(res))","    ___
  char_frequency = {}
    ___
    ___
      char_frequency[i] += 1
    else:
      char_frequency[i] = 1
  return char_frequency

str1 = 'hello'
res = count_frequency(str1) 

print (""Per character frequency is : \n"" +  str(res))"
Create a Python script to evaluate an expression given as a string.,"Expression string: ""2 * (3 + 1)""","# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)",Data Type,5568,"# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)","# input expression as a string
expr = ""2 * (3 + 1)""

# Evaluate the expression using eval()
result = eval(expr)

# print the result
print(""Result:"", result)"
"Write a Python program to clean a given string. The given string should be stripped of special characters, converted to lowercase and only words with more than three characters should be returned.","This is , MY string!?","s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)",Data Type,5571,"s= ""This is, MY string!?""
 
output=""""
 
for i in s:
 if i.isalnum():
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)","s= ""This is, MY string!?""
 
output=""""
 
    ___
    ___
  output+=i.lower()
 
output = ' '.join(w for w in output.split() if len(w)>3)
 
print(""Cleaned String: ""+output)"
Write a Python program to replace all the occurrences of one character with another in a given string.,"String: ""Hello World!""
Character to replace: ""l""
Character to replace with: ""t""","def replace_char(string, char_rep, char_rep_with):
    new_string = string.replace(char_rep, char_rep_with)
    return new_string

result = replace_char('Hello World!', 'l', 't')
print(result)",Data Type,5575,"def replace_char(string, char_rep, char_rep_with):
    new_string = string.replace(char_rep, char_rep_with)
    return new_string

result = replace_char('Hello World!', 'l', 't')
print(result)","    ___
    new_string = string.replace(char_rep, char_rep_with)
    return new_string

result = replace_char('Hello World!', 'l', 't')
print(result)"
Create a function in Python to remove all vowels in a given string.,"""Hello, World!""","def remove_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, """") 
    return string

print(remove_vowels(""Hello, World!""))",Data Type,5587,"def remove_vowels(string): 
    vowels = ('a', 'e', 'i', 'o', 'u')  
    for x in string.lower(): 
        if x in vowels: 
            string = string.replace(x, """") 
    return string

print(remove_vowels(""Hello, World!""))","    ___
    vowels = ('a', 'e', 'i', 'o', 'u')  
    ___
    ___
            string = string.replace(x, """") 
    return string

print(remove_vowels(""Hello, World!""))"
Create a Python program to split a string in the match of a regular expression and return a list of the split strings.,"string = ""102030-abc-5060""","import re

string = ""102030-abc-5060"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['102030', '5060']",Data Type,5600,"import re

string = ""102030-abc-5060"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['102030', '5060']","import re

string = ""102030-abc-5060"" 
pattern = r'-\w+-' 
result = re.split(pattern, string)
print(result)

# Output -> ['102030', '5060']"
Create a function in Python to convert a list of strings to a single long string,"['Hello', 'World', '!']","def list_to_string(list_str):
    long_str = ''
    for i in list_str:
        long_str += i
    
    return long_str

list_str = ['Hello', 'World', '!']
string = list_to_string(list_str)
print(string) # prints 'HelloWorld!'",Data Type,5602,"def list_to_string(list_str):
    long_str = ''
    for i in list_str:
        long_str += i
    
    return long_str

list_str = ['Hello', 'World', '!']
string = list_to_string(list_str)
print(string) # prints 'HelloWorld!'","    ___
    long_str = ''
    ___
        long_str += i
    
    return long_str

list_str = ['Hello', 'World', '!']
string = list_to_string(list_str)
print(string) # prints 'HelloWorld!'"
"Using a dictionary, write a program in Python to categorize each list item into a group of the same type.","items = [1, 2, ‘a’, ‘b’, 4, 5, ‘c’, ‘d’, 7, 8]","def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int or type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups",Data Type,5603,"def categorize(items):
    groups = {
        'numbers': [],
        'strings': []
    }
    for item in items:
        if type(item) == int or type(item) == float:
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups","    ___
    groups = {
        'numbers': [],
        'strings': []
    }
    ___
    ___
            groups['numbers'].append(item)
        else:
            groups['strings'].append(item)
    return groups"
Write a Python program to find all matches of a given string in another string while ignoring case sensitivity.,"string1 = ""Hello world"" 
string2 = ""World""","import re 

def find_match(string1, string2):
 return re.findall(r'(?i)'+re.escape(string2), string1)

string1 = ""Hello world"" 
string2 = ""World""

print(find_match(string1, string2))",Data Type,5605,"import re 

def find_match(string1, string2):
 return re.findall(r'(?i)'+re.escape(string2), string1)

string1 = ""Hello world"" 
string2 = ""World""

print(find_match(string1, string2))","import re 

    ___
 return re.findall(r'(?i)'+re.escape(string2), string1)

string1 = ""Hello world"" 
string2 = ""World""

print(find_match(string1, string2))"
Make a program to search for a given string in a list of strings.,"search_string = 'python'
list_of_strings = ['java', 'javascript', 'python', 'ruby']","def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)",Data Type,5613,"def search_string(search_string, list_of_strings):
    for string in list_of_strings:
        if string == search_string:
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)","    ___
    ___
    ___
            return True
    return False

result = search_string('python', ['java', 'javascript', 'python', 'ruby']) 
print(result)"
Create a Python program for splitting a given string by every nth character.,"String = ""Hello World""
n = 3","#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)",Data Type,5615,"#Function for splitting a given string by every nth character
def splitStringByN(string, n): 
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)","#Function for splitting a given string by every nth character
    ___
    res = [string[i:i+n] for i in range(0, len(string), n)] 
    return res

# Driver code
string = ""Hello World!""
n = 3
splitString = splitStringByN(string, n)
print(splitString)"
Generate a Python program to remove vowels from a string.,This is a string.,"def removeVowels(string):
    vowels = ('a', 'e', 'i', 'o', 'u')
    stringWithoutVowels = """"
    for char in string:
        if char not in vowels:
            stringWithoutVowels += char
    return stringWithoutVowels

string = input(""Enter a string: "")
result = removeVowels(string)
print(result)",Data Type,5647,"def removeVowels(string):
    vowels = ('a', 'e', 'i', 'o', 'u')
    stringWithoutVowels = """"
    for char in string:
        if char not in vowels:
            stringWithoutVowels += char
    return stringWithoutVowels

string = input(""Enter a string: "")
result = removeVowels(string)
print(result)","    ___
    vowels = ('a', 'e', 'i', 'o', 'u')
    stringWithoutVowels = """"
    ___
    ___
            stringWithoutVowels += char
    return stringWithoutVowels

string = input(""Enter a string: "")
result = removeVowels(string)
print(result)"
Can you produce a Python script that outputs all possible permutations of a given string?,"""ABC""","from itertools import permutations

def print_permutations(input):
    perms = [''.join(p) for p in permutations(input)]
    for perm in perms:
        print(perm)

if __name__ == ""__main__"":
    print_permutations(""ABC"")",Data Type,5662,"from itertools import permutations

def print_permutations(input):
    perms = [''.join(p) for p in permutations(input)]
    for perm in perms:
        print(perm)

if __name__ == ""__main__"":
    print_permutations(""ABC"")","from itertools import permutations

    ___
    perms = [''.join(p) for p in permutations(input)]
    ___
        print(perm)

    ___
    print_permutations(""ABC"")"
"Use Python to check whether a given string is a palindrome (e.g. ""abccba"" is a palindrome).",abcba,"def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True
 else:
 return False

isPalindrome('abcba') # Output: True",Data Type,5670,"def isPalindrome(string):
 if string == string[::-1]: # Check if string is the same backwards
return True
 else:
 return False

isPalindrome('abcba') # Output: True","    ___
    ___
return True
 else:
 return False

isPalindrome('abcba') # Output: True"
Create a function to replace substring 'old' with 'new' in the given string.,Python is very old,"def replace_substring(string, old, new):
  new_string = """"
  l = len(old)
  for i in range(len(string)-l+1):
    if string[i:i+l] == old:
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new",Data Type,5672,"def replace_substring(string, old, new):
  new_string = """"
  l = len(old)
  for i in range(len(string)-l+1):
    if string[i:i+l] == old:
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new","    ___
  new_string = """"
  l = len(old)
    ___
    ___
      new_string += new
    else:
      new_string += string[i]
  return new_string

print(replace_substring('Python is very old', 'old', 'new'))

# Output: Python is very new"
"Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string.","dict = {'a': 0, 'b': 0, 'c': 0}
str = 'abacab'","def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))",Data Type,5677,"def freq_char_dict(dict, str): 
    for char in str: 
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))","    ___
    ___
        dict[char] += 1
    return dict
  
dict = {'a': 0, 'b': 0, 'c': 0} 
str = 'abacab'
print(freq_char_dict(dict, str))"
Write a Python function to check if a given substring is contained in a string.,"String = ""This is an example""
SubString = ""ex""","def check_substring(String, SubString):
    if SubString in String : 
        return True
    else: 
        return False",Data Type,5686,"def check_substring(String, SubString):
    if SubString in String : 
        return True
    else: 
        return False","    ___
    ___
        return True
    else: 
        return False"
Generate a Python program which takes in a string and returns each of its characters in reverse order.,Hello,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1 , -1):
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)",Data Type,5689,"def reverse_string(string):
    reversed_string = """"
    for i in range(len(string) - 1, -1 , -1):
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)","    ___
    reversed_string = """"
    ___
        reversed_string += string[i]
    return reversed_string

result = reverse_string('Hello')
print(result)"
Create a program in Python to classify an input string as either palindrome or not.,"Input string: ""racecar""","def is_palindrome(string):
    # reverse the string and compare
    reversed_string = ''.join(reversed(string)) 
    if string == reversed_string:
        print(""Input string is a palindrome"")
    else:
        print(""Input string is not a palindrome"")
        
is_palindrome(""racecar"")  # Outputs: ""Input string is a palindrome""",Data Type,5697,"def is_palindrome(string):
    # reverse the string and compare
    reversed_string = ''.join(reversed(string)) 
    if string == reversed_string:
        print(""Input string is a palindrome"")
    else:
        print(""Input string is not a palindrome"")
        
is_palindrome(""racecar"")  # Outputs: ""Input string is a palindrome""","    ___
    # reverse the string and compare
    reversed_string = ''.join(reversed(string)) 
    ___
        print(""Input string is a palindrome"")
    else:
        print(""Input string is not a palindrome"")
        
is_palindrome(""racecar"")  # Outputs: ""Input string is a palindrome"""
Develop a Python function to check if a given string contains a palindrome.,"""moon""","def is_palindrome(s):
  return s == s[::-1]

print(is_palindrome(""moon""))",Data Type,5708,"def is_palindrome(s):
  return s == s[::-1]

print(is_palindrome(""moon""))","    ___
  return s == s[::-1]

print(is_palindrome(""moon""))"
Create a Python script to transform every item from a list into a string.,"[1, 2, 3]","# Transform each item to a string 
list_ = [1, 2, 3]

# Transform the list
string_list = [str(item) for item in list_]

# Print the transformed list
print(string_list)

# Output
['1', '2', '3']",Data Type,5721,"# Transform each item to a string 
list_ = [1, 2, 3]

# Transform the list
string_list = [str(item) for item in list_]

# Print the transformed list
print(string_list)

# Output
['1', '2', '3']","# Transform each item to a string 
list_ = [1, 2, 3]

# Transform the list
string_list = [str(item) for item in list_]

# Print the transformed list
print(string_list)

# Output
['1', '2', '3']"
Construct a function in Python to reverse the order of the words in a given string.,hello world,"def reverse_words(str):
    words = str.split()
    reversed_words = words[::-1]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)",Data Type,5726,"def reverse_words(str):
    words = str.split()
    reversed_words = words[::-1]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)","    ___
    words = str.split()
    reversed_words = words[::-1]
    reversed_str = ' '.join(reversed_words)
    return reversed_str

result = reverse_words('hello world')
print(result)"
Create a function in Python that takes in a string and returns the characters in reverse order.,Hello,"def reverse_string(s): 
    return s[::-1]

result = reverse_string(""Hello"") 
print(result)",Data Type,5729,"def reverse_string(s): 
    return s[::-1]

result = reverse_string(""Hello"") 
print(result)","    ___
    return s[::-1]

result = reverse_string(""Hello"") 
print(result)"
"Given a string, write a Python program to count the number of words in it.","""This is an example string.""","def count_words(sentence):
    words = sentence.split(' ')
    count = 0
    for word in words:
        if word != '':
            count+=1
    return count

sentence = ""This is an example string.""
print(count_words(sentence))",Data Type,5738,"def count_words(sentence):
    words = sentence.split(' ')
    count = 0
    for word in words:
        if word != '':
            count+=1
    return count

sentence = ""This is an example string.""
print(count_words(sentence))","    ___
    words = sentence.split(' ')
    count = 0
    ___
    ___
            count+=1
    return count

sentence = ""This is an example string.""
print(count_words(sentence))"
Create a Python program to find the shortest string in a given list of strings.,"[‘Geeks’, ‘for’, ‘Geek’, ‘a’, ‘Geekeee’]","def shortest_string(strings):
    shortest_string = strings[0]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string",Data Type,5741,"def shortest_string(strings):
    shortest_string = strings[0]
   
    for string in strings:
        if len(string) < len(shortest_string):
            shortest_string = string
    
    return shortest_string","    ___
    shortest_string = strings[0]
   
    ___
    ___
            shortest_string = string
    
    return shortest_string"
Determine the type of the given expression in Python.,Expression: 9 + 5,int,Data Type,5759,int,int
Generate a Python program that accepts an integer as an input and then outputs a string composed of stars,5,"# Get the number from the user
num = int(input(""Enter a number: ""))

# Generate a string of stars
star_string = '*' * num

print(star_string)",Data Type,5765,"# Get the number from the user
num = int(input(""Enter a number: ""))

# Generate a string of stars
star_string = '*' * num

print(star_string)","# Get the number from the user
num = int(input(""Enter a number: ""))

# Generate a string of stars
star_string = '*' * num

print(star_string)"
Create a method in Python that receives a list of strings and prints out the longest string.,"strings = [“ABC”, “AAA”, “AB”, “ABCDE”]","def longest_string(strings):
  longest = """"
  for s in strings:
    if len(s) > len(longest):
        longest = s
  print(longest)

longest_string(strings)
# Output: ABCDE",Data Type,5769,"def longest_string(strings):
  longest = """"
  for s in strings:
    if len(s) > len(longest):
        longest = s
  print(longest)

longest_string(strings)
# Output: ABCDE","    ___
  longest = """"
    ___
    ___
        longest = s
  print(longest)

longest_string(strings)
# Output: ABCDE"
Create a python script to remove all the vowels from the given string.,"string = ""Hello World!""","import re

def remove_vowels(string):
    """"""Remove all the vowels from the given string.""""""
    return re.sub(r'[aeiouAEIOU]', '', string)

# Usage Example
string = ""Hello World!""
removed_vowels = remove_vowels(string)
print(removed_vowels)  # Hll Wrld!",Data Type,5775,"import re

def remove_vowels(string):
    """"""Remove all the vowels from the given string.""""""
    return re.sub(r'[aeiouAEIOU]', '', string)

# Usage Example
string = ""Hello World!""
removed_vowels = remove_vowels(string)
print(removed_vowels)  # Hll Wrld!","import re

    ___
    """"""Remove all the vowels from the given string.""""""
    return re.sub(r'[aeiouAEIOU]', '', string)

# Usage Example
string = ""Hello World!""
removed_vowels = remove_vowels(string)
print(removed_vowels)  # Hll Wrld!"
"Analyze a given Python code snippet and determine its type - a documentation, a code snippet, or a comment.","def f(x):
    """"""A simple function
    that prints the argument""""""
    print(x)",Documentation,Data Type,5784,Documentation,Documentation
Develop a function in Python to delete punctuation from a string.,"This, is a string.","import string

def rm_punctuation(text): 
    translator = text.maketrans("""", """", string.punctuation) 
    return text.translate(translator) 
  
text = ""This, is a string.""
print(rm_punctuation(text))",Data Type,5818,"import string

def rm_punctuation(text): 
    translator = text.maketrans("""", """", string.punctuation) 
    return text.translate(translator) 
  
text = ""This, is a string.""
print(rm_punctuation(text))","import string

    ___
    translator = text.maketrans("""", """", string.punctuation) 
    return text.translate(translator) 
  
text = ""This, is a string.""
print(rm_punctuation(text))"
Create a Python script to extract emails from a given string.,"""Alice lives at alice@example.com and Bob lives at bob@example.com.""","import re

input_str = ""Alice lives at alice@example.com and Bob lives at bob@example.com.""

# use regular expression to extract emails
pattern = r'[\w\.-]+@[\w\.-]+'

emails = re.findall(pattern, input_str)

print(emails) # ['alice@example.com', 'bob@example.com']",Data Type,5823,"import re

input_str = ""Alice lives at alice@example.com and Bob lives at bob@example.com.""

# use regular expression to extract emails
pattern = r'[\w\.-]+@[\w\.-]+'

emails = re.findall(pattern, input_str)

print(emails) # ['alice@example.com', 'bob@example.com']","import re

input_str = ""Alice lives at alice@example.com and Bob lives at bob@example.com.""

# use regular expression to extract emails
pattern = r'[\w\.-]+@[\w\.-]+'

emails = re.findall(pattern, input_str)

print(emails) # ['alice@example.com', 'bob@example.com']"
Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings.,"str1 = ""This""
str2 = ""is""
str3 = ""fun""","def strJoin(str1, str2, str3):
    return [str1 + str2, str2 + str3, str1 + str3]",Data Type,5833,"def strJoin(str1, str2, str3):
    return [str1 + str2, str2 + str3, str1 + str3]","    ___
    return [str1 + str2, str2 + str3, str1 + str3]"
"Create a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string.","['hello world', 'good bye', 'hello', 'hello planet'], 'hello'","target = 'hello'
list_strings = ['hello world', 'good bye', 'hello', 'hello planet']

results = [string for string in list_strings if target in string]

print(results)
# Output: ['hello world', 'hello', 'hello planet']",Data Type,5834,"target = 'hello'
list_strings = ['hello world', 'good bye', 'hello', 'hello planet']

results = [string for string in list_strings if target in string]

print(results)
# Output: ['hello world', 'hello', 'hello planet']","target = 'hello'
list_strings = ['hello world', 'good bye', 'hello', 'hello planet']

results = [string for string in list_strings if target in string]

print(results)
# Output: ['hello world', 'hello', 'hello planet']"
"Generate a Python function to reverse the order of each word in a string, leaving the absolute order of each word unchanged.","hello, world.","def reverser(string):
    reversed_string = []
    words = string.split()
    for word in words:
        reversed_string.append(word[::-1])
    return "" "".join(reversed_string)",Data Type,5838,"def reverser(string):
    reversed_string = []
    words = string.split()
    for word in words:
        reversed_string.append(word[::-1])
    return "" "".join(reversed_string)","    ___
    reversed_string = []
    words = string.split()
    ___
        reversed_string.append(word[::-1])
    return "" "".join(reversed_string)"
Create a Python program to remove all whitespaces from a string.,"""This is a string with whitespaces""","def remove_whitespace(s):
    return s.replace("" "", """")

print(remove_whitespace(""This is a string with whitespaces""))",Data Type,5842,"def remove_whitespace(s):
    return s.replace("" "", """")

print(remove_whitespace(""This is a string with whitespaces""))","    ___
    return s.replace("" "", """")

print(remove_whitespace(""This is a string with whitespaces""))"
Develop a program in Python for counting the occurrences of a given character in a string.,"String: abcdefg
Character: a","def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))",Data Type,5846,"def countOccurences(str, char):
    count = 0
    for ch in str:
        if ch == char:
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))","    ___
    count = 0
    ___
    ___
            count += 1
    return count

print(countOccurences('abcdefg', 'a'))"
Optimize the following Python code for counting the number of vowels in a string.,"def count_vowels(str):
 count = 0
 vowels = [""a"", ""e"", ""i"", ""o"", ""u""]
 for i in str:
  if i in vowels:
   count += 1
 return count","def count_vowels(str):
 count = 0
 vowels = set(""aeiou"")
 for i in str:
  if i in vowels:
   count += 1
 return count",Data Type,5850,"def count_vowels(str):
 count = 0
 vowels = set(""aeiou"")
 for i in str:
  if i in vowels:
   count += 1
 return count","    ___
 count = 0
 vowels = set(""aeiou"")
    ___
    ___
   count += 1
 return count"
Write a Python program to convert a string of lower case characters to upper case characters.,"""Hello World""","string = ""Hello World""

# convert to upper case
string = string.upper()

# print result
print(string) # prints ""HELLO WORLD""",Data Type,5866,"string = ""Hello World""

# convert to upper case
string = string.upper()

# print result
print(string) # prints ""HELLO WORLD""","string = ""Hello World""

# convert to upper case
string = string.upper()

# print result
print(string) # prints ""HELLO WORLD"""
Generate a Python program that scrambles the input string by randomly switching the positions of the characters.,Hello World,"import random

input_string = ""Hello World""

#Split the given string
string_list = list(input_string)
random.shuffle(string_list)

#Form the scrambled string
scrambled_string = """".join(string_list) 

print(""Scrambled string:"",scrambled_string)",Data Type,5876,"import random

input_string = ""Hello World""

#Split the given string
string_list = list(input_string)
random.shuffle(string_list)

#Form the scrambled string
scrambled_string = """".join(string_list) 

print(""Scrambled string:"",scrambled_string)","import random

input_string = ""Hello World""

#Split the given string
string_list = list(input_string)
random.shuffle(string_list)

#Form the scrambled string
scrambled_string = """".join(string_list) 

print(""Scrambled string:"",scrambled_string)"
Write a Python script to decode a base64 encoded string.,encoded_string = 'aGVsbG8=',"import base64

encoded_string = 'aGVsbG8='
decoded_string = base64.b64decode(encoded_string)
print(decoded_string) # prints b'hello'",Data Type,5894,"import base64

encoded_string = 'aGVsbG8='
decoded_string = base64.b64decode(encoded_string)
print(decoded_string) # prints b'hello'","import base64

encoded_string = 'aGVsbG8='
decoded_string = base64.b64decode(encoded_string)
print(decoded_string) # prints b'hello'"
"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise.","text = ""racecar""","def is_palindrome(text):
    return text == text[::-1]",Data Type,5895,"def is_palindrome(text):
    return text == text[::-1]","    ___
    return text == text[::-1]"
Write a function in Python that takes two strings and returns the length of the longest string.,"string1 = “hello”
string2 = “goodbye”","def longest_string_length(string1, string2):
    if len(string1) > len(string2):
        return len(string1)
    return len(string2)

string1 = “hello”
string2 = “goodbye”

result = longest_string_length(string1, string2)
print(result)",Data Type,5902,"def longest_string_length(string1, string2):
    if len(string1) > len(string2):
        return len(string1)
    return len(string2)

string1 = “hello”
string2 = “goodbye”

result = longest_string_length(string1, string2)
print(result)","    ___
    ___
        return len(string1)
    return len(string2)

string1 = “hello”
string2 = “goodbye”

result = longest_string_length(string1, string2)
print(result)"
Write a Python code to encode a given string using the Caesar cipher.,"string = ""Hello World""","def caesar_encrypt(string, shift_amount):
 encrypted_string = """"
 for i in range(len(string)):
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, 3)
print(encoded_string) // Output: Khoor Zruog",Data Type,5906,"def caesar_encrypt(string, shift_amount):
 encrypted_string = """"
 for i in range(len(string)):
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, 3)
print(encoded_string) // Output: Khoor Zruog","    ___
 encrypted_string = """"
    ___
  char = string[i]
  x = ord(char) + shift_amount
  encrypted_string += chr(x)
 
 return encrypted_string

encoded_string = caesar_encrypt(string, 3)
print(encoded_string) // Output: Khoor Zruog"
Create a Python program to convert a string to its equivalent unicode value.,"""hello""","import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[0])))
 
#output
#The unicode value of 'hello' is: 104",Data Type,5912,"import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[0])))
 
#output
#The unicode value of 'hello' is: 104","import unicodedata
 
#example string
s = ""hello""
 
#printing string to unicode
print(""The unicode value of '"" + s + ""' is: "" + str(ord(unicodedata.normalize('NFKD', s)[0])))
 
#output
#The unicode value of 'hello' is: 104"
Create a Python script to perform the following transformation on a given string?,"""HELLO WORLD""","inp_str = ""HELLO WORLD""

result_str = ''

for c in inp_str:
    if c.isupper():
        result_str += c.lower()
    else:
        result_str += c.upper()
        
print(result_str)",Data Type,5919,"inp_str = ""HELLO WORLD""

result_str = ''

for c in inp_str:
    if c.isupper():
        result_str += c.lower()
    else:
        result_str += c.upper()
        
print(result_str)","inp_str = ""HELLO WORLD""

result_str = ''

    ___
    ___
        result_str += c.lower()
    else:
        result_str += c.upper()
        
print(result_str)"
Compose a program to take in a string as an input and output only the unique characters in it.,python,"def unique_chars(string):
    unique_characters = set()
    for char in string:
        unique_characters.add(char)
    return unique_characters

print(unique_chars(""python""))",Data Type,5921,"def unique_chars(string):
    unique_characters = set()
    for char in string:
        unique_characters.add(char)
    return unique_characters

print(unique_chars(""python""))","    ___
    unique_characters = set()
    ___
        unique_characters.add(char)
    return unique_characters

print(unique_chars(""python""))"
Generate a code in Python that takes a string as input and removes duplicate characters from it,"St = ""DaSSmmoonnd""","st = ""DaSSmmoonnd""
st_list = list(st)
st_set = set(st_list)
st_nodupes = ''.join(st_set)
print(st_nodupes)",Data Type,5922,"st = ""DaSSmmoonnd""
st_list = list(st)
st_set = set(st_list)
st_nodupes = ''.join(st_set)
print(st_nodupes)","st = ""DaSSmmoonnd""
st_list = list(st)
st_set = set(st_list)
st_nodupes = ''.join(st_set)
print(st_nodupes)"
Write a Python program to translate a string into pig latin.,Hello,"def toPigLatin(word):
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[0]
    if first_letter in vowels:
        modified_word = word + ""way""
    else:
        modified_word = word[1:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)",Data Type,5931,"def toPigLatin(word):
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[0]
    if first_letter in vowels:
        modified_word = word + ""way""
    else:
        modified_word = word[1:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)","    ___
    vowels = [""a"",""e"",""i"",""o"",""u""]
    first_letter = word[0]
    ___
        modified_word = word + ""way""
    else:
        modified_word = word[1:] + first_letter + ""ay""
    return modified_word

result = toPigLatin(""Hello"")
print(result)"
What is the size of the memory required by a given string in Python?,"The given string is ""Hello World!""","The size of the memory required for the string ""Hello World!"" is 12 bytes.",Data Type,5938,"The size of the memory required for the string ""Hello World!"" is 12 bytes.","The size of the memory required for the string ""Hello World!"" is 12 bytes."
Generate a Python program that takes one string and returns the most frequently used character from the string.,"string = ""test string""","def most_frequent_character(string): 
    counts = dict() 
    max = -1
    character = '' 

    for char in string: 
        if char in counts: 
            counts[char] += 1
        else: 
            counts[char] = 1

        if counts[char] > max: 
            max = counts[char] 
            character = char 
    return character",Data Type,5951,"def most_frequent_character(string): 
    counts = dict() 
    max = -1
    character = '' 

    for char in string: 
        if char in counts: 
            counts[char] += 1
        else: 
            counts[char] = 1

        if counts[char] > max: 
            max = counts[char] 
            character = char 
    return character","    ___
    counts = dict() 
    max = -1
    character = '' 

    ___
    ___
            counts[char] += 1
        else: 
            counts[char] = 1

    ___
            max = counts[char] 
            character = char 
    return character"
Create a python 3 function to encode the input string.,Hello World!,"def encode_string(s):
    # Function to encode a string
    encoded_string = ''
    for c in s:
        encoded_string += hex(ord(c)).upper()[2:]
    return encoded_string",Data Type,5953,"def encode_string(s):
    # Function to encode a string
    encoded_string = ''
    for c in s:
        encoded_string += hex(ord(c)).upper()[2:]
    return encoded_string","    ___
    # Function to encode a string
    encoded_string = ''
    ___
        encoded_string += hex(ord(c)).upper()[2:]
    return encoded_string"
Write a Python program to evaluate a mathematical expression given as string.,"""2 + 3 * 5""","expression = ""2 + 3 * 5""
result = eval(expression)
print(result)",Data Type,5957,"expression = ""2 + 3 * 5""
result = eval(expression)
print(result)","expression = ""2 + 3 * 5""
result = eval(expression)
print(result)"
Create a Python program to convert a given date string to a datetime object and return the week number.,"""2020-05-18""","import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number",Data Type,5963,"import datetime
def get_week_number(date_string):
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number","import datetime
    ___
    d = datetime.datetime.strptime(date_string, '%Y-%m-%d')
    return d.isocalendar()[1]  # isocalendar() is used to get the ISO week number"
Compress the following string using the gzip library in Python.,"String: ""This is a sample string to compress.""","import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-8'))
print(compressed_string)",Data Type,5964,"import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-8'))
print(compressed_string)","import gzip

string = ""This is a sample string to compress.""
compressed_string = gzip.compress(string.encode('utf-8'))
print(compressed_string)"
Write a Python program to format a given string with a desired length.,"string = ""GPT-3""
length = 10","def format_string(string, length):
  format_string = string.ljust(length)
  return format_string

string = ""GPT-3""
length = 10
result = format_string(string, length)
print(result)  # -> GPT-3    (9 spaces added after GPT-3)",Data Type,5969,"def format_string(string, length):
  format_string = string.ljust(length)
  return format_string

string = ""GPT-3""
length = 10
result = format_string(string, length)
print(result)  # -> GPT-3    (9 spaces added after GPT-3)","    ___
  format_string = string.ljust(length)
  return format_string

string = ""GPT-3""
length = 10
result = format_string(string, length)
print(result)  # -> GPT-3    (9 spaces added after GPT-3)"
Generate a program in Python to convert all characters of a string in lowercase.,"String = ""HELLO""","def to_lower(string):
    return string.lower()",Data Type,5984,"def to_lower(string):
    return string.lower()","    ___
    return string.lower()"
Build a Python script for deleting all characters from a string,"string = ""Hello world!""","newString = string.replace("""", """")
print(newString)",Data Type,5985,"newString = string.replace("""", """")
print(newString)","newString = string.replace("""", """")
print(newString)"
Create a Python program to identify words of length k in a given string.,"String: ""This is a program to identify words of length 3""

Length: 3","def find_words_of_length_k(sentence, k):
    words = sentence.split(' ')
    words_of_length_k = []
    for word in words:
        if len(word) == k:
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length 3""
k = 3
print(find_words_of_length_k(sentence, k))",Data Type,5987,"def find_words_of_length_k(sentence, k):
    words = sentence.split(' ')
    words_of_length_k = []
    for word in words:
        if len(word) == k:
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length 3""
k = 3
print(find_words_of_length_k(sentence, k))","    ___
    words = sentence.split(' ')
    words_of_length_k = []
    ___
    ___
            words_of_length_k.append(word)
    return words_of_length_k

sentence = ""This is a program to identify words of length 3""
k = 3
print(find_words_of_length_k(sentence, k))"
Write a function in Python for encrypting a given string with a given key.,"Key: ""mykey123""
String: ""My secret message""","import base64
from Crypto.Cipher import AES

def encrypt(key, message):
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')",Data Type,5997,"import base64
from Crypto.Cipher import AES

def encrypt(key, message):
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')","import base64
from Crypto.Cipher import AES

    ___
 cipher = AES.new(key.encode(), AES.MODE_ECB)
 padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode())
 encrypted = cipher.encrypt(padded_msg)
 encoded = base64.b64encode(encrypted)
 return encoded.decode()

encrypt('mykey123', 'My secret message')"
Develop a Python program to filter out duplicate words in a given string.,This is a test string with some duplicate words.,"def filter_duplicate_words(original_string):
  words = original_string.split("" "")
  filtered_words = []
  for word in words:
    if word not in filtered_words:
      filtered_words.append(word)
  return ' '.join(filtered_words)",Data Type,6011,"def filter_duplicate_words(original_string):
  words = original_string.split("" "")
  filtered_words = []
  for word in words:
    if word not in filtered_words:
      filtered_words.append(word)
  return ' '.join(filtered_words)","    ___
  words = original_string.split("" "")
  filtered_words = []
    ___
    ___
      filtered_words.append(word)
  return ' '.join(filtered_words)"
Write a Python method that takes a string and returns its reverse.,text = 'hello',"def reverse(text):
 return text[::-1]",Data Type,6019,"def reverse(text):
 return text[::-1]","    ___
 return text[::-1]"
Create a function in Python that takes a string and returns a new string with the characters in reverse order.,"""Hello World!""","def reverse_string(input_str):
    reversed_str = """"
    for i in range(len(input_str)-1,-1,-1):
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))",Data Type,6036,"def reverse_string(input_str):
    reversed_str = """"
    for i in range(len(input_str)-1,-1,-1):
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))","    ___
    reversed_str = """"
    ___
        reversed_str += input_str[i]
    return reversed_str

print (reverse_string(""Hello World!""))"
Write a Python program that takes a text string as input and returns the number of words in it.,text = 'This is a sample string.',"def count_words(text):
    words = text.split()
    return len(words)",Data Type,6042,"def count_words(text):
    words = text.split()
    return len(words)","    ___
    words = text.split()
    return len(words)"
"Create a function in Python that takes a string and a dictionary, and returns a list of all the words in the string that match keys in the dictionary.","string = 'This is a string'
dictionary = {'This': 'that', 'is': 'not'}","def get_words(string, dict):
  words = string.split()
  
  output = []
  for word in words:
    if word in dict:
      output.append(dict[word])

  return output

output = get_words(string, dictionary)
print(output) # ['that', 'not']",Data Type,6044,"def get_words(string, dict):
  words = string.split()
  
  output = []
  for word in words:
    if word in dict:
      output.append(dict[word])

  return output

output = get_words(string, dictionary)
print(output) # ['that', 'not']","    ___
  words = string.split()
  
  output = []
    ___
    ___
      output.append(dict[word])

  return output

output = get_words(string, dictionary)
print(output) # ['that', 'not']"
Generate all the permutations of a string using Python.,"str = ""abc""","def permutations(str):
	if len(str) <= 1:
		return [str]

	perms = [] 
	for i in range(len(str)):
		rest_strings = str[:i] + str[i+1:]
		for perm in permutations(rest_strings):
			perms.append(str[i:i+1] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']",Data Type,6048,"def permutations(str):
	if len(str) <= 1:
		return [str]

	perms = [] 
	for i in range(len(str)):
		rest_strings = str[:i] + str[i+1:]
		for perm in permutations(rest_strings):
			perms.append(str[i:i+1] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']","    ___
    ___
		return [str]

	perms = [] 
    ___
		rest_strings = str[:i] + str[i+1:]
    ___
			perms.append(str[i:i+1] + perm)
	
	return perms

str = ""abc""
perms = permutations(str)
print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"
Design a program in Python to detect the vowel in a given string.,Hello World,"def vowelCheck(inputString): 
    vowels = ['a','e','i','o','u','A','E','I','O','U'] 
    for x in inputString: 
        if x in vowels: 
            return x",Data Type,6060,"def vowelCheck(inputString): 
    vowels = ['a','e','i','o','u','A','E','I','O','U'] 
    for x in inputString: 
        if x in vowels: 
            return x","    ___
    vowels = ['a','e','i','o','u','A','E','I','O','U'] 
    ___
    ___
            return x"
Write a Python program to replace all occurrences of a character in a string with the provided replacement character.,"str = ""Hello World!""

replacement = ‘X'","def replace_all_occurrences(str, char, replacement):
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))",Data Type,6069,"def replace_all_occurrences(str, char, replacement):
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))","    ___
  return str.replace(char, replacement)

print(replace_all_occurrences(""Hello World!"", 'l', 'X'))"
Develop a Python script to encode and decode a string using Base64.,"""Hello""","import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')",Data Type,6074,"import base64

def encode(s):
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

def decode(s):
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')","import base64

    ___
    encoded = base64.b64encode(s.encode('utf-8'))
    return encoded.decode('utf-8')

    ___
    decoded = base64.b64decode(s.encode('utf-8'))
    return decoded.decode('utf-8')"
Write a Python program to parse a string of JSON data and display each entry on the command line.,"{""name"": ""John"", ""age"": 30, ""city"": ""New York""}","import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')",Data Type,6080,"import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

for key, value in data_dict.items():
    print(f'{key}: {value}')","import json

data = '{""name"": ""John"", ""age"": 30, ""city"": ""New York""}'

data_dict = json.loads(data)

    ___
    print(f'{key}: {value}')"
Create a python program to remove characters from a string that's not a letter or symbol.,"string = ""ABC%@#XYZ""","string = ""ABC%@#XYZ""
new_string = ''.join(c for c in string if c.isalnum())
print(new_string) # output: ABCXYZ",Data Type,6082,"string = ""ABC%@#XYZ""
new_string = ''.join(c for c in string if c.isalnum())
print(new_string) # output: ABCXYZ","string = ""ABC%@#XYZ""
new_string = ''.join(c for c in string if c.isalnum())
print(new_string) # output: ABCXYZ"
"Given a string, write a Python function to lowercase all vowels.",String = 'Hello World',"def lower_vowels(str):
 vowels = ""aeiouAEIOU""
 new_str = """"
 
 for c in str:
  if c in vowels: 
   new_str += c.lower()
  else:
   new_str += c
 return new_str",Data Type,6083,"def lower_vowels(str):
 vowels = ""aeiouAEIOU""
 new_str = """"
 
 for c in str:
  if c in vowels: 
   new_str += c.lower()
  else:
   new_str += c
 return new_str","    ___
 vowels = ""aeiouAEIOU""
 new_str = """"
 
    ___
    ___
   new_str += c.lower()
  else:
   new_str += c
 return new_str"
Create a python code to format a given string as an email,"""John Doe jdoe@example.com""","""""""
This code formats a given string to an email address
""""""

def format_string(s):
    s = s.split("" "")
    name = s[0] + "" "" + s[1]
    email = s[2]
    return name + "" <"" + email + "">""

if __name__ == '__main__':
    string = ""John Doe jdoe@example.com""
    print(format_string(string))",Data Type,6090,"""""""
This code formats a given string to an email address
""""""

def format_string(s):
    s = s.split("" "")
    name = s[0] + "" "" + s[1]
    email = s[2]
    return name + "" <"" + email + "">""

if __name__ == '__main__':
    string = ""John Doe jdoe@example.com""
    print(format_string(string))","""""""
This code formats a given string to an email address
""""""

    ___
    s = s.split("" "")
    name = s[0] + "" "" + s[1]
    email = s[2]
    return name + "" <"" + email + "">""

    ___
    string = ""John Doe jdoe@example.com""
    print(format_string(string))"
Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character.,"""helloWorld12345""","def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    return counts",Data Type,6100,"def count_frequency(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    return counts","    ___
    counts = {}
    ___
    ___
            counts[char] += 1
        else:
            counts[char] = 1
    return counts"
Code a function in Python that takes an array of strings as parameter and returns the longest string.,"[""apple"", ""banana"", ""orange""]","def longest_string(arr):
    max_length = 0
    max_string = """"
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string",Data Type,6106,"def longest_string(arr):
    max_length = 0
    max_string = """"
    
    for s in arr:
        if len(s)> max_length:
            max_length = len(s)
            max_string = s
            
    return max_string","    ___
    max_length = 0
    max_string = """"
    
    ___
    ___
            max_length = len(s)
            max_string = s
            
    return max_string"
Generate code to identify the type of data stored in a given variable in Python.,"val1 = [""Hello"", 10, 3.14]","# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float",Data Type,6110,"# Identify the type of data stored in given variable

def identify_data_type(val):
    for item in val:
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float","# Identify the type of data stored in given variable

    ___
    ___
        data_type = type(item).__name__
        print(f""Data type of {item} is {data_type}"")

val1 = [""Hello"", 10, 3.14] 
identify_data_type(val1)

# Output
# Data type of Hello is str
# Data type of 10 is int
# Data type of 3.14 is float"
Create a Python program to detect whether an input string is palindrome or not.,Example input string: 'racecar',"def is_palindrome(input_string):
 rev_string = input_string[::-1]
 return input_string == rev_string 

input_string = 'racecar'

if is_palindrome(input_string):
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')",Data Type,6140,"def is_palindrome(input_string):
 rev_string = input_string[::-1]
 return input_string == rev_string 

input_string = 'racecar'

if is_palindrome(input_string):
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')","    ___
 rev_string = input_string[::-1]
 return input_string == rev_string 

input_string = 'racecar'

    ___
 print('The input string', input_string, 'is a palindrome.')
else:
 print('The input string', input_string, 'is not a palindrome.')"
Write a Python program to search for a particular string in a given paragraph.,"The given paragraph is ""Juggling is the height of skill and it needs serious practice"".
The search string is ""height""","def search_string (paragraph, search_string):
    if search_string in paragraph:
        print(""Found the string '"" + search_string + ""'"")
    else:
        print(""Sorry, string not found"")
search_string(paragraph, 'height')",Data Type,6148,"def search_string (paragraph, search_string):
    if search_string in paragraph:
        print(""Found the string '"" + search_string + ""'"")
    else:
        print(""Sorry, string not found"")
search_string(paragraph, 'height')","def search_string (paragraph, search_string):
    ___
        print(""Found the string '"" + search_string + ""'"")
    else:
        print(""Sorry, string not found"")
search_string(paragraph, 'height')"
"Write a Python script that takes a list of strings, finds the longest string, and prints it out.","['dog', 'cat', 'zebra','elephant']","def find_longest_string(string_list):
    longest_string = """"
    for i in string_list:
        if len(i) > len(longest_string):
            longest_string = i
    print(longest_string)


find_longest_string(['dog', 'cat', 'zebra', 'elephant'])",Data Type,6149,"def find_longest_string(string_list):
    longest_string = """"
    for i in string_list:
        if len(i) > len(longest_string):
            longest_string = i
    print(longest_string)


find_longest_string(['dog', 'cat', 'zebra', 'elephant'])","    ___
    longest_string = """"
    ___
    ___
            longest_string = i
    print(longest_string)


find_longest_string(['dog', 'cat', 'zebra', 'elephant'])"
Write a Python program to generate a dictionary that holds the count of each character present in a given string.,"""Programming""","def char_count(str): 
 result = {}
 for char in str: 
  if char in result:
  result[char] += 1
  else:
  result[char] = 1
 return result

result = char_count(""Programming"")
print(result)",Data Type,6191,"def char_count(str): 
 result = {}
 for char in str: 
  if char in result:
  result[char] += 1
  else:
  result[char] = 1
 return result

result = char_count(""Programming"")
print(result)","    ___
 result = {}
    ___
    ___
  result[char] += 1
  else:
  result[char] = 1
 return result

result = char_count(""Programming"")
print(result)"
Create a Python function that takes a string and a number as arguments. The function replaces all digits in the string with the supplied number.,"str = ""I am 8 years old.""
num = 3","def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)",Data Type,6194,"def replace_digit(str, num):
    new_str = """"
    for char in str:
        if char.isnumeric():
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)","    ___
    new_str = """"
    ___
    ___
            new_str += str(num)
        else:
            new_str += char
    
    return new_str

new_str = replace_digit(str, num)
print(new_str)"
Write a function in Python to check if a given string is a palindrome.,"String : ""racecar""","def is_palindrome(input):
 s = input.lower()
 return s == s[::-1]

print(is_palindrome(""racecar"")) # True",Data Type,6195,"def is_palindrome(input):
 s = input.lower()
 return s == s[::-1]

print(is_palindrome(""racecar"")) # True","    ___
 s = input.lower()
 return s == s[::-1]

print(is_palindrome(""racecar"")) # True"
Write a function in Python to search for a character in a given string.,"String: “Hello”
Character: ‘l’","def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False",Data Type,6200,"def serach_char(input_str, char):
  for char in input_str:
    if char == input_char:
      return True
  return False","    ___
    ___
    ___
      return True
  return False"
Write a Python program to find the longest string in a list of strings.,"[""Hello"", ""Hi"", ""What's up"", ""Hey"", ""Good morning""]","longest_string = """"
for string in string_list:
    if len(string) > len(longest_string):
        longest_string = string

print(longest_string)",Data Type,6205,"longest_string = """"
for string in string_list:
    if len(string) > len(longest_string):
        longest_string = string

print(longest_string)","longest_string = """"
    ___
    ___
        longest_string = string

print(longest_string)"
Use regex in Python to extract all the words in a string and calculate the total number of words in the string.,This is an example string,"import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + str(len(words)))",Data Type,6208,"import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + str(len(words)))","import re

text = ""This is an example string""
words = re.findall(r'\w+', text)
print(""Total words: "" + str(len(words)))"
"Given a text string, write a Python program to count the number of words in the string.","string = ""Python is a powerful programming language""","def count_words(string):
  words = string.split()
  return len(words)

string = ""Python is a powerful programming language""
print(count_words(string))",Data Type,6212,"def count_words(string):
  words = string.split()
  return len(words)

string = ""Python is a powerful programming language""
print(count_words(string))","    ___
  words = string.split()
  return len(words)

string = ""Python is a powerful programming language""
print(count_words(string))"
Write a function in Python that takes two arguments—a string and a positive integer n—and returns a list of size n containing the string repeated n times.,"string = ""Hello""
n = 4","def repeat_string(string, n):
     return [string]*n
     
# example
print(repeat_string(""Hello"", 4)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']",Data Type,6213,"def repeat_string(string, n):
     return [string]*n
     
# example
print(repeat_string(""Hello"", 4)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']","    ___
     return [string]*n
     
# example
print(repeat_string(""Hello"", 4)) 
# Output: ['Hello', 'Hello', 'Hello', 'Hello']"
Create a function in Python to convert a string to a list of words.,"""Hello, World!""","def convert_to_list(string):
    return string.split()

string = ""Hello, World!""
words_list = convert_to_list(string)
print(words_list)",Data Type,6217,"def convert_to_list(string):
    return string.split()

string = ""Hello, World!""
words_list = convert_to_list(string)
print(words_list)","    ___
    return string.split()

string = ""Hello, World!""
words_list = convert_to_list(string)
print(words_list)"
"Write a function in Python that will take two input strings, concatenate them, and return the reversed string.","string1 = 'Hello'
string2 = 'World'","def reverseString(s1, s2):
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH",Data Type,6221,"def reverseString(s1, s2):
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH","    ___
 s = s1 + s2
 return s[::-1]

reverseString(string1, string2)
# Result: dlroW olleH"
Determine the type of the following python object.,"[1, 2, [3, 4]]",list,Data Type,6222,list,list
Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome.,x = 'abacdbcdbafeaccba',"def longest_palindrome(x):
    longest = ''
    for i in range(len(x)):
        j = i + len(longest) + 1
        while j <= len(x):
            substring = x[i:j]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
            j = j + 1
    return longest",Data Type,6230,"def longest_palindrome(x):
    longest = ''
    for i in range(len(x)):
        j = i + len(longest) + 1
        while j <= len(x):
            substring = x[i:j]
            if substring == substring[::-1] and len(substring) > len(longest):
                longest = substring
            j = j + 1
    return longest","    ___
    longest = ''
    ___
        j = i + len(longest) + 1
    ___
            substring = x[i:j]
    ___
                longest = substring
            j = j + 1
    return longest"
Create a Python script that checks whether a given string is a palindrome.,"""malayalam""","def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")",Data Type,6240,"def isPalindrome(str): 
    # Run loop from 0 to len/2 
    for i in range(0, len(str)//2): 
        if str[i] != str[len(str)-i-1]: 
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
if ans: 
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")","    ___
    # Run loop from 0 to len/2 
    ___
    ___
            return False
    return True
  
# main
myStr = ""malayalam""

ans = isPalindrome(myStr) 
  
    ___
    print(""The given string is a palindrome"") 
else: 
    print(""The given string isn't a palindrome"")"
Generate a Python program to classify the types of letters contained in a string.,'abcdefghijklmnopqrstuvwxyz',"def classify_letter_types(string):
    lowercase_letters = []
    uppercase_letters = []
  
    for letter in string:
        if letter.isupper():
            uppercase_letters.append(letter)
        else:
            lowercase_letters.append(letter)
    return {
        'lowercase_letters': lowercase_letters, 
        'uppercase_letters': uppercase_letters
    }",Data Type,6249,"def classify_letter_types(string):
    lowercase_letters = []
    uppercase_letters = []
  
    for letter in string:
        if letter.isupper():
            uppercase_letters.append(letter)
        else:
            lowercase_letters.append(letter)
    return {
        'lowercase_letters': lowercase_letters, 
        'uppercase_letters': uppercase_letters
    }","    ___
    lowercase_letters = []
    uppercase_letters = []
  
    ___
    ___
            uppercase_letters.append(letter)
        else:
            lowercase_letters.append(letter)
    return {
        'lowercase_letters': lowercase_letters, 
        'uppercase_letters': uppercase_letters
    }"
"Create a Python script to generate random passwords. The script should take one parameter, an integer representing the length of the password, and should return a random string of the specified length.",Length: 8,"import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))",Data Type,6261,"import string
import random

def generate_password(length):
 password = ''
 for i in range(length):
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))","import string
import random

    ___
 password = ''
    ___
 password += random.choice(string.ascii_letters + string.digits)
 return password

print(generate_password(8))"
"Create a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed.","String: ""Hello world""
1st Integer: 0
2nd Integer: 5","def reverse_substring(sentence, start, end):
    reversed = sentence[end:start-1:-1]
    return sentence[:start] + reversed + sentence[end+1:]

result = reverse_substring(""Hello world"", 0, 5)
print(result)",Data Type,6262,"def reverse_substring(sentence, start, end):
    reversed = sentence[end:start-1:-1]
    return sentence[:start] + reversed + sentence[end+1:]

result = reverse_substring(""Hello world"", 0, 5)
print(result)","    ___
    reversed = sentence[end:start-1:-1]
    return sentence[:start] + reversed + sentence[end+1:]

result = reverse_substring(""Hello world"", 0, 5)
print(result)"
"Write a function that takes in two strings, compares them, and returns the longer string.","String 1: Python
String 2: C++","def compareLongestString(str1, str2):
 
  if len(str1) > len(str2):
   longestString = str1
  elif len(str2) > len(str1):
   longestString = str2
  else:
   longestString = ""Strings have the same length""

  return longestString

print(compareLongestString(""Python"", ""C++""))",Data Type,6269,"def compareLongestString(str1, str2):
 
  if len(str1) > len(str2):
   longestString = str1
  elif len(str2) > len(str1):
   longestString = str2
  else:
   longestString = ""Strings have the same length""

  return longestString

print(compareLongestString(""Python"", ""C++""))","    ___
 
    ___
   longestString = str1
    ___
   longestString = str2
  else:
   longestString = ""Strings have the same length""

  return longestString

print(compareLongestString(""Python"", ""C++""))"
Create a Python function to edit a given string by changing the order of some of its characters.,"string: ""hello world""","def edit_string(string):
 characters = list(string)
 np.random.shuffle(characters)
 edited_string = """".join(characters)
 return edited_string",Data Type,6281,"def edit_string(string):
 characters = list(string)
 np.random.shuffle(characters)
 edited_string = """".join(characters)
 return edited_string","    ___
 characters = list(string)
 np.random.shuffle(characters)
 edited_string = """".join(characters)
 return edited_string"
Write a Python program that takes an input string and reverses all of its words.,hello world,world hello,Data Type,6287,world hello,world hello
Generate an algorithm in Python to determine the count of each occurrence of a given character in a string,"string: ""abracadabra""
character: 'a'","def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5",Data Type,6288,"def count_characters(string, character):
    count = 0
    for c in string:
        if c == character:
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5","    ___
    count = 0
    ___
    ___
            count += 1
    return count

count_characters(""abracadabra"", 'a')  # 5"
Write a python code to check if the string has unique characters.,String: “abcdefg”,"def unique_string(string):
    return len(string) == len(set(string))

if __name__ == '__main__':
    string = 'abcdefg'
    print(unique_string(string))",Data Type,6294,"def unique_string(string):
    return len(string) == len(set(string))

if __name__ == '__main__':
    string = 'abcdefg'
    print(unique_string(string))","    ___
    return len(string) == len(set(string))

    ___
    string = 'abcdefg'
    print(unique_string(string))"
Write a Python script to input a string and display it in reverse.,Hello world!,!dlrow olleH,Data Type,6300,!dlrow olleH,!dlrow olleH
"Using Python, write a program to tokenize a given string.","""This is a sentence""","import re

def tokenize(s):
    tokens = re.findall(r'\w+|[^\w\s]', s, flags=re.UNICODE)
    return tokens

print(tokenize(""This is a sentence""))",Data Type,6312,"import re

def tokenize(s):
    tokens = re.findall(r'\w+|[^\w\s]', s, flags=re.UNICODE)
    return tokens

print(tokenize(""This is a sentence""))","import re

    ___
    tokens = re.findall(r'\w+|[^\w\s]', s, flags=re.UNICODE)
    return tokens

print(tokenize(""This is a sentence""))"
Can you write a python code that extracts the upper case character from a given string?,Input String: Foobar,"input_string = 'Foobar'

upper_case_characters = []

for char in input_string:
    if char.isupper():
        upper_case_characters.append(char)

print(upper_case_characters)",Data Type,6313,"input_string = 'Foobar'

upper_case_characters = []

for char in input_string:
    if char.isupper():
        upper_case_characters.append(char)

print(upper_case_characters)","input_string = 'Foobar'

upper_case_characters = []

    ___
    ___
        upper_case_characters.append(char)

print(upper_case_characters)"
Create a Python function that returns the longest string from a given list.,"[""my"", ""cat"", ""is"", ""lazy""]","def longest_string(strings):
  max_length = 0
  longest_string = """"
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)",Data Type,6315,"def longest_string(strings):
  max_length = 0
  longest_string = """"
  
  for s in strings:
    if len(s) > max_length:
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)","    ___
  max_length = 0
  longest_string = """"
  
    ___
    ___
      max_length = len(s)
      longest_string = s
  
  return longest_string

result = longest_string([""my"", ""cat"", ""is"", ""lazy""])
print(result)"
Create a Python program to convert a given string in a sentence case.,THIS IS A STRING.,"CaseString = ""THIS IS A STRING.""

def sentence_case(CaseString):
    return CaseString.capitalize()

print(sentence_case(CaseString))",Data Type,6326,"CaseString = ""THIS IS A STRING.""

def sentence_case(CaseString):
    return CaseString.capitalize()

print(sentence_case(CaseString))","CaseString = ""THIS IS A STRING.""

    ___
    return CaseString.capitalize()

print(sentence_case(CaseString))"
"Create a Python program that takes in a list of strings, sorts them, and then prints each string in sorted order.","[""banana"", ""apple"", ""orange"", ""pear""]","def sortStrings(arr):
    arr.sort()
    
    for string in arr:
        print(string)

#Test
arr = [""banana"", ""apple"", ""orange"", ""pear""]
sortStrings(arr) # Outputs: apple banana orange pear",Data Type,6331,"def sortStrings(arr):
    arr.sort()
    
    for string in arr:
        print(string)

#Test
arr = [""banana"", ""apple"", ""orange"", ""pear""]
sortStrings(arr) # Outputs: apple banana orange pear","    ___
    arr.sort()
    
    ___
        print(string)

#Test
arr = [""banana"", ""apple"", ""orange"", ""pear""]
sortStrings(arr) # Outputs: apple banana orange pear"
Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string.,"String 1 = ""Hello World!""
String 2 = ""World""","def contains(s1, s2):
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # True",Data Type,6337,"def contains(s1, s2):
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # True","    ___
 return s2 in s1

string1 = ""Hello World!""
string2 = ""World""

print(contains(string1, string2)) # True"
Create a python function for encrypting information that takes a string and a key.,"String = ""This is a secret message""
Key = ""12345678""","import secrets

def encrypt(string, key):
 cipher = ''
 for i in range(len(string)):
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""12345678"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08""",Data Type,6343,"import secrets

def encrypt(string, key):
 cipher = ''
 for i in range(len(string)):
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""12345678"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08""","import secrets

    ___
 cipher = ''
    ___
 cipher += chr(ord(string[i]) + ord(key[i % len(key)]))
 return cipher

encrypt(""This is a secret message"", ""12345678"") 
# prints ""\x18\x01\x15\x05\x1a\x12\x1b\x1f\x1f\x1e\x10\x04\x1f\x1f\x19\x0f\x02\x03\x07\x08"""
Design and write a Python program to extract all public email addresses from a given string,"""My email is john@example.com and yours is john@gmail.com.""","import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)",Data Type,6353,"import re

def extract_emails(text):
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)","import re

    ___
  emails = re.findall(r""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
  return emails

extracted_emails = extract_emails(""My email is john@example.com and yours is john@gmail.com"")
print(extracted_emails)"
Generate a code snippet in Python to split a given string into substrings based on a specific delimiter.,"""1, 2, 3, 4""","str = ""1, 2, 3, 4""
list = str.split(', ') 
print(list) # Output is ['1', '2', '3', '4']",Data Type,6354,"str = ""1, 2, 3, 4""
list = str.split(', ') 
print(list) # Output is ['1', '2', '3', '4']","str = ""1, 2, 3, 4""
list = str.split(', ') 
print(list) # Output is ['1', '2', '3', '4']"
Rewrite a Python script in Swift to generate random string of length n.,Length: 8,"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)",Data Type,6356,"import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)","import Foundation

func randomString(length: Int) -> String {
    let letters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    return String((0..<length).map { _ in letters.randomElement()! })
}

let str = randomString(length: 8)
print(str)"
Design a Python program to search for a substring in a given string.,"str = ""This is a string"";
substr = ""is""","def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -1",Data Type,6358,"def searchSubstring(str, substr):
  for i in range(len(str)):
    if str[i:i+len(substr)] == substr:
      return i

    return -1","    ___
    ___
    ___
      return i

    return -1"
Design a function in Python that accepts a string and prints the number of occurrences of each letter in the string.,"""Hello, World!""","def count_letters(text):
    letters_count = dict()

    for char in text:
        if char not in letters_count:
            letters_count[char] = 1
        else:
            letters_count[char] += 1

    return letters_count

if __name__ == '__main__':
    text = 'Hello, World!'
    print(count_letters(text))",Data Type,6369,"def count_letters(text):
    letters_count = dict()

    for char in text:
        if char not in letters_count:
            letters_count[char] = 1
        else:
            letters_count[char] += 1

    return letters_count

if __name__ == '__main__':
    text = 'Hello, World!'
    print(count_letters(text))","    ___
    letters_count = dict()

    ___
    ___
            letters_count[char] = 1
        else:
            letters_count[char] += 1

    return letters_count

    ___
    text = 'Hello, World!'
    print(count_letters(text))"
Transform a given string to uppercase.,"string = ""Python Programming""","def to_upper(string):
    return string.upper()

string = ""Python Programming""
print(to_upper(string))",Data Type,6383,"def to_upper(string):
    return string.upper()

string = ""Python Programming""
print(to_upper(string))","    ___
    return string.upper()

string = ""Python Programming""
print(to_upper(string))"
Create a Node.js script for returning the longest string in an array.,"[""javascript"", ""ruby"", ""python"", ""java""]","const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[0];
 for (let i = 1; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript""",Data Type,6387,"const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[0];
 for (let i = 1; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript""","const arr = [""javascript"", ""ruby"", ""python"", ""java""];

const longestString = (arr) => {
 let longest = arr[0];
 for (let i = 1; i < arr.length; i++) {
 if (arr[i].length > longest.length) {
 longest = arr[i];
 }
 }
 return longest;
};

const longestStr = longestString(arr);

console.log(longestStr); // Output: ""javascript"""
Write a Python program to convert a given string to all uppercase letters.,hello world,"string = ""hello world""
string_upper_characters = string.upper()
print(string_upper_characters)",Data Type,6389,"string = ""hello world""
string_upper_characters = string.upper()
print(string_upper_characters)","string = ""hello world""
string_upper_characters = string.upper()
print(string_upper_characters)"
Create a Python script that counts the number of vowels from a given string.,"""This is an example string""","def count_vowels(string):
    count = 0
    for char in string:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")",Data Type,6394,"def count_vowels(string):
    count = 0
    for char in string:
        if char in ""aeiouAEIOU"":
            count += 1
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")","    ___
    count = 0
    ___
    ___
            count += 1
    return count

string = ""This is an example string""
vowels = count_vowels(string)

print(f""Number of vowels in the given string: {vowels}"")"
Create a python program to reverse a string passed as input.,Hello World!,"def reverse_string(stringToReverse):
    reversedString = """"
    for i in reversed(stringToReverse):
        reversedString += i
    return reversedString
    
stringToReverse = input(""Enter string to reverse: "")
result = reverse_string(stringToReverse)
print(result)",Data Type,6401,"def reverse_string(stringToReverse):
    reversedString = """"
    for i in reversed(stringToReverse):
        reversedString += i
    return reversedString
    
stringToReverse = input(""Enter string to reverse: "")
result = reverse_string(stringToReverse)
print(result)","    ___
    reversedString = """"
    ___
        reversedString += i
    return reversedString
    
stringToReverse = input(""Enter string to reverse: "")
result = reverse_string(stringToReverse)
print(result)"
Design a function in Python that removes any characters from a given string that appears 2 or more times.,"""aabcdbb""","def remove_duplicates(string): 
    res = """" 
    for ch in string: 
        if string.count(ch) < 2: 
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb",Data Type,6408,"def remove_duplicates(string): 
    res = """" 
    for ch in string: 
        if string.count(ch) < 2: 
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb","    ___
    res = """" 
    ___
    ___
            res += ch 
    return res

string = ""aabcdbb""
print(remove_duplicates(string))  # prints acdb"
Create a python code to check if all characters are unique in a given string,string = 'abcdefeb',"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))",Data Type,6413,"def is_unique(string):
    chars = set()
    for char in string:
        if char in chars:
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))","    ___
    chars = set()
    ___
    ___
            return False
        else:
            chars.add(char)
    return True

print(is_unique(string))"
Create a python code snippet to count the frequencies of words in a given string,"string = ""This is a test string""","def countFrequencies(string):
    words = string.split()
    freq_dict = {}
    for word in words:
        if word not in freq_dict:
            freq_dict[word] = 1
        else:
            freq_dict[word] += 1
    return freq_dict

# example
result = countFrequencies(""This is a test string"")",Data Type,6422,"def countFrequencies(string):
    words = string.split()
    freq_dict = {}
    for word in words:
        if word not in freq_dict:
            freq_dict[word] = 1
        else:
            freq_dict[word] += 1
    return freq_dict

# example
result = countFrequencies(""This is a test string"")","    ___
    words = string.split()
    freq_dict = {}
    ___
    ___
            freq_dict[word] = 1
        else:
            freq_dict[word] += 1
    return freq_dict

# example
result = countFrequencies(""This is a test string"")"
Create a Python function that takes a string and finds the longest word in it.,"sentence = ""This is an example of a sentence with some words""","def longestWord(sentence): 
    longestWord = ''
    maxLength = 0
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)",Data Type,6424,"def longestWord(sentence): 
    longestWord = ''
    maxLength = 0
    for word in sentence.split(' '):
        if len(word) > maxLength:
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)","    ___
    longestWord = ''
    maxLength = 0
    ___
    ___
           maxLength = len(word)
           longestWord = word
    return longestWord

longest_word = longestWord(sentence)
print('The longest word is: '+ longest_word)"
Generate a Python program for extending a list with strings. The program should take a string as input and create a new list containing the string and all the strings from the input list.,"inputList = [""Hello"", ""World""]
newString = ""Hi""","inputList = [""Hello"", ""World""]
newString = ""Hi""

outputList = []

for string in inputList:
    outputList.append(string)

outputList.append(newString)

print(outputList)",Data Type,6427,"inputList = [""Hello"", ""World""]
newString = ""Hi""

outputList = []

for string in inputList:
    outputList.append(string)

outputList.append(newString)

print(outputList)","inputList = [""Hello"", ""World""]
newString = ""Hi""

outputList = []

    ___
    outputList.append(string)

outputList.append(newString)

print(outputList)"
Develop a python program that detects and corrects spelling mistakes in a given string.,"String: ""The quik brown foox jumped oevr the lasy dog.""","import re

def spell_check(s):
 corrected = re.sub(r'\bfoox\b', 'fox', s)
 corrected = re.sub(r'\boevr\b', 'over', corrected)
 corrected = re.sub(r'\blasy\b', 'lazy', corrected)
 return corrected

print spell_check(""The quik brown foox jumped oevr the lasy dog."")",Data Type,6434,"import re

def spell_check(s):
 corrected = re.sub(r'\bfoox\b', 'fox', s)
 corrected = re.sub(r'\boevr\b', 'over', corrected)
 corrected = re.sub(r'\blasy\b', 'lazy', corrected)
 return corrected

print spell_check(""The quik brown foox jumped oevr the lasy dog."")","import re

    ___
 corrected = re.sub(r'\bfoox\b', 'fox', s)
 corrected = re.sub(r'\boevr\b', 'over', corrected)
 corrected = re.sub(r'\blasy\b', 'lazy', corrected)
 return corrected

print spell_check(""The quik brown foox jumped oevr the lasy dog."")"
Write a Python script to split a string into a list based on the given delimiter.,"string: ""The,quick,brown,fox"" ; delimiter: "",""","def split_string(string, delimiter):
    return string.split(delimiter)",Data Type,6435,"def split_string(string, delimiter):
    return string.split(delimiter)","    ___
    return string.split(delimiter)"
Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.,"String 1: abc
String 2: qaxbcy","def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)",Data Type,6441,"def is_subsequence(str1, str2):
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
        if str1[i] == str2[j]:
            i += 1
        j += 1

    return i == len(str1)","    ___
    i = 0
    j = 0

    while(i < len(str1) and j < len(str2)):
    ___
            i += 1
        j += 1

    return i == len(str1)"
"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string.",number = 5,"def IntToBinString(number):
    if number == 0:
        return ""0""
    ret = """"
    while number > 0:
        if number % 2 == 1:
            ret = ""1"" + ret
        else:
            ret = ""0"" + ret
        number //= 2
    return ret",Data Type,6442,"def IntToBinString(number):
    if number == 0:
        return ""0""
    ret = """"
    while number > 0:
        if number % 2 == 1:
            ret = ""1"" + ret
        else:
            ret = ""0"" + ret
        number //= 2
    return ret","    ___
    ___
        return ""0""
    ret = """"
    ___
    ___
            ret = ""1"" + ret
        else:
            ret = ""0"" + ret
        number //= 2
    return ret"
Write a Python function to replace all occurrences of a pattern in a string with a specific string?,"String: ""Today is a beautiful day""
Pattern: ""a""
Replacement: ""the""","def replace_all(orig_str, pattern, replacement):
	return orig_str.replace(pattern, replacement)

print(replace_all(orig_str=""Today is a beautiful day"", pattern=""a"", replacement=""the""))",Data Type,6477,"def replace_all(orig_str, pattern, replacement):
	return orig_str.replace(pattern, replacement)

print(replace_all(orig_str=""Today is a beautiful day"", pattern=""a"", replacement=""the""))","    ___
	return orig_str.replace(pattern, replacement)

print(replace_all(orig_str=""Today is a beautiful day"", pattern=""a"", replacement=""the""))"
"Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear.","json_string = '{""fruit"": [""apple"", ""banana"", ""cherry""], ""vegetable"": [""carrot"", ""potato"", ""onion""]}'","import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)",Data Type,6483,"import json
 
def reformat_json(json_string):
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)","import json
 
    ___
    return json.dumps(json.loads(json_string), indent=4, sort_keys=True)"
Create a Python script to format a JSON string.,"json_str = ‘{”name”:”Robert”, ”age”:30, ”city”:”New York”}’","# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=4)

# print the formatted json string
print(formatted_json)",Data Type,6488,"# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=4)

# print the formatted json string
print(formatted_json)","# import json library
import json

# parse input string as JSON
json_data = json.loads(json_str)

# format the json string
formatted_json = json.dumps(json_data, indent=4)

# print the formatted json string
print(formatted_json)"
Generate a python program to check if the string is a palindrome or not.,"string = ""madam""","def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True
    else:
        return False",Data Type,6504,"def is_palindrom(string):
    reverse_string = string[::-1]
    if string == reverse_string:
        return True
    else:
        return False","    ___
    reverse_string = string[::-1]
    ___
        return True
    else:
        return False"
Write a sorting algorithm in Python to sort a set of strings based on the length of each string.,"['banana', 'apple', 'mango', 'pear']","def sort_strings(string_list):
  return sorted(string_list, key=len)

# Usage example
string_list = ['banana', 'apple', 'mango', 'pear']
print(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana']",Data Type,6511,"def sort_strings(string_list):
  return sorted(string_list, key=len)

# Usage example
string_list = ['banana', 'apple', 'mango', 'pear']
print(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana']","    ___
  return sorted(string_list, key=len)

# Usage example
string_list = ['banana', 'apple', 'mango', 'pear']
print(sort_strings(string_list))  # Outputs ['apple', 'pear', 'mango', 'banana']"
"Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times.","String: xyz
Number: 3","def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", 3)
print(result)",Data Type,6513,"def repeatString(string, num):
    return string * num

result = repeatString(""xyz"", 3)
print(result)","    ___
    return string * num

result = repeatString(""xyz"", 3)
print(result)"
Write a Python script that takes a long string and prints each word on a new line.,"string = ""Hello World this is a Test""","#!/usr/bin/env python

text = ""Hello World this is a Test""
words = text.split()

for word in words:
 print(word)",Data Type,6520,"#!/usr/bin/env python

text = ""Hello World this is a Test""
words = text.split()

for word in words:
 print(word)","#!/usr/bin/env python

text = ""Hello World this is a Test""
words = text.split()

    ___
 print(word)"
"In Python, find the index of a character in a given string.","string = ""Hello World""
character = 'l'","string = ""Hello World""
character = 'l'

index = string.index(character)
print(index)",Data Type,6526,"string = ""Hello World""
character = 'l'

index = string.index(character)
print(index)","string = ""Hello World""
character = 'l'

index = string.index(character)
print(index)"
Generate a correct python script to identify string elements whose length is even,"my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]","my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

def find_even_length(lst):
    even_list = []
    for l in lst:
        if len(l) % 2 == 0:
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)",Data Type,6537,"my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

def find_even_length(lst):
    even_list = []
    for l in lst:
        if len(l) % 2 == 0:
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)","my_list = [""House"", ""Car"", ""Tree"", ""Planet"", ""Satellite""]

    ___
    even_list = []
    ___
    ___
            even_list.append(l)
    return even_list

even_list = find_even_length(my_list)
print(even_list)"
Write a Python script to convert a string containing temperatures in Celsius to Fahrenheit,"string celsius = '25, 15, 32'","def convertCelsiusToFahrenheit(celsius):
 temperature_fahrenheit = []

 for c in celsius.split(','):
 temperature_fahrenheit.append(float(c)*1.8 + 32)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)",Data Type,6547,"def convertCelsiusToFahrenheit(celsius):
 temperature_fahrenheit = []

 for c in celsius.split(','):
 temperature_fahrenheit.append(float(c)*1.8 + 32)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)","    ___
 temperature_fahrenheit = []

    ___
 temperature_fahrenheit.append(float(c)*1.8 + 32)

 return temperature_fahrenheit

fahrenheit = convertCelsiusToFahrenheit(celsius)
print(fahrenheit)"
Write a Python program to detect if a given string contains any of the given keywords.,"String: I love ice cream
Keywords: [""chocolate"", ""vanilla""]","def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))",Data Type,6550,"def keyword_detector(string, keywords):
 for i in keywords:
 if i in string:
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))","    ___
    ___
    ___
 return True
 return False

print(keyword_detector(""I love ice cream"", [""chocolate"", ""vanilla""]))"
Create an algorithm in Python to check if a given string contains valid parentheses.,"""[[{{}}]]""","def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))",Data Type,6551,"def isValid(s):
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    for char in s:
        if char in dict.values():
            stack.append(char)
        elif char in dict.keys():
            if stack == [] or dict[char] != stack.pop():
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))","    ___
    stack = []
    dict = {""]"":""["", ""}"":""{"", "")"":""(""}
    ___
    ___
            stack.append(char)
    ___
    ___
                return False
        else:
            return False
    return stack == []

print(isValid('[[{{}}]]'))"
Program a function in Python that creates all substrings of a given string.,"The string is ""create"".","def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString",Data Type,6586,"def createSubstrings(string): 
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    for i in range(length): 
        for j in range(i + 1, length + 1): 
            subString.append(string[i:j]) 
  
    return subString","    ___
    length = len(string) 
    subString = []
    
    # Loops through the string  
    # and the length of substring to be formed 
    ___
    ___
            subString.append(string[i:j]) 
  
    return subString"
Please write a code to extract the URL from a given string.,There is a website: https://example.com,"#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[0]

# print result
print(url) # Output: https://example.com",Data Type,6594,"#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[0]

# print result
print(url) # Output: https://example.com","#!/usr/bin/python
import re

# input string
string = ""There is a website: https://example.com""

# regex
pattern = r'(https?://\S+)'

# match url
url = re.findall(pattern, string)[0]

# print result
print(url) # Output: https://example.com"
Create a Python program that takes a string and indicates whether it is a palindrome or not.,"""racecar""","def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))",Data Type,6596,"def is_palindrome(s):
  s = s.lower()
  left = 0
  right = len(s) - 1
  
  while left < right:
    if s[left] != s[right]:
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))","    ___
  s = s.lower()
  left = 0
  right = len(s) - 1
  
    ___
    ___
      return False
    left += 1
    right -= 1
  return True
  
print(is_palindrome(""racecar""))"
Create a Python program to estimate the number of unique words in a string of text.,"""One two three four, five. Six seven eight nine, ten.""","def count_unique_words(s):
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is 10",Data Type,6605,"def count_unique_words(s):
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is 10","    ___
    words = s.split()
    unique_words = set(words)
    return len(unique_words)

input_string = ""One two three four, five. Six seven eight nine, ten.""
print(""The number of unique words is"", count_unique_words(input_string))

# Output
# The number of unique words is 10"
Write a Python program to edit a given text string and capitalize the first letter of every word.,hello world.,"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)",Data Type,6609,"def capitalize_words(string):
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)","    ___
 words = string.split(' ')
 capitalized = [word.capitalize() for word in words]
 return ' '.join(capitalized)"
"Using Python, create an algorithm to count the number of vowels in a given string.","String: ""Hello, World!""","def countVowels(string):
    string = string.lower()
    count = 0
    vowels = 'aeiou'

    for char in string:
        if char in vowels:
            count += 1
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)",Data Type,6627,"def countVowels(string):
    string = string.lower()
    count = 0
    vowels = 'aeiou'

    for char in string:
        if char in vowels:
            count += 1
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)","    ___
    string = string.lower()
    count = 0
    vowels = 'aeiou'

    ___
    ___
            count += 1
    return count

string = 'Hello, World!'
vowelCount = countVowels(string)
print(""Number of vowels is:"", vowelCount)"
Create a function in Python to remove all characters which are not alphanumeric from a given string.,"text = ""This is a $tring with #ymbols""","def remove_nonalphanum(text):
  new_string = """"
  for char in text:
    if char.isalnum():
      new_string += char
  return new_string

cleaned_string = remove_nonalphanum(text)
print(cleaned_string) #prints ""ThisisaStringwithymbols""",Data Type,6630,"def remove_nonalphanum(text):
  new_string = """"
  for char in text:
    if char.isalnum():
      new_string += char
  return new_string

cleaned_string = remove_nonalphanum(text)
print(cleaned_string) #prints ""ThisisaStringwithymbols""","    ___
  new_string = """"
    ___
    ___
      new_string += char
  return new_string

cleaned_string = remove_nonalphanum(text)
print(cleaned_string) #prints ""ThisisaStringwithymbols"""
Come up with a Python program to aggregate a list of strings based on the number of character occurrences in each string.,"List of strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]","from collections import defaultdict

strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]

dictionary = defaultdict(list)
for string in strings:
    char_count = len(string)
    dictionary[char_count].append(string)

print(dictionary)",Data Type,6639,"from collections import defaultdict

strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]

dictionary = defaultdict(list)
for string in strings:
    char_count = len(string)
    dictionary[char_count].append(string)

print(dictionary)","from collections import defaultdict

strings = [""Apple"", ""Orange"", ""Banana"", ""Pineapple""]

dictionary = defaultdict(list)
    ___
    char_count = len(string)
    dictionary[char_count].append(string)

print(dictionary)"
Write a Python program that takes a URL and downloads the HTML page as a string.,"url = ""https://www.example.com""","import requests

def get_html_page(url):
 response = requests.get(url)
 return response.text",Data Type,6664,"import requests

def get_html_page(url):
 response = requests.get(url)
 return response.text","import requests

    ___
 response = requests.get(url)
 return response.text"
Create a python program to replace specific words in a given input string with a custom word.,"Input string: I love robots
Replace: love -> hate","def replace_word(inp, src, target):
    inp = inp.split()
    for i in range(len(inp)):
        if inp[i] == src:
            inp[i] = target
    return ' '.join(inp)",Data Type,6677,"def replace_word(inp, src, target):
    inp = inp.split()
    for i in range(len(inp)):
        if inp[i] == src:
            inp[i] = target
    return ' '.join(inp)","    ___
    inp = inp.split()
    ___
    ___
            inp[i] = target
    return ' '.join(inp)"
Create a Python program to compare two strings and generate a string with all characters that are present in both strings.,"first_string = ""hello""
second_string = ""world""","def compare_strings(first_string, second_string):
    string_list = set(list(first_string)) & set(list(second_string))
    common_string = ''.join(string_list)
    return common_string

print(compare_strings(""hello"", ""world""))",Data Type,6680,"def compare_strings(first_string, second_string):
    string_list = set(list(first_string)) & set(list(second_string))
    common_string = ''.join(string_list)
    return common_string

print(compare_strings(""hello"", ""world""))","    ___
    string_list = set(list(first_string)) & set(list(second_string))
    common_string = ''.join(string_list)
    return common_string

print(compare_strings(""hello"", ""world""))"
Write a Python program that takes a list of strings as input and returns a string containing all the strings joined together in alphabetical order.,"['apple', 'banana', 'orange']","def alphabetize_list(arr):
  arr.sort()
  return ' '.join(arr)

data = ['apple', 'banana', 'orange']
result = alphabetize_list(data)
print(result)",Data Type,6684,"def alphabetize_list(arr):
  arr.sort()
  return ' '.join(arr)

data = ['apple', 'banana', 'orange']
result = alphabetize_list(data)
print(result)","    ___
  arr.sort()
  return ' '.join(arr)

data = ['apple', 'banana', 'orange']
result = alphabetize_list(data)
print(result)"
Generate a function in Python to replace every character in a string with the character that follows it in the alphabet.,"string = ""abc""","def replace_char(string):
    encoded = """"
    for char in string:
        if char == 'z':
            encoded += 'a'
        else:
            encoded += chr(ord(char) + 1)
    return encoded",Data Type,6699,"def replace_char(string):
    encoded = """"
    for char in string:
        if char == 'z':
            encoded += 'a'
        else:
            encoded += chr(ord(char) + 1)
    return encoded","    ___
    encoded = """"
    ___
    ___
            encoded += 'a'
        else:
            encoded += chr(ord(char) + 1)
    return encoded"
Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.,"phrases = [""A bird in the hand"", ""is worth two in the bush""]","result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)",Data Type,6715,"result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
for phrase in input_phrases:
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)","result = ""A bird in the hand (17)is worth two in the bush (25)""
 
code:
input_phrases = [""A bird in the hand"", ""is worth two in the bush""]
 
result = """"
    ___
 result += phrase + ' (' + str(len(phrase)) + ')'
 
print(result)"
Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string.,"Example String: ""missisippi""","def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}",Data Type,6727,"def unique_characters(string):
    unique_chars = {}
    for char in string:
        if char in unique_chars:
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}","    ___
    unique_chars = {}
    ___
    ___
            continue
        else:
            unique_chars[char] = True
    return unique_chars

result = unique_characters('missisippi')
print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}"
Generate a python code that adds a delimiter string between every list item.,"[""apple"", ""orange"", ""mango""]","def join_list_items(my_list, delimiter):
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango",Data Type,6732,"def join_list_items(my_list, delimiter):
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango","    ___
    joined_list = delimiter.join(my_list)
    return joined_list

list_string = join_list_items([""apple"", ""orange"", ""mango""], "", "")
print(list_string)
# Output: apple, orange, mango"
"Develop a Python script that prints the unique words in a string, along with their respective counts.","""The quick brown fox jumped over the lazy dog.""","from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:15} {word_counts[word]:3}"")",Data Type,6734,"from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

for word in unique_words:
    print(f""{word:15} {word_counts[word]:3}"")","from collections import Counter

string = ""The quick brown fox jumped over the lazy dog.""
words = string.split()
word_counts = Counter(words)

unique_words = set(words)

    ___
    print(f""{word:15} {word_counts[word]:3}"")"
Create a python program that modifies a given string to remove all spaces.,"my_string = ""This is a string with spaces""","def remove_spaces(my_string):
    return my_string.replace(' ', '')

#test
my_string = ""This is a string with spaces""
no_spaces_string = remove_spaces(my_string)
print(no_spaces_string) # Output: Thisisastringwithspaces",Data Type,6739,"def remove_spaces(my_string):
    return my_string.replace(' ', '')

#test
my_string = ""This is a string with spaces""
no_spaces_string = remove_spaces(my_string)
print(no_spaces_string) # Output: Thisisastringwithspaces","    ___
    return my_string.replace(' ', '')

#test
my_string = ""This is a string with spaces""
no_spaces_string = remove_spaces(my_string)
print(no_spaces_string) # Output: Thisisastringwithspaces"
Construct a Python program that takes a string as input and creates a new string with the first character of each word in the given string,"""This is a sample string""","def first_letter_string(input_str):
    output_str = """"

    for w in input_str.split():
        output_str += w[0]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))",Data Type,6741,"def first_letter_string(input_str):
    output_str = """"

    for w in input_str.split():
        output_str += w[0]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))","    ___
    output_str = """"

    ___
        output_str += w[0]

    return output_str

input_str = ""This is a sample string""
print(first_letter_string(input_str))"
Write a Python program to generate a list containing all permutations of the characters of a given string.,string = 'ABC',"from itertools import permutations

def generate_permutations(string):
    return list(permutations(string))

string = 'ABC'
print(generate_permutations(string))
# Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]",Data Type,6754,"from itertools import permutations

def generate_permutations(string):
    return list(permutations(string))

string = 'ABC'
print(generate_permutations(string))
# Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]","from itertools import permutations

    ___
    return list(permutations(string))

string = 'ABC'
print(generate_permutations(string))
# Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]"
Write a Python script for splitting a given string into a list of words.,"my_sentence = ""This is my sentence""","sentence_words = my_sentence.split("" "")
print(sentence_words)",Data Type,6766,"sentence_words = my_sentence.split("" "")
print(sentence_words)","sentence_words = my_sentence.split("" "")
print(sentence_words)"
Construct a Python script to search a text for a given string and returns the number of iterations found.,"string= ""Hello World!"", search=""l""","def search_string(string, search):
    count = 0 
    for i in range(len(string)):
        if string[i] == search:
            count += 1
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)",Data Type,6769,"def search_string(string, search):
    count = 0 
    for i in range(len(string)):
        if string[i] == search:
            count += 1
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)","    ___
    count = 0 
    ___
    ___
            count += 1
    return count

searched_string = search_string(""Hello World!"", ""l"") 
print(searched_string)"
You need to write a program in Python that takes a string and replaces all the vowels in it with underscores.,"""Hello World""","def replace_vowels(str):
    result = """"
    for c in str:
        if c.lower() in ['a', 'e', 'i', 'o', 'u']:
            result += '_'
        else:
            result += c
    return result

result = replace_vowels(""Hello World"")
print(result)",Data Type,6772,"def replace_vowels(str):
    result = """"
    for c in str:
        if c.lower() in ['a', 'e', 'i', 'o', 'u']:
            result += '_'
        else:
            result += c
    return result

result = replace_vowels(""Hello World"")
print(result)","    ___
    result = """"
    ___
    ___
            result += '_'
        else:
            result += c
    return result

result = replace_vowels(""Hello World"")
print(result)"
Generate a python function that takes in a string and replaces certain characters,"Input string: ""hello world""
Characters to replace: ""l""
Replacement character: ""a""","def replaceChar(s, charToReplace, replacementChar): 
    newStr = """"
    for char in s:
        if char == charToReplace:
            newStr += replacementChar
        else: 
            newStr += char
    return newStr

print(replaceChar(""hello world"", ""l"", ""a"")) # Output: ""heaaao worad""",Data Type,6774,"def replaceChar(s, charToReplace, replacementChar): 
    newStr = """"
    for char in s:
        if char == charToReplace:
            newStr += replacementChar
        else: 
            newStr += char
    return newStr

print(replaceChar(""hello world"", ""l"", ""a"")) # Output: ""heaaao worad""","    ___
    newStr = """"
    ___
    ___
            newStr += replacementChar
        else: 
            newStr += char
    return newStr

print(replaceChar(""hello world"", ""l"", ""a"")) # Output: ""heaaao worad"""
Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string.,"str = ""Hello World!""
index = [0, 5, 9]","def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)",Data Type,6788,"def remove_chars_at_indices(str, indices):
    new_str = """"
    for i in range(len(str)):
        if i not in indices:
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)","    ___
    new_str = """"
    ___
    ___
            new_str += str[i]
    return new_str

str = ""Hello World!""
index = [0, 5, 9]
result = remove_chars_at_indices(str, index)
print(result)"
Create a Python function that takes two strings and checks if the second string is a substring of the first.,"string1 = ""Hello world!""
string2 = ""world""","def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)",Data Type,6789,"def check_substring(string1, string2):
    if string2 in string1:
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)","    ___
    ___
        return True
    else:
        return False

# example
result = check_substring(""Hello world!"", ""world"")
print(result)"
Generate a Python program that uses a recursive function to reverse a given string combining with loops and conditionals.,thequickbrownfox,"def reverseString(s): 
    if len(s) == 0: 
        return s 
    else: 
        return reverseString(s[1:]) + s[0] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))",Data Type,6792,"def reverseString(s): 
    if len(s) == 0: 
        return s 
    else: 
        return reverseString(s[1:]) + s[0] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))","    ___
    ___
        return s 
    else: 
        return reverseString(s[1:]) + s[0] 
  
# Driver code 
s = ""thequickbrownfox""
  
print (""The original string  is : "",end="""") 
print (s) 
  
print (""The reversed string(using recursion) is : "",end="""") 
print (reverseString(s))"
Create an algorithm in Python 3 to identify the characters in a given string.,"""Abe erotically jitters""","def identify_characters(s): 
    characters = []
        
    for char in s:
        if char not in characters:
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']",Data Type,6794,"def identify_characters(s): 
    characters = []
        
    for char in s:
        if char not in characters:
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']","    ___
    characters = []
        
    ___
    ___
            characters.append(char)
        
    return characters
 
print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']"
"Write a Python script that takes a list of strings as an input and creates a dictionary containing the unique letters in each string, and their respective counts.","string_list = [""apple"",""banana"",""carrot""]","char_dict = {}

for string in string_list:
 for char in string:
 if char in char_dict:
 char_dict[char] += 1
 else:
 char_dict[char] = 1

print(char_dict)

# Output:
# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}",Data Type,6795,"char_dict = {}

for string in string_list:
 for char in string:
 if char in char_dict:
 char_dict[char] += 1
 else:
 char_dict[char] = 1

print(char_dict)

# Output:
# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}","char_dict = {}

    ___
    ___
    ___
 char_dict[char] += 1
 else:
 char_dict[char] = 1

print(char_dict)

# Output:
# {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}"
How would you check if a string ends with a given substring in Python?,"Input String = ""Test string""
Substring = ""string""","if InputString.endswith(Substring):
    print('The input string ends with the given substring.')
else:
    print('The input string does not end with the given substring.')",Data Type,6797,"if InputString.endswith(Substring):
    print('The input string ends with the given substring.')
else:
    print('The input string does not end with the given substring.')","    ___
    print('The input string ends with the given substring.')
else:
    print('The input string does not end with the given substring.')"
Optimize an existing Python program for computing the reverse of a string.,"def reverse_string(string):
  return string[::-1]","def reverse_string(string):
  return """".join(reversed(string))",Data Type,6826,"def reverse_string(string):
  return """".join(reversed(string))","    ___
  return """".join(reversed(string))"
Write a function in Python to return the top 3 most frequent words in a given string.,This is a sample string,"from collections import Counter

def top_3_words(str):
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)
  top_3 = sorted_words[:3]
  return [word for word, count in top_3]

top_3_words('This is a sample string')",Data Type,6828,"from collections import Counter

def top_3_words(str):
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)
  top_3 = sorted_words[:3]
  return [word for word, count in top_3]

top_3_words('This is a sample string')","from collections import Counter

    ___
  word_list = list(str.split())
  word_dict = Counter(word_list)
  sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True)
  top_3 = sorted_words[:3]
  return [word for word, count in top_3]

top_3_words('This is a sample string')"
Can you write a Python script to search an input string for a specific character and return its position in the string?,"string = ""Python""
search_char = 'y'",pos = string.find(search_char) # 2,Data Type,6837,pos = string.find(search_char) # 2,pos = string.find(search_char) # 2
Write a function in Python that takes a list of strings and returns a dictionary of counts for each string.,"list_of_strings = [""apple"", ""banana"", ""apple"", ""orange"", ""kiwi""]","def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}",Data Type,6868,"def count_list_items(list_of_strings):
 counts = {}
 
 for item in list_of_strings:
 if item not in counts:
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}","    ___
 counts = {}
 
    ___
    ___
 counts[item] = 1
 else:
 counts[item] += 1
 
 return counts
 
print(count_list_items(list_of_strings))
# Output: {""apple"": 2, ""banana"": 1, ""orange"": 1, ""kiwi"": 1}"
Generate a Python program to process an array of strings and count the number of times each string is repeated in the array.,"const inputArray = [""a"", ""b"", ""a"", ""a"", ""b"", ""c"", ""a"", ""d""]","occurence_map = {}

for item in inputArray:
 if item not in occurence_map:
  occurence_map[item] = 1
 else:
  occurence_map[item] += 1

print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}",Data Type,6877,"occurence_map = {}

for item in inputArray:
 if item not in occurence_map:
  occurence_map[item] = 1
 else:
  occurence_map[item] += 1

print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}","occurence_map = {}

    ___
    ___
  occurence_map[item] = 1
 else:
  occurence_map[item] += 1

print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}"
"Given a list of strings, write a Python program to calculate the maximum length of a string.","list_of_strings = [""dog"", ""cat"", ""elephant"", ""bird""]","max_length = 0

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)",Data Type,6893,"max_length = 0

for string in list_of_strings:
    max_length = max(max_length, len(string))

print(max_length)","max_length = 0

    ___
    max_length = max(max_length, len(string))

print(max_length)"
What function will you use to count the number of words in a string?,"'Hello world, this is a sentence.'","There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```",Data Type,6895,"There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```","There are 5 words in the given string. 

To count the number of words in a string, you can use the `len()` or `count()` functions in Python. 

For example: 
```
num_words = len(string.split())
```
or 
```
num_words = string.count("" "") + 1
```"
Generate a function in Python to edit a given string and capitalize a given character at a specific position.,"""Hello World!"" and 5","def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result",Data Type,6897,"def capitalizeCharacter(s, pos): 
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result","    ___
    # Grab single characters from the string  
    # starting from the given index 
    result = s[:pos] + s[pos].upper() + s[pos + 1:] 
    return result"
"In Python, write a program to find and count the occurrences of all alphabets in the given string.","String: ""The Quick Brown Fox Jumps Over the Lazy Dog""","from collections import Counter

def count_alphabets(str):
    return Counter(str.lower())

my_str = ""The Quick Brown Fox Jumps Over the Lazy Dog""
alphabet_count = count_alphabets(my_str)

print(alphabet_count)",Data Type,6904,"from collections import Counter

def count_alphabets(str):
    return Counter(str.lower())

my_str = ""The Quick Brown Fox Jumps Over the Lazy Dog""
alphabet_count = count_alphabets(my_str)

print(alphabet_count)","from collections import Counter

    ___
    return Counter(str.lower())

my_str = ""The Quick Brown Fox Jumps Over the Lazy Dog""
alphabet_count = count_alphabets(my_str)

print(alphabet_count)"
Generate a code snippet to find the duplicate words in a string.,"""Python is a programming language programming used widely""","s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

for i in range(len(words)):
    for j in range(i + 1, len(words)):
        if words[i] == words[j]:
            duplicate_words.append(words[i])
            
print(duplicate_words)",Data Type,6905,"s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

for i in range(len(words)):
    for j in range(i + 1, len(words)):
        if words[i] == words[j]:
            duplicate_words.append(words[i])
            
print(duplicate_words)","s = ""Python is a programming language programming used widely""
words = s.split(' ')

duplicate_words = []

    ___
    ___
    ___
            duplicate_words.append(words[i])
            
print(duplicate_words)"
Create a function in Python to replace all spaces in a given string with an underscore.,The quick brown fox,"def replace_space(string):
    return string.replace("" "", ""_"")

replace_space(""The quick brown fox"") # Outputs: The_quick_brown_fox",Data Type,6921,"def replace_space(string):
    return string.replace("" "", ""_"")

replace_space(""The quick brown fox"") # Outputs: The_quick_brown_fox","    ___
    return string.replace("" "", ""_"")

replace_space(""The quick brown fox"") # Outputs: The_quick_brown_fox"
"Write a Python program to edit a given string to replace each vowel with its following character as defined below.
Vowel-> next character
a->e
e->i
i->o
o->u
u->a","string=""geeks""","def edit_vowels(string): 
    vowels = 'aeiou'
    next_chars = 'eioua'
    result_string = ''
    for char in string:
        if char in vowels:
            result_string += next_chars[vowels.index(char)]
        else:
            result_string += char
    return result_string",Data Type,6936,"def edit_vowels(string): 
    vowels = 'aeiou'
    next_chars = 'eioua'
    result_string = ''
    for char in string:
        if char in vowels:
            result_string += next_chars[vowels.index(char)]
        else:
            result_string += char
    return result_string","    ___
    vowels = 'aeiou'
    next_chars = 'eioua'
    result_string = ''
    ___
    ___
            result_string += next_chars[vowels.index(char)]
        else:
            result_string += char
    return result_string"
Design a Python code to extract the characters from from a given string in reverse order.,"string = ""hello""","def reverseCharacters (string):
    reverseStr = """"
    for i in range(len(string)-1, -1, -1):
        reverseStr += string[i]
    return reverseStr",Data Type,6945,"def reverseCharacters (string):
    reverseStr = """"
    for i in range(len(string)-1, -1, -1):
        reverseStr += string[i]
    return reverseStr","def reverseCharacters (string):
    reverseStr = """"
    ___
        reverseStr += string[i]
    return reverseStr"
Write a function in Python to count the occurrences of a given character in a string.,"string: ""hello world"", character: 'l'","def count_char(s, c):
    count = 0
    for ch in s:
        if ch == c:
            count += 1
    return count

print(count_char('hello world', 'l'))",Data Type,6948,"def count_char(s, c):
    count = 0
    for ch in s:
        if ch == c:
            count += 1
    return count

print(count_char('hello world', 'l'))","    ___
    count = 0
    ___
    ___
            count += 1
    return count

print(count_char('hello world', 'l'))"
Turn the given input string into a valid Python statement.,"Input string:
""Function to print hello world.""","def printHelloWorld():
    print(""Hello world"")",Data Type,6954,"def printHelloWorld():
    print(""Hello world"")","    ___
    print(""Hello world"")"
Create a Python script to remove certain characters given in a set from a string.,"ABCDEFGHIJKLMNOPQRSTUVWXYZ
set = {'A', 'C', 'D', 'E'}","string = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
remove_chars = set(['A', 'C', 'D', 'E'])
 
result = """".join(char for char in string if char not in remove_chars)

print(result)",Data Type,6963,"string = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
remove_chars = set(['A', 'C', 'D', 'E'])
 
result = """".join(char for char in string if char not in remove_chars)

print(result)","string = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
remove_chars = set(['A', 'C', 'D', 'E'])
 
result = """".join(char for char in string if char not in remove_chars)

print(result)"
Can you provide a script to remove any dot (.) in an URL string?,"URL String: ""https://www.google.com/example/?q=python.""","url_string = ""https://www.google.com/example/?q=python.""

def remove_dot(url_string):
    url_string = url_string.replace('.', '')
    
    return url_string

modified_url_string = remove_dot(url_string)
print(modified_url_string)
# https://wwwgooglecom/example/?q=python",Data Type,6977,"url_string = ""https://www.google.com/example/?q=python.""

def remove_dot(url_string):
    url_string = url_string.replace('.', '')
    
    return url_string

modified_url_string = remove_dot(url_string)
print(modified_url_string)
# https://wwwgooglecom/example/?q=python","url_string = ""https://www.google.com/example/?q=python.""

    ___
    url_string = url_string.replace('.', '')
    
    return url_string

modified_url_string = remove_dot(url_string)
print(modified_url_string)
# https://wwwgooglecom/example/?q=python"
Create a program to detect a palindrome string in Python.,"original_string = ""radar""","# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))",Data Type,6986,"# Function to check if a string is a palindrome
def is_palindrome(original_string):  
    reversed_string = original_string[::-1]  
    if original_string == reversed_string:
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))","# Function to check if a string is a palindrome
    ___
    reversed_string = original_string[::-1]  
    ___
        return True 
    else:
        return False  
  
# Print result
print(is_palindrome(original_string))"
Develop a function in Python that takes in a string of sentences and removes all the punctuations.,"""This is a sample string!""","import string

def remove_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

if __name__ == '__main__':
    sentence = ""This is a sample string!""
    print(remove_punctuations(sentence))",Data Type,7001,"import string

def remove_punctuations(s):
    return s.translate(str.maketrans('', '', string.punctuation))

if __name__ == '__main__':
    sentence = ""This is a sample string!""
    print(remove_punctuations(sentence))","import string

    ___
    return s.translate(str.maketrans('', '', string.punctuation))

    ___
    sentence = ""This is a sample string!""
    print(remove_punctuations(sentence))"
Write a code to find the number of distinct words in a string.,"""I love to code in Python""","def count_distinct_words(string):
    words = string.split()  
    distinct_words = set(words)  
    return len(distinct_words)

if __name__ == '__main__':
    string = ""I love to code in Python""
    print(""Number of distinct words:"", count_distinct_words(string))",Data Type,7012,"def count_distinct_words(string):
    words = string.split()  
    distinct_words = set(words)  
    return len(distinct_words)

if __name__ == '__main__':
    string = ""I love to code in Python""
    print(""Number of distinct words:"", count_distinct_words(string))","    ___
    words = string.split()  
    distinct_words = set(words)  
    return len(distinct_words)

    ___
    string = ""I love to code in Python""
    print(""Number of distinct words:"", count_distinct_words(string))"
Make a Python program that takes a list of strings as input and returns a dictionary whose keys are the strings and values are the length of the string.,"['help', 'me', 'please']","def get_string_lengths(list_strings):
    res = {}
    for string in list_strings:
        res[string] = len(string)
    return res

test_strings = ['help', 'me', 'please']
result = get_string_lengths(test_strings)
print(result)",Data Type,7022,"def get_string_lengths(list_strings):
    res = {}
    for string in list_strings:
        res[string] = len(string)
    return res

test_strings = ['help', 'me', 'please']
result = get_string_lengths(test_strings)
print(result)","    ___
    res = {}
    ___
        res[string] = len(string)
    return res

test_strings = ['help', 'me', 'please']
result = get_string_lengths(test_strings)
print(result)"
Write a code in Python to find out how long a given string is.,"""Hello""","def get_length(string):
    return len(string)

length = get_length(""Hello"")
print(length)",Data Type,7031,"def get_length(string):
    return len(string)

length = get_length(""Hello"")
print(length)","    ___
    return len(string)

length = get_length(""Hello"")
print(length)"
Find a way to split the string below into an array of length 3.,"string = ""Python is a great language""","string = ""Python is a great language""
arr = string.split(' ', 3) 
print(arr)",Data Type,7039,"string = ""Python is a great language""
arr = string.split(' ', 3) 
print(arr)","string = ""Python is a great language""
arr = string.split(' ', 3) 
print(arr)"
Write a Python program to divide a given string into pairs such that each pairs has 2 characters.,"""abcd""","def split_into_pairs(inputString):
    resultList = []
    counter = 0
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)",Data Type,7045,"def split_into_pairs(inputString):
    resultList = []
    counter = 0
    
    while counter < len(inputString):
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)","    ___
    resultList = []
    counter = 0
    
    ___
        resultList.append(inputString[counter:counter + 2])
        counter += 2
    
    return resultList

pairs = split_into_pairs(""abcd"")

print(pairs)"
"Please generate a Python function that takes a string as input and prints every character in the string contained between ""a"" and ""e"" in a newline.","""Airport""","def extract_abce(string):
  output = """"
  for char in string:
                    if ord(char) >= 97 and ord(char) <= 101:
                                    output += char + ""\n""
  print(output)",Data Type,7046,"def extract_abce(string):
  output = """"
  for char in string:
                    if ord(char) >= 97 and ord(char) <= 101:
                                    output += char + ""\n""
  print(output)","    ___
  output = """"
    ___
    ___
                                    output += char + ""\n""
  print(output)"
Write a Python script to remove all repeated characters from a string.,"string = ""aaabbccddeeff""","def removeRepeatedChars(str):
    result = """"
    for c in str:
        if c not in result:
            result += c
    return result

print(removeRepeatedChars(""aaabbccddeeff""))",Data Type,7049,"def removeRepeatedChars(str):
    result = """"
    for c in str:
        if c not in result:
            result += c
    return result

print(removeRepeatedChars(""aaabbccddeeff""))","    ___
    result = """"
    ___
    ___
            result += c
    return result

print(removeRepeatedChars(""aaabbccddeeff""))"
Generate a function in Python that takes an integer value from a dictionary and returns its value as a string.,"{""number1"": 8, ""number2"": 16, ""number3"": 20}","def get_string_value(input_dict):
  """"""Return string value in the input dictionary""""""
  output_value = """"
  for key, value in input_dict.items():
      output_value = str(value)
  return output_value",Data Type,7051,"def get_string_value(input_dict):
  """"""Return string value in the input dictionary""""""
  output_value = """"
  for key, value in input_dict.items():
      output_value = str(value)
  return output_value","    ___
  """"""Return string value in the input dictionary""""""
  output_value = """"
    ___
      output_value = str(value)
  return output_value"
Generate a Python program to convert a given binary string into its equivalent decimal number.,"Binary String: ""1101""","# Convert the given binary string to an integer number
binary_string = ""1101""
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13",Data Type,7054,"# Convert the given binary string to an integer number
binary_string = ""1101""
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13","# Convert the given binary string to an integer number
binary_string = ""1101""
decimal_number = int(binary_string, 2)

# Print the result
print(decimal_number) # 13"
Write a code snippet to convert a Python object to a JSON string.,"obj = {
  ""name"": ""John"",
  ""age"": 42
}","import json

obj = {
  ""name"": ""John"",
  ""age"": 42
}

json_string = json.dumps(obj)",Data Type,7055,"import json

obj = {
  ""name"": ""John"",
  ""age"": 42
}

json_string = json.dumps(obj)","import json

obj = {
  ""name"": ""John"",
  ""age"": 42
}

json_string = json.dumps(obj)"
Create a Python function that returns the longest string in a list of strings.,"list_strings = [""abc"", ""def"", ""ghij""]","def get_longest_string(list_strings):
 longest_string = list_strings[0]
 for item in list_strings:
 if len(item) > len(longest_string):
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij""",Data Type,7057,"def get_longest_string(list_strings):
 longest_string = list_strings[0]
 for item in list_strings:
 if len(item) > len(longest_string):
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij""","    ___
 longest_string = list_strings[0]
    ___
    ___
 longest_string = item
 return longest_string

list_strings = [""abc"", ""def"", ""ghij""]
print(get_longest_string(list_strings)) # prints ""ghij"""
Develop a Python program that tells how many characters are there in a given string.,My name is John,"# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = 0
for char in string:
    count += 1

print(f'The string contains {count} characters.')",Data Type,7061,"# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = 0
for char in string:
    count += 1

print(f'The string contains {count} characters.')","# Python program to count the number of characters in a string

string = input('Enter a string: ')

count = 0
    ___
    count += 1

print(f'The string contains {count} characters.')"
Write a code snippet in Python to split a string by its whitespaces.,"string = ""This is a sample string""","string = ""This is a sample string""
str_list = string.split()
print(str_list)",Data Type,7095,"string = ""This is a sample string""
str_list = string.split()
print(str_list)","string = ""This is a sample string""
str_list = string.split()
print(str_list)"
Create a python program to concatenate n strings and return the concatenated string,"input_strings = [""Hello"", ""World"", ""!""]","def concatenate_strings(input_strings):
    output_string = """"
    for string in input_strings:
        output_string += string
    return output_string",Data Type,7097,"def concatenate_strings(input_strings):
    output_string = """"
    for string in input_strings:
        output_string += string
    return output_string","    ___
    output_string = """"
    ___
        output_string += string
    return output_string"
Create a Python program to encrypt a given string using ROT13 string encoding.,"str = ""Hello World!""","import string
 
def rot13(str):
  rot13 = str.maketrans(
    ""ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"", 
    ""NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"")
  return str.translate(rot13)

print(rot13(str))",Data Type,7112,"import string
 
def rot13(str):
  rot13 = str.maketrans(
    ""ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"", 
    ""NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"")
  return str.translate(rot13)

print(rot13(str))","import string
 
    ___
  rot13 = str.maketrans(
    ""ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz"", 
    ""NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm"")
  return str.translate(rot13)

print(rot13(str))"
Generate a code snippet to convert a string to an integer in Python.,"str = ""145""","num = int(str)
print(num) # Prints 145",Data Type,7117,"num = int(str)
print(num) # Prints 145","num = int(str)
print(num) # Prints 145"
Write a Python script to check how many words with length 5 are in the given string,The quick brown fox jumped over the lazy dog.,"def count_words_length(string):
    count = 0
    words = string.split("" "")
    for word in words:
        if len(word) == 5:
            count += 1
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))",Data Type,7120,"def count_words_length(string):
    count = 0
    words = string.split("" "")
    for word in words:
        if len(word) == 5:
            count += 1
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))","    ___
    count = 0
    words = string.split("" "")
    ___
    ___
            count += 1
    return count

string = ""The quick brown fox jumped over the lazy dog.""
print(count_words_length(string))"
Convert the following JSON string to a valid Python dictionary.,"'{""name"": ""John"", ""age"": 32, ""city"": ""New York""}'","data = json.loads('{""name"": ""John"", ""age"": 32, ""city"": ""New York""}')",Data Type,7129,"data = json.loads('{""name"": ""John"", ""age"": 32, ""city"": ""New York""}')","data = json.loads('{""name"": ""John"", ""age"": 32, ""city"": ""New York""}')"
Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?,"“Python”, “Programming”","def new_string(s1, s2):
    new_str = """"
    for char in s2:
        if char not in s1:
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig""",Data Type,7131,"def new_string(s1, s2):
    new_str = """"
    for char in s2:
        if char not in s1:
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig""","    ___
    new_str = """"
    ___
    ___
            new_str += char

    return new_str

print(new_string(""Python"", ""Programming"")) # Output: ""roammig"""
Create a python program to extract the name and phone number from a given string.,John Doe: (+1) 555-665-8877,"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)",Data Type,7135,"# Extract the name and phone number from a given string
def extract_name_phone(input_string):
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)","# Extract the name and phone number from a given string
    ___
    name_phone_dict = {}
    data = input_string.split(': ')
    
    name_phone_dict['name'] = data[0]
    name_phone_dict['phone'] = data[1]
    
    return name_phone_dict

result = extract_name_phone(""John Doe: (+1) 555-665-8877"")
print(result)"
Generate a function in Python that takes a string and counts the number of capitalized letters.,"""ViVaViVaViVa""","def countCapitalized(str): 
    count = 0
    for i in range(len(str)): 
        if str[i].isupper():
            count += 1
    return count

print(countCapitalized(""ViVaViVaViVa""))",Data Type,7136,"def countCapitalized(str): 
    count = 0
    for i in range(len(str)): 
        if str[i].isupper():
            count += 1
    return count

print(countCapitalized(""ViVaViVaViVa""))","    ___
    count = 0
    ___
    ___
            count += 1
    return count

print(countCapitalized(""ViVaViVaViVa""))"
Generate a python program that takes a string and an integer as input and outputs a string repeated the given integer number of times.,"(""GPT Model"", 3)","def repeat(string, n):
    return string * n",Data Type,7150,"def repeat(string, n):
    return string * n","    ___
    return string * n"
"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward).","""radar""","input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True",Data Type,7154,"input_word = input(""Enter a word: "")

def is_palindrome(word):
 word = word.lower()
 reversed_word = word[::-1]

 if reversed_word == word:
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True","input_word = input(""Enter a word: "")

    ___
 word = word.lower()
 reversed_word = word[::-1]

    ___
 return True
 else:
 return False

print(is_palindrome(input_word))
# Output: True"
Build a Python program to edit a string,"Replace all spaces in the string ""Hello World"" with undescores.","def replace_spaces_with_underscore(string):
    return string.replace("" "", ""_"")",Data Type,7160,"def replace_spaces_with_underscore(string):
    return string.replace("" "", ""_"")","    ___
    return string.replace("" "", ""_"")"
Create a Python program that takes a string and replaces all spaces with underscores.,Hello World,"def replace_spaces(string):
    return string.replace(' ', '_')

string = 'Hello World'

print(replace_spaces(string))",Data Type,7170,"def replace_spaces(string):
    return string.replace(' ', '_')

string = 'Hello World'

print(replace_spaces(string))","    ___
    return string.replace(' ', '_')

string = 'Hello World'

print(replace_spaces(string))"
Create a function in Python that takes a string as an argument and capitalizes the first letter of each word.,"String s = ""hello world""","def capitalize(s):
  return ' '.join(w.capitalize() for w in s.split())",Data Type,7172,"def capitalize(s):
  return ' '.join(w.capitalize() for w in s.split())","    ___
  return ' '.join(w.capitalize() for w in s.split())"
Design a function in Python that takes two strings as parameters and combines them into a new string.,"String1: ""Hello""
String2: ""World""","def combine_strings(string1, string2):
    return string1 + "" "" + string2

combined_string = combine_strings(""Hello"", ""World"")
print(combined_string)",Data Type,7181,"def combine_strings(string1, string2):
    return string1 + "" "" + string2

combined_string = combine_strings(""Hello"", ""World"")
print(combined_string)","    ___
    return string1 + "" "" + string2

combined_string = combine_strings(""Hello"", ""World"")
print(combined_string)"
Write a function in Python that takes in a string and returns a list containing its individual words.,"""This is a test""","def string_to_list(s):
    return s.split(' ')",Data Type,7212,"def string_to_list(s):
    return s.split(' ')","    ___
    return s.split(' ')"
Create a Python function takes a string and an integer and returns the reversed string with the first letter of each word capitalized,"String: the quick brown fox
Integer: 3","def reverse_capitalize(string, n):
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = 3

print(reverse_capitalize(string, n))",Data Type,7213,"def reverse_capitalize(string, n):
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = 3

print(reverse_capitalize(string, n))","    ___
    string_list = string.split() 
    reverse_list = string_list[-n:] + string_list[:-n] 
    new_string = "" "".join(reverse_list) 
    return new_string.title()

string = ""the quick brown fox""
n = 3

print(reverse_capitalize(string, n))"
"Design an algorithm in Python that takes in a string and searches for a given pattern, returning it or -1 if not found.","String = ""aaaaabbbbbbcccccc""
Pattern = ""bbb""","def pattern_search(string, pattern):
    i = 0
    while i < len(string):
        j = 0
        while j < len(pattern):
            if string[i+j] != pattern[j]:
                break
            j += 1
        if j == len(pattern):
            return i
        i += 1
    return -1",Data Type,7218,"def pattern_search(string, pattern):
    i = 0
    while i < len(string):
        j = 0
        while j < len(pattern):
            if string[i+j] != pattern[j]:
                break
            j += 1
        if j == len(pattern):
            return i
        i += 1
    return -1","    ___
    i = 0
    ___
        j = 0
    ___
    ___
                break
            j += 1
    ___
            return i
        i += 1
    return -1"
Generate a Python program to edit a given string such that it reverses the words in the string.,string = 'This is a string',"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string",Data Type,7221,"def reverse_words(string):
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string","    ___
    words = string.split(' ')
    reversed_words = words[::-1]
    reversed_string = ' '.join(reversed_words)
    return reversed_string"
Write a Python program to format a specified string to limit the number of characters to 6.,"string = ""abcdefghijklmnopqrstuvwxyz""","def limit_string(string):
    """"""Format the specified string to limit the number of characters to 6.""""""
    return string[:6]",Data Type,7226,"def limit_string(string):
    """"""Format the specified string to limit the number of characters to 6.""""""
    return string[:6]","    ___
    """"""Format the specified string to limit the number of characters to 6.""""""
    return string[:6]"
"Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list.","['1', '2', '3', 'four', '5']","def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)",Data Type,7229,"def convert_to_ints(lst):
    result = []
    for i in lst:
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)","    ___
    result = []
    ___
        try:
            result.append(int(i))
        except:
            pass
    
    return result

result = convert_to_ints(['1', '2', '3', 'four', '5'])
print(result)"
Write an optimized Python code snippet to reverse the words in a given string.,"""Hello, World!""","def reverse_words(string):
    words = string.split("" "")
    words.reverse()
    output_string = "" "".join(words)
    return output_string

print(reverse_words(""Hello, World!"")) # Output: ""World! Hello,""",Data Type,7244,"def reverse_words(string):
    words = string.split("" "")
    words.reverse()
    output_string = "" "".join(words)
    return output_string

print(reverse_words(""Hello, World!"")) # Output: ""World! Hello,""","    ___
    words = string.split("" "")
    words.reverse()
    output_string = "" "".join(words)
    return output_string

print(reverse_words(""Hello, World!"")) # Output: ""World! Hello,"""
Create a function in Python to remove a specified element from a string of words.,"def remove_elem(string, elem):","def remove_elem(string, elem):
    """"""This function removes a specified element from the given string of words""""""
    return ' '.join([word for word in string.split() if word != elem])",Data Type,7255,"def remove_elem(string, elem):
    """"""This function removes a specified element from the given string of words""""""
    return ' '.join([word for word in string.split() if word != elem])","    ___
    """"""This function removes a specified element from the given string of words""""""
    return ' '.join([word for word in string.split() if word != elem])"
Create a Python program to extract the email and phone numbers within a given string.,"String:
'My email is hello@domain.com and my phone number is +123456789.'","import re

text = 'My email is hello@domain.com and my phone number is +123456789'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
phone = re.findall(""\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|
2[98654321]\d{9}|9[8543210]\d{8})\b"", text)

print(email)
print(phone)",Data Type,7271,"import re

text = 'My email is hello@domain.com and my phone number is +123456789'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
phone = re.findall(""\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|
2[98654321]\d{9}|9[8543210]\d{8})\b"", text)

print(email)
print(phone)","import re

text = 'My email is hello@domain.com and my phone number is +123456789'

email = re.findall(""[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+"", text)
phone = re.findall(""\+(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|
2[98654321]\d{9}|9[8543210]\d{8})\b"", text)

print(email)
print(phone)"
Write a Python function that normalizes a given string. The function should remove all the special characters from the string and convert it to all lowercase.,"""Hello,! W0rld.""","def normalize_string(text):
	text = text.lower()
	text = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')
	return text",Data Type,7281,"def normalize_string(text):
	text = text.lower()
	text = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')
	return text","    ___
	text = text.lower()
	text = ''.join(ch for ch in text if ch.isalnum() or ch == ' ')
	return text"
Create a python program to convert a string containing comma seperated values into a list of integers.,"""12,34,55,67""","def str_to_list(input_str):
    result = [int(i) for i in input_str.split("","")]
    return result

str = ""12,34,55,67""
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]",Data Type,7283,"def str_to_list(input_str):
    result = [int(i) for i in input_str.split("","")]
    return result

str = ""12,34,55,67""
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]","    ___
    result = [int(i) for i in input_str.split("","")]
    return result

str = ""12,34,55,67""
int_list = str_to_list(str)
print(int_list) # Output: [12, 34, 55, 67]"
Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not.,This is a test,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))",Data Type,7285,"def check_vowels(string):
    vowels = ['a','e','i','o','u']
    for vowel in vowels:
        if vowel not in string:
            return False
    return True

print(check_vowels('This is a test'))","    ___
    vowels = ['a','e','i','o','u']
    ___
    ___
            return False
    return True

print(check_vowels('This is a test'))"
Create a Python program that takes a string of words and returns the reverse order of words.,"""Hello World""","def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)",Data Type,7300,"def reverse_words(words):
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)","    ___
    words_list = words.split(' ')
    reversed_list = words_list[::-1] 
    reversed_words = ' '.join(reversed_list) 
    return reversed_words

input_string = 'Hello World' 
result = reverse_words(input_string) 
  
print(result)"
Reverse a given string using python.,Hello World,"def reverse_string(my_str): 
  rev_str = """" 
  
  for i in my_str: 
    rev_str = i + rev_str
  
  return rev_str

my_str = 'Hello World'

reverse_string(my_str)",Data Type,7302,"def reverse_string(my_str): 
  rev_str = """" 
  
  for i in my_str: 
    rev_str = i + rev_str
  
  return rev_str

my_str = 'Hello World'

reverse_string(my_str)","    ___
  rev_str = """" 
  
    ___
    rev_str = i + rev_str
  
  return rev_str

my_str = 'Hello World'

reverse_string(my_str)"
Generate a Python program that takes in a string of text and returns the count of each unique word in the string,This is a sample string,"def count_words(string):
 word_counts = {} 
 words = string.split()
 
 for word in words:
 if word in word_counts:
 word_counts[word] += 1 
 else:
 word_counts[word] = 1
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}",Data Type,7306,"def count_words(string):
 word_counts = {} 
 words = string.split()
 
 for word in words:
 if word in word_counts:
 word_counts[word] += 1 
 else:
 word_counts[word] = 1
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}","    ___
 word_counts = {} 
 words = string.split()
 
    ___
    ___
 word_counts[word] += 1 
 else:
 word_counts[word] = 1
 
 return word_counts

print(count_words(""This is a sample string"")) 
# Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}"
Create a Python program to replace all the vowels in a string with a corresponding number.,"String: ""Hello World""","def replace_vowels(string):
    result = """"
    for char in string:
        if char in ""aeiouAEIOU"":
            result += str(ord(char))
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)",Data Type,7307,"def replace_vowels(string):
    result = """"
    for char in string:
        if char in ""aeiouAEIOU"":
            result += str(ord(char))
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)","    ___
    result = """"
    ___
    ___
            result += str(ord(char))
        else:
            result += char 
    return result

string = ""Hello World""
result = replace_vowels(string)
print(result)"
Create a program in Python to extract words of length 4 from a given string.,"s = ""extract four letter words"";","words = s.split()

four_letter_words = []
for word in words:
   if len(word) == 4:
      four_letter_words.append(word)
      
print(four_letter_words)",Data Type,7311,"words = s.split()

four_letter_words = []
for word in words:
   if len(word) == 4:
      four_letter_words.append(word)
      
print(four_letter_words)","words = s.split()

four_letter_words = []
    ___
    ___
      four_letter_words.append(word)
      
print(four_letter_words)"
Can you show how to perform regular expression matching in Python with a given string and pattern?,"String s = ""Hello World""
Pattern p = ""W.*d""","import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
if m is not None:
    print(""Match found!"")
    print(""Position: "" + str(m.start()) + "","" + str(m.end()))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")",Data Type,7313,"import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
if m is not None:
    print(""Match found!"")
    print(""Position: "" + str(m.start()) + "","" + str(m.end()))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")","import re

s = ""Hello World""
p = ""W.*d""

m = re.match(p, s)
    ___
    print(""Match found!"")
    print(""Position: "" + str(m.start()) + "","" + str(m.end()))
    print(""Matched string: "" + m.group())
else:
    print(""No match found!"")"
Identify the type of an expression in Python.,"x = ""Apple""",The expression x is of type string.,Data Type,7316,The expression x is of type string.,The expression x is of type string.
Generate a program in Python that accepts a string as input and removes all vowels from it.,"""Hello World""","def removeVowels(str):
    vowels = ('a', 'e', 'i', 'o', 'u') 
    res = """"
    for char in str:
        if char.lower() not in vowels:
            res += char
    return res

print(removeVowels(""Hello World""))",Data Type,7324,"def removeVowels(str):
    vowels = ('a', 'e', 'i', 'o', 'u') 
    res = """"
    for char in str:
        if char.lower() not in vowels:
            res += char
    return res

print(removeVowels(""Hello World""))","    ___
    vowels = ('a', 'e', 'i', 'o', 'u') 
    res = """"
    ___
    ___
            res += char
    return res

print(removeVowels(""Hello World""))"
"Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true).","""hello"", ""lohel""","def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True",Data Type,7360,"def is_rotation(str1, str2):
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True","    ___
    return len(str1) == len(str2) and str2 in str1 + str1

# testing
print(is_rotation('hello', 'lohel'))  # prints True"
Develop a Python function that sorts a given list of strings on the basis of the length of the string.,"['Coders', 'NS', 'Coding', 'Program']","def sort_list(lst):
    return sorted(lst, key = len)

lst = ['Coders', 'NS', 'Coding', 'Program']

result = sort_list(lst)

print(result)  # ['NS', 'Coding', 'Coders', 'Program']",Data Type,7376,"def sort_list(lst):
    return sorted(lst, key = len)

lst = ['Coders', 'NS', 'Coding', 'Program']

result = sort_list(lst)

print(result)  # ['NS', 'Coding', 'Coders', 'Program']","    ___
    return sorted(lst, key = len)

lst = ['Coders', 'NS', 'Coding', 'Program']

result = sort_list(lst)

print(result)  # ['NS', 'Coding', 'Coders', 'Program']"
Create an algorithm in Python that takes a string as input and returns a list of words from that string.,"""Hello World""","def string_to_words(s):
    return s.split(' ')

words = string_to_words('Hello World')
print(words)",Data Type,7381,"def string_to_words(s):
    return s.split(' ')

words = string_to_words('Hello World')
print(words)","    ___
    return s.split(' ')

words = string_to_words('Hello World')
print(words)"
Create a python program to classify if a given string contains any numbers.,"string = ""password123""","import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True",Data Type,7382,"import re

def contains_numbers(string):
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True","import re

    ___
    """"""Classify if a given string contains any numbers.""""""
    return bool(re.search(r'\d', string))

# Usage Example
string = ""password123""
contains_numbers = contains_numbers(string)
print(contains_numbers)  # True"
Create a string function in Python to convert all words in a string to uppercase.,"string = ""this is a sample string""","def to_upper(string):
 return string.upper()
 
print(to_upper(string))  # THIS IS A SAMPLE STRING",Data Type,7391,"def to_upper(string):
 return string.upper()
 
print(to_upper(string))  # THIS IS A SAMPLE STRING","    ___
 return string.upper()
 
print(to_upper(string))  # THIS IS A SAMPLE STRING"
Write a Python program to parse a JSON object from a given string.,"Input String: {""name"": ""John Doe"", ""age"": 28}","import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": 28}""

data = json.loads(givenString)

print(data)",Data Type,7397,"import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": 28}""

data = json.loads(givenString)

print(data)","import json

givenString = ""{\""name\"": \""John Doe\"", \""age\"": 28}""

data = json.loads(givenString)

print(data)"
How would you convert this comma separated string to a list in Python?,"Str= ""apple, banana, orange, grapes""","Str = ""apple, banana, orange, grapes""
my_list = Str.split("", "")

# Output
my_list = [""apple"",""banana"",""orange"",""grapes""]",Data Type,7403,"Str = ""apple, banana, orange, grapes""
my_list = Str.split("", "")

# Output
my_list = [""apple"",""banana"",""orange"",""grapes""]","Str = ""apple, banana, orange, grapes""
my_list = Str.split("", "")

# Output
my_list = [""apple"",""banana"",""orange"",""grapes""]"
Design an algorithm in Python for reversing a string.,"exampleString = ""Hello World""","def reverse_string(exampleString): 
    return exampleString[::-1] 

print(reverse_string(exampleString))",Data Type,7415,"def reverse_string(exampleString): 
    return exampleString[::-1] 

print(reverse_string(exampleString))","    ___
    return exampleString[::-1] 

print(reverse_string(exampleString))"
Develop a Python algorithm to validate a given palindrome string.,"""level""","def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")",Data Type,7432,"def isPalindrome(s):
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] != s[j]:
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
if isPalindrome(s):
    print(""Yes"")
else:
    print(""No"")","    ___
    i = 0
    j = len(s) - 1
    ___
    ___
            return False
        i += 1
        j -= 1
    return True
  
# Driver code 
s = ""level""
  
    ___
    print(""Yes"")
else:
    print(""No"")"
Write a Python program to edit a given string replacing every character after 2nd occurrence with '*'.,"string = ""Adam is my hero""","def edit_str(string):
 return string[:2] + '*' * (len(string)-2)",Data Type,7451,"def edit_str(string):
 return string[:2] + '*' * (len(string)-2)","    ___
 return string[:2] + '*' * (len(string)-2)"
Create a Python program that takes a string as input and outputs the string with all characters replaced with their corresponding ASCII values.,"""Python""","def ascii_repr_str(str):
    ans = ''
    for ch in str:
        ans += str(ord(ch))
    return ans

print(ascii_repr_str(""Python"")) # result: 080 121 116 104 111 110",Data Type,7466,"def ascii_repr_str(str):
    ans = ''
    for ch in str:
        ans += str(ord(ch))
    return ans

print(ascii_repr_str(""Python"")) # result: 080 121 116 104 111 110","    ___
    ans = ''
    ___
        ans += str(ord(ch))
    return ans

print(ascii_repr_str(""Python"")) # result: 080 121 116 104 111 110"
"Create a Python program to convert a list of numbers to a comma separated string. The program should take a list of integers as input and return a string with the elements of the list separated by a comma (',').","list_of_integers = [1, 2, 3, 4]","def list_to_string(list):
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4",Data Type,7468,"def list_to_string(list):
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4","    ___
 return ','.join(str(x) for x in list)

list_of_integers = [1, 2, 3, 4]
print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4"
Write a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found.,"string = ""Hello World""
substring = ""World""","def findSubstring(string, substring):
 index = string.find(substring)
 if index != -1:
  return index
 else:
  return -1

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns 6",Data Type,7470,"def findSubstring(string, substring):
 index = string.find(substring)
 if index != -1:
  return index
 else:
  return -1

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns 6","    ___
 index = string.find(substring)
    ___
  return index
 else:
  return -1

string = ""Hello World""
substring = ""World""
print(findSubstring(string, substring)) # returns 6"
"Develop a Python routine that takes a string, separates words and prints the first word.","""Hello, World!""","def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)",Data Type,7480,"def print_first_word(sentence):
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)","    ___
    words = sentence.split(' ')
    print(words[0])

sentence = ""Hello, World!""
print_first_word(sentence)"
Could you come up with a function in Python that removes all occurrences of the word 'impossible' from the given string?,"""It was impossible to find the answer.""","def remove_word(text):
    return text.replace('impossible', '')",Data Type,7481,"def remove_word(text):
    return text.replace('impossible', '')","    ___
    return text.replace('impossible', '')"
Create a program in Python for counting the occurrence of a character in a string.,"String = ""Hello! What is your name?""
Character = 'o'","String = ""Hello! What is your name?""
def characterCounter(string, character):
    count = 0
    for ch in string:
        if ch == character:
            count += 1
    return count

print(characterCounter(String, 'o')) # 2",Data Type,7486,"String = ""Hello! What is your name?""
def characterCounter(string, character):
    count = 0
    for ch in string:
        if ch == character:
            count += 1
    return count

print(characterCounter(String, 'o')) # 2","String = ""Hello! What is your name?""
    ___
    count = 0
    ___
    ___
            count += 1
    return count

print(characterCounter(String, 'o')) # 2"
Develop a Python code to parse an XML string.,"xml_string = ""<node><child>text</child></node>""","import xml.etree.ElementTree as ET

def parse_xml(xml_string):

    root  = ET.fromstring(xml_string)
    for node in root:
        print(f'Node: {node.tag}: {node.text}')

if __name__ == '__main__':
    xml_string = ""<node><child>text</child></node>""
    parse_xml(xml_string) # prints Node: child: text",Data Type,7489,"import xml.etree.ElementTree as ET

def parse_xml(xml_string):

    root  = ET.fromstring(xml_string)
    for node in root:
        print(f'Node: {node.tag}: {node.text}')

if __name__ == '__main__':
    xml_string = ""<node><child>text</child></node>""
    parse_xml(xml_string) # prints Node: child: text","import xml.etree.ElementTree as ET

    ___

    root  = ET.fromstring(xml_string)
    ___
        print(f'Node: {node.tag}: {node.text}')

    ___
    xml_string = ""<node><child>text</child></node>""
    parse_xml(xml_string) # prints Node: child: text"
Build an algorithm in Python to check if a string is a palindrome.,"""abccba""","def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False
    return True

str = ""abccba""
print(is_palindrome(str))",Data Type,7503,"def is_palindrome(str):
    # Get the length of the string
    n = len(str)

    for i in range(n//2):
        # Compare characters from both ends
        if str[i] != str[n-i-1]:
            return False
    return True

str = ""abccba""
print(is_palindrome(str))","    ___
    # Get the length of the string
    n = len(str)

    ___
        # Compare characters from both ends
    ___
            return False
    return True

str = ""abccba""
print(is_palindrome(str))"
Design a Python program to work out the percentage of vowels present in a given string.,"Text = ""Hello World!""","def vowel_percentage(text):
    vowels = ""aeiouAEIOU""
    num_vowels = 0
    for letter in text:
        if letter in vowels:
            num_vowels += 1
    percentage = (num_vowels/len(text)) * 100
    return percentage

print(vowel_percentage(""Hello World!""))",Data Type,7504,"def vowel_percentage(text):
    vowels = ""aeiouAEIOU""
    num_vowels = 0
    for letter in text:
        if letter in vowels:
            num_vowels += 1
    percentage = (num_vowels/len(text)) * 100
    return percentage

print(vowel_percentage(""Hello World!""))","    ___
    vowels = ""aeiouAEIOU""
    num_vowels = 0
    ___
    ___
            num_vowels += 1
    percentage = (num_vowels/len(text)) * 100
    return percentage

print(vowel_percentage(""Hello World!""))"
Generate a Python program to extract the emailIDs from a text string.,"Example user input: ""The list of contacts is john@test.com,jane@example.com,bob@test.com""","import re

text = ""The list of contacts is john@test.com,jane@example.com,bob@test.com""

pattern = r'[\w\.-]+@[\w\.-]+'

match = re.findall(pattern, text)

print(match)",Data Type,7508,"import re

text = ""The list of contacts is john@test.com,jane@example.com,bob@test.com""

pattern = r'[\w\.-]+@[\w\.-]+'

match = re.findall(pattern, text)

print(match)","import re

text = ""The list of contacts is john@test.com,jane@example.com,bob@test.com""

pattern = r'[\w\.-]+@[\w\.-]+'

match = re.findall(pattern, text)

print(match)"
Develop a program which reverts a string without using reverse(),Python,"def reverseString(str): 
  
    i = len(str) 
    rev_str = """" 
    while i > 0: 
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))",Data Type,7518,"def reverseString(str): 
  
    i = len(str) 
    rev_str = """" 
    while i > 0: 
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))","    ___
  
    i = len(str) 
    rev_str = """" 
    ___
        rev_str += str[i-1] 
        i = i-1
    return rev_str

str = ""Python""
print(""Original string: "" + str)
print(""Reversed string: "" + reverseString(str))"
Formulate a python code to remove the characters of odd index in a given string.,"string = ""welcome""","def remove_odd_index_char(string):
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    for i in range(len(string)):
        if i % 2 == 0:
            result = result + string[i] 
    return result

if __name__ == '__main__':
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe",Data Type,7539,"def remove_odd_index_char(string):
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    for i in range(len(string)):
        if i % 2 == 0:
            result = result + string[i] 
    return result

if __name__ == '__main__':
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe","    ___
    """"""
    Remove the characters of odd index in a given string
    """"""
    result = """" 
    ___
    ___
            result = result + string[i] 
    return result

    ___
    string = ""welcome""
    print(remove_odd_index_char(string)) # wloe"
Generate a Python program that takes an input string and reverse it.,"string = ""Hello world!""","def reverse(string):
  return string[::-1]
  
string = ""Hello world!""
print(reverse(string))",Data Type,7548,"def reverse(string):
  return string[::-1]
  
string = ""Hello world!""
print(reverse(string))","    ___
  return string[::-1]
  
string = ""Hello world!""
print(reverse(string))"
Create a web scraper in Python that loads a website page and extracts a particular string of text.,"URL: https://www.example.com/
Text to extract: ""Hello, world!""","import requests
from bs4 import BeautifulSoup
 
url = ""https://www.example.com/""
page = requests.get(url)
 
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find(string=""Hello, world!"")
print(text)",Data Type,7555,"import requests
from bs4 import BeautifulSoup
 
url = ""https://www.example.com/""
page = requests.get(url)
 
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find(string=""Hello, world!"")
print(text)","import requests
from bs4 import BeautifulSoup
 
url = ""https://www.example.com/""
page = requests.get(url)
 
soup = BeautifulSoup(page.content, 'html.parser')
text = soup.find(string=""Hello, world!"")
print(text)"
